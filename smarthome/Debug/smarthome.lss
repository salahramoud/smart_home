
smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a04c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  0000a04c  0000a0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800246  00800246  0000a2c6  2**0
                  ALLOC
  3 .stab         00005b20  00000000  00000000  0000a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d0  00000000  00000000  0000fde8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000231  00000000  00000000  00011298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d2f  00000000  00000000  000114c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f7  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000145d  00000000  00000000  000157ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00016c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000375  00000000  00000000  00016e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018ae  00000000  00000000  000171c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00018a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 2b 31 	jmp	0x6256	; 0x6256 <__vector_4>
      14:	0c 94 e7 30 	jmp	0x61ce	; 0x61ce <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__vector_9>
      28:	0c 94 b7 30 	jmp	0x616e	; 0x616e <__vector_10>
      2c:	0c 94 64 30 	jmp	0x60c8	; 0x60c8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f0 ea       	ldi	r31, 0xA0	; 160
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 33 	call	0x6612	; 0x6612 <main>
      8a:	0c 94 24 50 	jmp	0xa048	; 0xa048 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 a8 4f 	jmp	0x9f50	; 0x9f50 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 c4 4f 	jmp	0x9f88	; 0x9f88 <__epilogue_restores__>

00000288 <__fixunssfsi>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	7b 01       	movw	r14, r22
     292:	8c 01       	movw	r16, r24
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	5f e4       	ldi	r21, 0x4F	; 79
     29c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__gesf2>
     2a0:	88 23       	and	r24, r24
     2a2:	8c f0       	brlt	.+34     	; 0x2c6 <__fixunssfsi+0x3e>
     2a4:	c8 01       	movw	r24, r16
     2a6:	b7 01       	movw	r22, r14
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	5f e4       	ldi	r21, 0x4F	; 79
     2b0:	0e 94 31 09 	call	0x1262	; 0x1262 <__subsf3>
     2b4:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fixsfsi>
     2b8:	9b 01       	movw	r18, r22
     2ba:	ac 01       	movw	r20, r24
     2bc:	20 50       	subi	r18, 0x00	; 0
     2be:	30 40       	sbci	r19, 0x00	; 0
     2c0:	40 40       	sbci	r20, 0x00	; 0
     2c2:	50 48       	sbci	r21, 0x80	; 128
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__fixunssfsi+0x4a>
     2c6:	c8 01       	movw	r24, r16
     2c8:	b7 01       	movw	r22, r14
     2ca:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fixsfsi>
     2ce:	9b 01       	movw	r18, r22
     2d0:	ac 01       	movw	r20, r24
     2d2:	b9 01       	movw	r22, r18
     2d4:	ca 01       	movw	r24, r20
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <__udivdi3>:
     2e0:	ae e5       	ldi	r26, 0x5E	; 94
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e6 e7       	ldi	r30, 0x76	; 118
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	0c 94 a8 4f 	jmp	0x9f50	; 0x9f50 <__prologue_saves__>
     2ec:	a8 e0       	ldi	r26, 0x08	; 8
     2ee:	4e 01       	movw	r8, r28
     2f0:	08 94       	sec
     2f2:	81 1c       	adc	r8, r1
     2f4:	91 1c       	adc	r9, r1
     2f6:	f4 01       	movw	r30, r8
     2f8:	6a 2e       	mov	r6, r26
     2fa:	11 92       	st	Z+, r1
     2fc:	6a 94       	dec	r6
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <__udivdi3+0x1a>
     300:	29 83       	std	Y+1, r18	; 0x01
     302:	3a 83       	std	Y+2, r19	; 0x02
     304:	4b 83       	std	Y+3, r20	; 0x03
     306:	5c 83       	std	Y+4, r21	; 0x04
     308:	6d 83       	std	Y+5, r22	; 0x05
     30a:	7e 83       	std	Y+6, r23	; 0x06
     30c:	8f 83       	std	Y+7, r24	; 0x07
     30e:	98 87       	std	Y+8, r25	; 0x08
     310:	ce 01       	movw	r24, r28
     312:	09 96       	adiw	r24, 0x09	; 9
     314:	fc 01       	movw	r30, r24
     316:	11 92       	st	Z+, r1
     318:	aa 95       	dec	r26
     31a:	e9 f7       	brne	.-6      	; 0x316 <__udivdi3+0x36>
     31c:	a9 86       	std	Y+9, r10	; 0x09
     31e:	ba 86       	std	Y+10, r11	; 0x0a
     320:	cb 86       	std	Y+11, r12	; 0x0b
     322:	dc 86       	std	Y+12, r13	; 0x0c
     324:	ed 86       	std	Y+13, r14	; 0x0d
     326:	fe 86       	std	Y+14, r15	; 0x0e
     328:	0f 87       	std	Y+15, r16	; 0x0f
     32a:	18 8b       	std	Y+16, r17	; 0x10
     32c:	29 84       	ldd	r2, Y+9	; 0x09
     32e:	3a 84       	ldd	r3, Y+10	; 0x0a
     330:	4b 84       	ldd	r4, Y+11	; 0x0b
     332:	5c 84       	ldd	r5, Y+12	; 0x0c
     334:	ed 84       	ldd	r14, Y+13	; 0x0d
     336:	fe 84       	ldd	r15, Y+14	; 0x0e
     338:	0f 85       	ldd	r16, Y+15	; 0x0f
     33a:	18 89       	ldd	r17, Y+16	; 0x10
     33c:	69 80       	ldd	r6, Y+1	; 0x01
     33e:	7a 80       	ldd	r7, Y+2	; 0x02
     340:	8b 80       	ldd	r8, Y+3	; 0x03
     342:	9c 80       	ldd	r9, Y+4	; 0x04
     344:	6d a6       	std	Y+45, r6	; 0x2d
     346:	7e a6       	std	Y+46, r7	; 0x2e
     348:	8f a6       	std	Y+47, r8	; 0x2f
     34a:	98 aa       	std	Y+48, r9	; 0x30
     34c:	6d 80       	ldd	r6, Y+5	; 0x05
     34e:	7e 80       	ldd	r7, Y+6	; 0x06
     350:	8f 80       	ldd	r8, Y+7	; 0x07
     352:	98 84       	ldd	r9, Y+8	; 0x08
     354:	e1 14       	cp	r14, r1
     356:	f1 04       	cpc	r15, r1
     358:	01 05       	cpc	r16, r1
     35a:	11 05       	cpc	r17, r1
     35c:	09 f0       	breq	.+2      	; 0x360 <__udivdi3+0x80>
     35e:	b3 c3       	rjmp	.+1894   	; 0xac6 <__stack+0x267>
     360:	62 14       	cp	r6, r2
     362:	73 04       	cpc	r7, r3
     364:	84 04       	cpc	r8, r4
     366:	95 04       	cpc	r9, r5
     368:	08 f0       	brcs	.+2      	; 0x36c <__udivdi3+0x8c>
     36a:	3d c1       	rjmp	.+634    	; 0x5e6 <__udivdi3+0x306>
     36c:	00 e0       	ldi	r16, 0x00	; 0
     36e:	20 16       	cp	r2, r16
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	30 06       	cpc	r3, r16
     374:	01 e0       	ldi	r16, 0x01	; 1
     376:	40 06       	cpc	r4, r16
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	50 06       	cpc	r5, r16
     37c:	88 f4       	brcc	.+34     	; 0x3a0 <__udivdi3+0xc0>
     37e:	1f ef       	ldi	r17, 0xFF	; 255
     380:	21 16       	cp	r2, r17
     382:	31 04       	cpc	r3, r1
     384:	41 04       	cpc	r4, r1
     386:	51 04       	cpc	r5, r1
     388:	39 f0       	breq	.+14     	; 0x398 <__udivdi3+0xb8>
     38a:	30 f0       	brcs	.+12     	; 0x398 <__udivdi3+0xb8>
     38c:	48 e0       	ldi	r20, 0x08	; 8
     38e:	e4 2e       	mov	r14, r20
     390:	f1 2c       	mov	r15, r1
     392:	01 2d       	mov	r16, r1
     394:	11 2d       	mov	r17, r1
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__udivdi3+0xe8>
     398:	ee 24       	eor	r14, r14
     39a:	ff 24       	eor	r15, r15
     39c:	87 01       	movw	r16, r14
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <__udivdi3+0xe8>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	22 16       	cp	r2, r18
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	32 06       	cpc	r3, r18
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	42 06       	cpc	r4, r18
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	52 06       	cpc	r5, r18
     3b0:	30 f0       	brcs	.+12     	; 0x3be <__udivdi3+0xde>
     3b2:	38 e1       	ldi	r19, 0x18	; 24
     3b4:	e3 2e       	mov	r14, r19
     3b6:	f1 2c       	mov	r15, r1
     3b8:	01 2d       	mov	r16, r1
     3ba:	11 2d       	mov	r17, r1
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <__udivdi3+0xe8>
     3be:	20 e1       	ldi	r18, 0x10	; 16
     3c0:	e2 2e       	mov	r14, r18
     3c2:	f1 2c       	mov	r15, r1
     3c4:	01 2d       	mov	r16, r1
     3c6:	11 2d       	mov	r17, r1
     3c8:	d2 01       	movw	r26, r4
     3ca:	c1 01       	movw	r24, r2
     3cc:	0e 2c       	mov	r0, r14
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <__udivdi3+0xf8>
     3d0:	b6 95       	lsr	r27
     3d2:	a7 95       	ror	r26
     3d4:	97 95       	ror	r25
     3d6:	87 95       	ror	r24
     3d8:	0a 94       	dec	r0
     3da:	d2 f7       	brpl	.-12     	; 0x3d0 <__udivdi3+0xf0>
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	9e 4f       	sbci	r25, 0xFE	; 254
     3e0:	dc 01       	movw	r26, r24
     3e2:	2c 91       	ld	r18, X
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	8e 19       	sub	r24, r14
     3ee:	9f 09       	sbc	r25, r15
     3f0:	a0 0b       	sbc	r26, r16
     3f2:	b1 0b       	sbc	r27, r17
     3f4:	7c 01       	movw	r14, r24
     3f6:	8d 01       	movw	r16, r26
     3f8:	e2 1a       	sub	r14, r18
     3fa:	f1 08       	sbc	r15, r1
     3fc:	01 09       	sbc	r16, r1
     3fe:	11 09       	sbc	r17, r1
     400:	e1 14       	cp	r14, r1
     402:	f1 04       	cpc	r15, r1
     404:	01 05       	cpc	r16, r1
     406:	11 05       	cpc	r17, r1
     408:	a1 f1       	breq	.+104    	; 0x472 <__udivdi3+0x192>
     40a:	0e 2c       	mov	r0, r14
     40c:	04 c0       	rjmp	.+8      	; 0x416 <__udivdi3+0x136>
     40e:	22 0c       	add	r2, r2
     410:	33 1c       	adc	r3, r3
     412:	44 1c       	adc	r4, r4
     414:	55 1c       	adc	r5, r5
     416:	0a 94       	dec	r0
     418:	d2 f7       	brpl	.-12     	; 0x40e <__udivdi3+0x12e>
     41a:	a4 01       	movw	r20, r8
     41c:	93 01       	movw	r18, r6
     41e:	0e 2c       	mov	r0, r14
     420:	04 c0       	rjmp	.+8      	; 0x42a <__udivdi3+0x14a>
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	44 1f       	adc	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	0a 94       	dec	r0
     42c:	d2 f7       	brpl	.-12     	; 0x422 <__udivdi3+0x142>
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8e 19       	sub	r24, r14
     434:	9f 09       	sbc	r25, r15
     436:	6d a4       	ldd	r6, Y+45	; 0x2d
     438:	7e a4       	ldd	r7, Y+46	; 0x2e
     43a:	8f a4       	ldd	r8, Y+47	; 0x2f
     43c:	98 a8       	ldd	r9, Y+48	; 0x30
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__udivdi3+0x168>
     440:	96 94       	lsr	r9
     442:	87 94       	ror	r8
     444:	77 94       	ror	r7
     446:	67 94       	ror	r6
     448:	8a 95       	dec	r24
     44a:	d2 f7       	brpl	.-12     	; 0x440 <__udivdi3+0x160>
     44c:	62 2a       	or	r6, r18
     44e:	73 2a       	or	r7, r19
     450:	84 2a       	or	r8, r20
     452:	95 2a       	or	r9, r21
     454:	ad a4       	ldd	r10, Y+45	; 0x2d
     456:	be a4       	ldd	r11, Y+46	; 0x2e
     458:	cf a4       	ldd	r12, Y+47	; 0x2f
     45a:	d8 a8       	ldd	r13, Y+48	; 0x30
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__udivdi3+0x186>
     45e:	aa 0c       	add	r10, r10
     460:	bb 1c       	adc	r11, r11
     462:	cc 1c       	adc	r12, r12
     464:	dd 1c       	adc	r13, r13
     466:	ea 94       	dec	r14
     468:	d2 f7       	brpl	.-12     	; 0x45e <__udivdi3+0x17e>
     46a:	ad a6       	std	Y+45, r10	; 0x2d
     46c:	be a6       	std	Y+46, r11	; 0x2e
     46e:	cf a6       	std	Y+47, r12	; 0x2f
     470:	d8 aa       	std	Y+48, r13	; 0x30
     472:	62 01       	movw	r12, r4
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15
     478:	cd aa       	std	Y+53, r12	; 0x35
     47a:	de aa       	std	Y+54, r13	; 0x36
     47c:	ef aa       	std	Y+55, r14	; 0x37
     47e:	f8 ae       	std	Y+56, r15	; 0x38
     480:	92 01       	movw	r18, r4
     482:	81 01       	movw	r16, r2
     484:	20 70       	andi	r18, 0x00	; 0
     486:	30 70       	andi	r19, 0x00	; 0
     488:	09 af       	std	Y+57, r16	; 0x39
     48a:	1a af       	std	Y+58, r17	; 0x3a
     48c:	2b af       	std	Y+59, r18	; 0x3b
     48e:	3c af       	std	Y+60, r19	; 0x3c
     490:	c4 01       	movw	r24, r8
     492:	b3 01       	movw	r22, r6
     494:	a7 01       	movw	r20, r14
     496:	96 01       	movw	r18, r12
     498:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     49c:	7b 01       	movw	r14, r22
     49e:	8c 01       	movw	r16, r24
     4a0:	c4 01       	movw	r24, r8
     4a2:	b3 01       	movw	r22, r6
     4a4:	2d a9       	ldd	r18, Y+53	; 0x35
     4a6:	3e a9       	ldd	r19, Y+54	; 0x36
     4a8:	4f a9       	ldd	r20, Y+55	; 0x37
     4aa:	58 ad       	ldd	r21, Y+56	; 0x38
     4ac:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     4b0:	c9 01       	movw	r24, r18
     4b2:	da 01       	movw	r26, r20
     4b4:	3c 01       	movw	r6, r24
     4b6:	4d 01       	movw	r8, r26
     4b8:	c4 01       	movw	r24, r8
     4ba:	b3 01       	movw	r22, r6
     4bc:	29 ad       	ldd	r18, Y+57	; 0x39
     4be:	3a ad       	ldd	r19, Y+58	; 0x3a
     4c0:	4b ad       	ldd	r20, Y+59	; 0x3b
     4c2:	5c ad       	ldd	r21, Y+60	; 0x3c
     4c4:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     4c8:	9b 01       	movw	r18, r22
     4ca:	ac 01       	movw	r20, r24
     4cc:	87 01       	movw	r16, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	ee 24       	eor	r14, r14
     4d2:	ad a4       	ldd	r10, Y+45	; 0x2d
     4d4:	be a4       	ldd	r11, Y+46	; 0x2e
     4d6:	cf a4       	ldd	r12, Y+47	; 0x2f
     4d8:	d8 a8       	ldd	r13, Y+48	; 0x30
     4da:	c6 01       	movw	r24, r12
     4dc:	aa 27       	eor	r26, r26
     4de:	bb 27       	eor	r27, r27
     4e0:	57 01       	movw	r10, r14
     4e2:	68 01       	movw	r12, r16
     4e4:	a8 2a       	or	r10, r24
     4e6:	b9 2a       	or	r11, r25
     4e8:	ca 2a       	or	r12, r26
     4ea:	db 2a       	or	r13, r27
     4ec:	a2 16       	cp	r10, r18
     4ee:	b3 06       	cpc	r11, r19
     4f0:	c4 06       	cpc	r12, r20
     4f2:	d5 06       	cpc	r13, r21
     4f4:	e0 f4       	brcc	.+56     	; 0x52e <__udivdi3+0x24e>
     4f6:	08 94       	sec
     4f8:	61 08       	sbc	r6, r1
     4fa:	71 08       	sbc	r7, r1
     4fc:	81 08       	sbc	r8, r1
     4fe:	91 08       	sbc	r9, r1
     500:	a2 0c       	add	r10, r2
     502:	b3 1c       	adc	r11, r3
     504:	c4 1c       	adc	r12, r4
     506:	d5 1c       	adc	r13, r5
     508:	a2 14       	cp	r10, r2
     50a:	b3 04       	cpc	r11, r3
     50c:	c4 04       	cpc	r12, r4
     50e:	d5 04       	cpc	r13, r5
     510:	70 f0       	brcs	.+28     	; 0x52e <__udivdi3+0x24e>
     512:	a2 16       	cp	r10, r18
     514:	b3 06       	cpc	r11, r19
     516:	c4 06       	cpc	r12, r20
     518:	d5 06       	cpc	r13, r21
     51a:	48 f4       	brcc	.+18     	; 0x52e <__udivdi3+0x24e>
     51c:	08 94       	sec
     51e:	61 08       	sbc	r6, r1
     520:	71 08       	sbc	r7, r1
     522:	81 08       	sbc	r8, r1
     524:	91 08       	sbc	r9, r1
     526:	a2 0c       	add	r10, r2
     528:	b3 1c       	adc	r11, r3
     52a:	c4 1c       	adc	r12, r4
     52c:	d5 1c       	adc	r13, r5
     52e:	a2 1a       	sub	r10, r18
     530:	b3 0a       	sbc	r11, r19
     532:	c4 0a       	sbc	r12, r20
     534:	d5 0a       	sbc	r13, r21
     536:	c6 01       	movw	r24, r12
     538:	b5 01       	movw	r22, r10
     53a:	2d a9       	ldd	r18, Y+53	; 0x35
     53c:	3e a9       	ldd	r19, Y+54	; 0x36
     53e:	4f a9       	ldd	r20, Y+55	; 0x37
     540:	58 ad       	ldd	r21, Y+56	; 0x38
     542:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     546:	7b 01       	movw	r14, r22
     548:	8c 01       	movw	r16, r24
     54a:	c6 01       	movw	r24, r12
     54c:	b5 01       	movw	r22, r10
     54e:	2d a9       	ldd	r18, Y+53	; 0x35
     550:	3e a9       	ldd	r19, Y+54	; 0x36
     552:	4f a9       	ldd	r20, Y+55	; 0x37
     554:	58 ad       	ldd	r21, Y+56	; 0x38
     556:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     55a:	c9 01       	movw	r24, r18
     55c:	da 01       	movw	r26, r20
     55e:	5c 01       	movw	r10, r24
     560:	6d 01       	movw	r12, r26
     562:	c6 01       	movw	r24, r12
     564:	b5 01       	movw	r22, r10
     566:	29 ad       	ldd	r18, Y+57	; 0x39
     568:	3a ad       	ldd	r19, Y+58	; 0x3a
     56a:	4b ad       	ldd	r20, Y+59	; 0x3b
     56c:	5c ad       	ldd	r21, Y+60	; 0x3c
     56e:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	87 01       	movw	r16, r14
     578:	ff 24       	eor	r15, r15
     57a:	ee 24       	eor	r14, r14
     57c:	8d a5       	ldd	r24, Y+45	; 0x2d
     57e:	9e a5       	ldd	r25, Y+46	; 0x2e
     580:	af a5       	ldd	r26, Y+47	; 0x2f
     582:	b8 a9       	ldd	r27, Y+48	; 0x30
     584:	a0 70       	andi	r26, 0x00	; 0
     586:	b0 70       	andi	r27, 0x00	; 0
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	e2 16       	cp	r14, r18
     592:	f3 06       	cpc	r15, r19
     594:	04 07       	cpc	r16, r20
     596:	15 07       	cpc	r17, r21
     598:	c0 f4       	brcc	.+48     	; 0x5ca <__udivdi3+0x2ea>
     59a:	08 94       	sec
     59c:	a1 08       	sbc	r10, r1
     59e:	b1 08       	sbc	r11, r1
     5a0:	c1 08       	sbc	r12, r1
     5a2:	d1 08       	sbc	r13, r1
     5a4:	e2 0c       	add	r14, r2
     5a6:	f3 1c       	adc	r15, r3
     5a8:	04 1d       	adc	r16, r4
     5aa:	15 1d       	adc	r17, r5
     5ac:	e2 14       	cp	r14, r2
     5ae:	f3 04       	cpc	r15, r3
     5b0:	04 05       	cpc	r16, r4
     5b2:	15 05       	cpc	r17, r5
     5b4:	50 f0       	brcs	.+20     	; 0x5ca <__udivdi3+0x2ea>
     5b6:	e2 16       	cp	r14, r18
     5b8:	f3 06       	cpc	r15, r19
     5ba:	04 07       	cpc	r16, r20
     5bc:	15 07       	cpc	r17, r21
     5be:	28 f4       	brcc	.+10     	; 0x5ca <__udivdi3+0x2ea>
     5c0:	08 94       	sec
     5c2:	a1 08       	sbc	r10, r1
     5c4:	b1 08       	sbc	r11, r1
     5c6:	c1 08       	sbc	r12, r1
     5c8:	d1 08       	sbc	r13, r1
     5ca:	d3 01       	movw	r26, r6
     5cc:	99 27       	eor	r25, r25
     5ce:	88 27       	eor	r24, r24
     5d0:	86 01       	movw	r16, r12
     5d2:	75 01       	movw	r14, r10
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	e9 aa       	std	Y+49, r14	; 0x31
     5de:	fa aa       	std	Y+50, r15	; 0x32
     5e0:	0b ab       	std	Y+51, r16	; 0x33
     5e2:	1c ab       	std	Y+52, r17	; 0x34
     5e4:	cf c4       	rjmp	.+2462   	; 0xf84 <__stack+0x725>
     5e6:	21 14       	cp	r2, r1
     5e8:	31 04       	cpc	r3, r1
     5ea:	41 04       	cpc	r4, r1
     5ec:	51 04       	cpc	r5, r1
     5ee:	71 f4       	brne	.+28     	; 0x60c <__udivdi3+0x32c>
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     604:	c9 01       	movw	r24, r18
     606:	da 01       	movw	r26, r20
     608:	1c 01       	movw	r2, r24
     60a:	2d 01       	movw	r4, r26
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	20 16       	cp	r2, r16
     610:	00 e0       	ldi	r16, 0x00	; 0
     612:	30 06       	cpc	r3, r16
     614:	01 e0       	ldi	r16, 0x01	; 1
     616:	40 06       	cpc	r4, r16
     618:	00 e0       	ldi	r16, 0x00	; 0
     61a:	50 06       	cpc	r5, r16
     61c:	88 f4       	brcc	.+34     	; 0x640 <__udivdi3+0x360>
     61e:	1f ef       	ldi	r17, 0xFF	; 255
     620:	21 16       	cp	r2, r17
     622:	31 04       	cpc	r3, r1
     624:	41 04       	cpc	r4, r1
     626:	51 04       	cpc	r5, r1
     628:	31 f0       	breq	.+12     	; 0x636 <__udivdi3+0x356>
     62a:	28 f0       	brcs	.+10     	; 0x636 <__udivdi3+0x356>
     62c:	48 e0       	ldi	r20, 0x08	; 8
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	17 c0       	rjmp	.+46     	; 0x664 <__udivdi3+0x384>
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	12 c0       	rjmp	.+36     	; 0x664 <__udivdi3+0x384>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	22 16       	cp	r2, r18
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	32 06       	cpc	r3, r18
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	42 06       	cpc	r4, r18
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	52 06       	cpc	r5, r18
     650:	28 f0       	brcs	.+10     	; 0x65c <__udivdi3+0x37c>
     652:	48 e1       	ldi	r20, 0x18	; 24
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	04 c0       	rjmp	.+8      	; 0x664 <__udivdi3+0x384>
     65c:	40 e1       	ldi	r20, 0x10	; 16
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	d2 01       	movw	r26, r4
     666:	c1 01       	movw	r24, r2
     668:	04 2e       	mov	r0, r20
     66a:	04 c0       	rjmp	.+8      	; 0x674 <__udivdi3+0x394>
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	0a 94       	dec	r0
     676:	d2 f7       	brpl	.-12     	; 0x66c <__udivdi3+0x38c>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	9e 4f       	sbci	r25, 0xFE	; 254
     67c:	dc 01       	movw	r26, r24
     67e:	2c 91       	ld	r18, X
     680:	e0 e2       	ldi	r30, 0x20	; 32
     682:	ee 2e       	mov	r14, r30
     684:	f1 2c       	mov	r15, r1
     686:	01 2d       	mov	r16, r1
     688:	11 2d       	mov	r17, r1
     68a:	d8 01       	movw	r26, r16
     68c:	c7 01       	movw	r24, r14
     68e:	84 1b       	sub	r24, r20
     690:	95 0b       	sbc	r25, r21
     692:	a6 0b       	sbc	r26, r22
     694:	b7 0b       	sbc	r27, r23
     696:	82 1b       	sub	r24, r18
     698:	91 09       	sbc	r25, r1
     69a:	a1 09       	sbc	r26, r1
     69c:	b1 09       	sbc	r27, r1
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	a1 05       	cpc	r26, r1
     6a2:	b1 05       	cpc	r27, r1
     6a4:	61 f4       	brne	.+24     	; 0x6be <__udivdi3+0x3de>
     6a6:	64 01       	movw	r12, r8
     6a8:	53 01       	movw	r10, r6
     6aa:	a2 18       	sub	r10, r2
     6ac:	b3 08       	sbc	r11, r3
     6ae:	c4 08       	sbc	r12, r4
     6b0:	d5 08       	sbc	r13, r5
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	63 2e       	mov	r6, r19
     6b6:	71 2c       	mov	r7, r1
     6b8:	81 2c       	mov	r8, r1
     6ba:	91 2c       	mov	r9, r1
     6bc:	1e c1       	rjmp	.+572    	; 0x8fa <__stack+0x9b>
     6be:	6f 96       	adiw	r28, 0x1f	; 31
     6c0:	8f af       	std	Y+63, r24	; 0x3f
     6c2:	6f 97       	sbiw	r28, 0x1f	; 31
     6c4:	08 2e       	mov	r0, r24
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__udivdi3+0x3f0>
     6c8:	22 0c       	add	r2, r2
     6ca:	33 1c       	adc	r3, r3
     6cc:	44 1c       	adc	r4, r4
     6ce:	55 1c       	adc	r5, r5
     6d0:	0a 94       	dec	r0
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <__udivdi3+0x3e8>
     6d4:	ee 2d       	mov	r30, r14
     6d6:	e8 1b       	sub	r30, r24
     6d8:	64 01       	movw	r12, r8
     6da:	53 01       	movw	r10, r6
     6dc:	0e 2e       	mov	r0, r30
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__udivdi3+0x408>
     6e0:	d6 94       	lsr	r13
     6e2:	c7 94       	ror	r12
     6e4:	b7 94       	ror	r11
     6e6:	a7 94       	ror	r10
     6e8:	0a 94       	dec	r0
     6ea:	d2 f7       	brpl	.-12     	; 0x6e0 <__udivdi3+0x400>
     6ec:	a4 01       	movw	r20, r8
     6ee:	93 01       	movw	r18, r6
     6f0:	6f 96       	adiw	r28, 0x1f	; 31
     6f2:	0f ac       	ldd	r0, Y+63	; 0x3f
     6f4:	6f 97       	sbiw	r28, 0x1f	; 31
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <__udivdi3+0x420>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	44 1f       	adc	r20, r20
     6fe:	55 1f       	adc	r21, r21
     700:	0a 94       	dec	r0
     702:	d2 f7       	brpl	.-12     	; 0x6f8 <__udivdi3+0x418>
     704:	6d a4       	ldd	r6, Y+45	; 0x2d
     706:	7e a4       	ldd	r7, Y+46	; 0x2e
     708:	8f a4       	ldd	r8, Y+47	; 0x2f
     70a:	98 a8       	ldd	r9, Y+48	; 0x30
     70c:	0e 2e       	mov	r0, r30
     70e:	04 c0       	rjmp	.+8      	; 0x718 <__udivdi3+0x438>
     710:	96 94       	lsr	r9
     712:	87 94       	ror	r8
     714:	77 94       	ror	r7
     716:	67 94       	ror	r6
     718:	0a 94       	dec	r0
     71a:	d2 f7       	brpl	.-12     	; 0x710 <__udivdi3+0x430>
     71c:	84 01       	movw	r16, r8
     71e:	73 01       	movw	r14, r6
     720:	e2 2a       	or	r14, r18
     722:	f3 2a       	or	r15, r19
     724:	04 2b       	or	r16, r20
     726:	15 2b       	or	r17, r21
     728:	e9 a6       	std	Y+41, r14	; 0x29
     72a:	fa a6       	std	Y+42, r15	; 0x2a
     72c:	0b a7       	std	Y+43, r16	; 0x2b
     72e:	1c a7       	std	Y+44, r17	; 0x2c
     730:	32 01       	movw	r6, r4
     732:	88 24       	eor	r8, r8
     734:	99 24       	eor	r9, r9
     736:	92 01       	movw	r18, r4
     738:	81 01       	movw	r16, r2
     73a:	20 70       	andi	r18, 0x00	; 0
     73c:	30 70       	andi	r19, 0x00	; 0
     73e:	21 96       	adiw	r28, 0x01	; 1
     740:	0c af       	std	Y+60, r16	; 0x3c
     742:	1d af       	std	Y+61, r17	; 0x3d
     744:	2e af       	std	Y+62, r18	; 0x3e
     746:	3f af       	std	Y+63, r19	; 0x3f
     748:	21 97       	sbiw	r28, 0x01	; 1
     74a:	c6 01       	movw	r24, r12
     74c:	b5 01       	movw	r22, r10
     74e:	a4 01       	movw	r20, r8
     750:	93 01       	movw	r18, r6
     752:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     756:	7b 01       	movw	r14, r22
     758:	8c 01       	movw	r16, r24
     75a:	c6 01       	movw	r24, r12
     75c:	b5 01       	movw	r22, r10
     75e:	a4 01       	movw	r20, r8
     760:	93 01       	movw	r18, r6
     762:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     766:	c9 01       	movw	r24, r18
     768:	da 01       	movw	r26, r20
     76a:	25 96       	adiw	r28, 0x05	; 5
     76c:	8c af       	std	Y+60, r24	; 0x3c
     76e:	9d af       	std	Y+61, r25	; 0x3d
     770:	ae af       	std	Y+62, r26	; 0x3e
     772:	bf af       	std	Y+63, r27	; 0x3f
     774:	25 97       	sbiw	r28, 0x05	; 5
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	21 96       	adiw	r28, 0x01	; 1
     77c:	2c ad       	ldd	r18, Y+60	; 0x3c
     77e:	3d ad       	ldd	r19, Y+61	; 0x3d
     780:	4e ad       	ldd	r20, Y+62	; 0x3e
     782:	5f ad       	ldd	r21, Y+63	; 0x3f
     784:	21 97       	sbiw	r28, 0x01	; 1
     786:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	87 01       	movw	r16, r14
     790:	ff 24       	eor	r15, r15
     792:	ee 24       	eor	r14, r14
     794:	a9 a4       	ldd	r10, Y+41	; 0x29
     796:	ba a4       	ldd	r11, Y+42	; 0x2a
     798:	cb a4       	ldd	r12, Y+43	; 0x2b
     79a:	dc a4       	ldd	r13, Y+44	; 0x2c
     79c:	c6 01       	movw	r24, r12
     79e:	aa 27       	eor	r26, r26
     7a0:	bb 27       	eor	r27, r27
     7a2:	5c 01       	movw	r10, r24
     7a4:	6d 01       	movw	r12, r26
     7a6:	ae 28       	or	r10, r14
     7a8:	bf 28       	or	r11, r15
     7aa:	c0 2a       	or	r12, r16
     7ac:	d1 2a       	or	r13, r17
     7ae:	a2 16       	cp	r10, r18
     7b0:	b3 06       	cpc	r11, r19
     7b2:	c4 06       	cpc	r12, r20
     7b4:	d5 06       	cpc	r13, r21
     7b6:	60 f5       	brcc	.+88     	; 0x810 <__udivdi3+0x530>
     7b8:	25 96       	adiw	r28, 0x05	; 5
     7ba:	6c ad       	ldd	r22, Y+60	; 0x3c
     7bc:	7d ad       	ldd	r23, Y+61	; 0x3d
     7be:	8e ad       	ldd	r24, Y+62	; 0x3e
     7c0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7c2:	25 97       	sbiw	r28, 0x05	; 5
     7c4:	61 50       	subi	r22, 0x01	; 1
     7c6:	70 40       	sbci	r23, 0x00	; 0
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	25 96       	adiw	r28, 0x05	; 5
     7ce:	6c af       	std	Y+60, r22	; 0x3c
     7d0:	7d af       	std	Y+61, r23	; 0x3d
     7d2:	8e af       	std	Y+62, r24	; 0x3e
     7d4:	9f af       	std	Y+63, r25	; 0x3f
     7d6:	25 97       	sbiw	r28, 0x05	; 5
     7d8:	a2 0c       	add	r10, r2
     7da:	b3 1c       	adc	r11, r3
     7dc:	c4 1c       	adc	r12, r4
     7de:	d5 1c       	adc	r13, r5
     7e0:	a2 14       	cp	r10, r2
     7e2:	b3 04       	cpc	r11, r3
     7e4:	c4 04       	cpc	r12, r4
     7e6:	d5 04       	cpc	r13, r5
     7e8:	98 f0       	brcs	.+38     	; 0x810 <__udivdi3+0x530>
     7ea:	a2 16       	cp	r10, r18
     7ec:	b3 06       	cpc	r11, r19
     7ee:	c4 06       	cpc	r12, r20
     7f0:	d5 06       	cpc	r13, r21
     7f2:	70 f4       	brcc	.+28     	; 0x810 <__udivdi3+0x530>
     7f4:	61 50       	subi	r22, 0x01	; 1
     7f6:	70 40       	sbci	r23, 0x00	; 0
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	25 96       	adiw	r28, 0x05	; 5
     7fe:	6c af       	std	Y+60, r22	; 0x3c
     800:	7d af       	std	Y+61, r23	; 0x3d
     802:	8e af       	std	Y+62, r24	; 0x3e
     804:	9f af       	std	Y+63, r25	; 0x3f
     806:	25 97       	sbiw	r28, 0x05	; 5
     808:	a2 0c       	add	r10, r2
     80a:	b3 1c       	adc	r11, r3
     80c:	c4 1c       	adc	r12, r4
     80e:	d5 1c       	adc	r13, r5
     810:	a2 1a       	sub	r10, r18
     812:	b3 0a       	sbc	r11, r19
     814:	c4 0a       	sbc	r12, r20
     816:	d5 0a       	sbc	r13, r21
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	a4 01       	movw	r20, r8
     81e:	93 01       	movw	r18, r6
     820:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     824:	7b 01       	movw	r14, r22
     826:	8c 01       	movw	r16, r24
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	a4 01       	movw	r20, r8
     82e:	93 01       	movw	r18, r6
     830:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	3c 01       	movw	r6, r24
     83a:	4d 01       	movw	r8, r26
     83c:	c4 01       	movw	r24, r8
     83e:	b3 01       	movw	r22, r6
     840:	21 96       	adiw	r28, 0x01	; 1
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	21 97       	sbiw	r28, 0x01	; 1
     84c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	89 a5       	ldd	r24, Y+41	; 0x29
     85c:	9a a5       	ldd	r25, Y+42	; 0x2a
     85e:	ab a5       	ldd	r26, Y+43	; 0x2b
     860:	bc a5       	ldd	r27, Y+44	; 0x2c
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	57 01       	movw	r10, r14
     868:	68 01       	movw	r12, r16
     86a:	a8 2a       	or	r10, r24
     86c:	b9 2a       	or	r11, r25
     86e:	ca 2a       	or	r12, r26
     870:	db 2a       	or	r13, r27
     872:	a2 16       	cp	r10, r18
     874:	b3 06       	cpc	r11, r19
     876:	c4 06       	cpc	r12, r20
     878:	d5 06       	cpc	r13, r21
     87a:	e0 f4       	brcc	.+56     	; 0x8b4 <__stack+0x55>
     87c:	08 94       	sec
     87e:	61 08       	sbc	r6, r1
     880:	71 08       	sbc	r7, r1
     882:	81 08       	sbc	r8, r1
     884:	91 08       	sbc	r9, r1
     886:	a2 0c       	add	r10, r2
     888:	b3 1c       	adc	r11, r3
     88a:	c4 1c       	adc	r12, r4
     88c:	d5 1c       	adc	r13, r5
     88e:	a2 14       	cp	r10, r2
     890:	b3 04       	cpc	r11, r3
     892:	c4 04       	cpc	r12, r4
     894:	d5 04       	cpc	r13, r5
     896:	70 f0       	brcs	.+28     	; 0x8b4 <__stack+0x55>
     898:	a2 16       	cp	r10, r18
     89a:	b3 06       	cpc	r11, r19
     89c:	c4 06       	cpc	r12, r20
     89e:	d5 06       	cpc	r13, r21
     8a0:	48 f4       	brcc	.+18     	; 0x8b4 <__stack+0x55>
     8a2:	08 94       	sec
     8a4:	61 08       	sbc	r6, r1
     8a6:	71 08       	sbc	r7, r1
     8a8:	81 08       	sbc	r8, r1
     8aa:	91 08       	sbc	r9, r1
     8ac:	a2 0c       	add	r10, r2
     8ae:	b3 1c       	adc	r11, r3
     8b0:	c4 1c       	adc	r12, r4
     8b2:	d5 1c       	adc	r13, r5
     8b4:	8d a5       	ldd	r24, Y+45	; 0x2d
     8b6:	9e a5       	ldd	r25, Y+46	; 0x2e
     8b8:	af a5       	ldd	r26, Y+47	; 0x2f
     8ba:	b8 a9       	ldd	r27, Y+48	; 0x30
     8bc:	6f 96       	adiw	r28, 0x1f	; 31
     8be:	0f ac       	ldd	r0, Y+63	; 0x3f
     8c0:	6f 97       	sbiw	r28, 0x1f	; 31
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__stack+0x6d>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	aa 1f       	adc	r26, r26
     8ca:	bb 1f       	adc	r27, r27
     8cc:	0a 94       	dec	r0
     8ce:	d2 f7       	brpl	.-12     	; 0x8c4 <__stack+0x65>
     8d0:	8d a7       	std	Y+45, r24	; 0x2d
     8d2:	9e a7       	std	Y+46, r25	; 0x2e
     8d4:	af a7       	std	Y+47, r26	; 0x2f
     8d6:	b8 ab       	std	Y+48, r27	; 0x30
     8d8:	a2 1a       	sub	r10, r18
     8da:	b3 0a       	sbc	r11, r19
     8dc:	c4 0a       	sbc	r12, r20
     8de:	d5 0a       	sbc	r13, r21
     8e0:	25 96       	adiw	r28, 0x05	; 5
     8e2:	ec ac       	ldd	r14, Y+60	; 0x3c
     8e4:	fd ac       	ldd	r15, Y+61	; 0x3d
     8e6:	0e ad       	ldd	r16, Y+62	; 0x3e
     8e8:	1f ad       	ldd	r17, Y+63	; 0x3f
     8ea:	25 97       	sbiw	r28, 0x05	; 5
     8ec:	d7 01       	movw	r26, r14
     8ee:	99 27       	eor	r25, r25
     8f0:	88 27       	eor	r24, r24
     8f2:	68 2a       	or	r6, r24
     8f4:	79 2a       	or	r7, r25
     8f6:	8a 2a       	or	r8, r26
     8f8:	9b 2a       	or	r9, r27
     8fa:	82 01       	movw	r16, r4
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	29 96       	adiw	r28, 0x09	; 9
     902:	0c af       	std	Y+60, r16	; 0x3c
     904:	1d af       	std	Y+61, r17	; 0x3d
     906:	2e af       	std	Y+62, r18	; 0x3e
     908:	3f af       	std	Y+63, r19	; 0x3f
     90a:	29 97       	sbiw	r28, 0x09	; 9
     90c:	a2 01       	movw	r20, r4
     90e:	91 01       	movw	r18, r2
     910:	40 70       	andi	r20, 0x00	; 0
     912:	50 70       	andi	r21, 0x00	; 0
     914:	2d 96       	adiw	r28, 0x0d	; 13
     916:	2c af       	std	Y+60, r18	; 0x3c
     918:	3d af       	std	Y+61, r19	; 0x3d
     91a:	4e af       	std	Y+62, r20	; 0x3e
     91c:	5f af       	std	Y+63, r21	; 0x3f
     91e:	2d 97       	sbiw	r28, 0x0d	; 13
     920:	c6 01       	movw	r24, r12
     922:	b5 01       	movw	r22, r10
     924:	29 96       	adiw	r28, 0x09	; 9
     926:	2c ad       	ldd	r18, Y+60	; 0x3c
     928:	3d ad       	ldd	r19, Y+61	; 0x3d
     92a:	4e ad       	ldd	r20, Y+62	; 0x3e
     92c:	5f ad       	ldd	r21, Y+63	; 0x3f
     92e:	29 97       	sbiw	r28, 0x09	; 9
     930:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     934:	7b 01       	movw	r14, r22
     936:	8c 01       	movw	r16, r24
     938:	c6 01       	movw	r24, r12
     93a:	b5 01       	movw	r22, r10
     93c:	29 96       	adiw	r28, 0x09	; 9
     93e:	2c ad       	ldd	r18, Y+60	; 0x3c
     940:	3d ad       	ldd	r19, Y+61	; 0x3d
     942:	4e ad       	ldd	r20, Y+62	; 0x3e
     944:	5f ad       	ldd	r21, Y+63	; 0x3f
     946:	29 97       	sbiw	r28, 0x09	; 9
     948:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     94c:	c9 01       	movw	r24, r18
     94e:	da 01       	movw	r26, r20
     950:	61 96       	adiw	r28, 0x11	; 17
     952:	8c af       	std	Y+60, r24	; 0x3c
     954:	9d af       	std	Y+61, r25	; 0x3d
     956:	ae af       	std	Y+62, r26	; 0x3e
     958:	bf af       	std	Y+63, r27	; 0x3f
     95a:	61 97       	sbiw	r28, 0x11	; 17
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	2d 96       	adiw	r28, 0x0d	; 13
     962:	2c ad       	ldd	r18, Y+60	; 0x3c
     964:	3d ad       	ldd	r19, Y+61	; 0x3d
     966:	4e ad       	ldd	r20, Y+62	; 0x3e
     968:	5f ad       	ldd	r21, Y+63	; 0x3f
     96a:	2d 97       	sbiw	r28, 0x0d	; 13
     96c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
     974:	87 01       	movw	r16, r14
     976:	ff 24       	eor	r15, r15
     978:	ee 24       	eor	r14, r14
     97a:	ad a4       	ldd	r10, Y+45	; 0x2d
     97c:	be a4       	ldd	r11, Y+46	; 0x2e
     97e:	cf a4       	ldd	r12, Y+47	; 0x2f
     980:	d8 a8       	ldd	r13, Y+48	; 0x30
     982:	c6 01       	movw	r24, r12
     984:	aa 27       	eor	r26, r26
     986:	bb 27       	eor	r27, r27
     988:	57 01       	movw	r10, r14
     98a:	68 01       	movw	r12, r16
     98c:	a8 2a       	or	r10, r24
     98e:	b9 2a       	or	r11, r25
     990:	ca 2a       	or	r12, r26
     992:	db 2a       	or	r13, r27
     994:	a2 16       	cp	r10, r18
     996:	b3 06       	cpc	r11, r19
     998:	c4 06       	cpc	r12, r20
     99a:	d5 06       	cpc	r13, r21
     99c:	60 f5       	brcc	.+88     	; 0x9f6 <__stack+0x197>
     99e:	61 96       	adiw	r28, 0x11	; 17
     9a0:	6c ad       	ldd	r22, Y+60	; 0x3c
     9a2:	7d ad       	ldd	r23, Y+61	; 0x3d
     9a4:	8e ad       	ldd	r24, Y+62	; 0x3e
     9a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     9a8:	61 97       	sbiw	r28, 0x11	; 17
     9aa:	61 50       	subi	r22, 0x01	; 1
     9ac:	70 40       	sbci	r23, 0x00	; 0
     9ae:	80 40       	sbci	r24, 0x00	; 0
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	61 96       	adiw	r28, 0x11	; 17
     9b4:	6c af       	std	Y+60, r22	; 0x3c
     9b6:	7d af       	std	Y+61, r23	; 0x3d
     9b8:	8e af       	std	Y+62, r24	; 0x3e
     9ba:	9f af       	std	Y+63, r25	; 0x3f
     9bc:	61 97       	sbiw	r28, 0x11	; 17
     9be:	a2 0c       	add	r10, r2
     9c0:	b3 1c       	adc	r11, r3
     9c2:	c4 1c       	adc	r12, r4
     9c4:	d5 1c       	adc	r13, r5
     9c6:	a2 14       	cp	r10, r2
     9c8:	b3 04       	cpc	r11, r3
     9ca:	c4 04       	cpc	r12, r4
     9cc:	d5 04       	cpc	r13, r5
     9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__stack+0x197>
     9d0:	a2 16       	cp	r10, r18
     9d2:	b3 06       	cpc	r11, r19
     9d4:	c4 06       	cpc	r12, r20
     9d6:	d5 06       	cpc	r13, r21
     9d8:	70 f4       	brcc	.+28     	; 0x9f6 <__stack+0x197>
     9da:	61 50       	subi	r22, 0x01	; 1
     9dc:	70 40       	sbci	r23, 0x00	; 0
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	61 96       	adiw	r28, 0x11	; 17
     9e4:	6c af       	std	Y+60, r22	; 0x3c
     9e6:	7d af       	std	Y+61, r23	; 0x3d
     9e8:	8e af       	std	Y+62, r24	; 0x3e
     9ea:	9f af       	std	Y+63, r25	; 0x3f
     9ec:	61 97       	sbiw	r28, 0x11	; 17
     9ee:	a2 0c       	add	r10, r2
     9f0:	b3 1c       	adc	r11, r3
     9f2:	c4 1c       	adc	r12, r4
     9f4:	d5 1c       	adc	r13, r5
     9f6:	a2 1a       	sub	r10, r18
     9f8:	b3 0a       	sbc	r11, r19
     9fa:	c4 0a       	sbc	r12, r20
     9fc:	d5 0a       	sbc	r13, r21
     9fe:	c6 01       	movw	r24, r12
     a00:	b5 01       	movw	r22, r10
     a02:	29 96       	adiw	r28, 0x09	; 9
     a04:	2c ad       	ldd	r18, Y+60	; 0x3c
     a06:	3d ad       	ldd	r19, Y+61	; 0x3d
     a08:	4e ad       	ldd	r20, Y+62	; 0x3e
     a0a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a0c:	29 97       	sbiw	r28, 0x09	; 9
     a0e:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	c6 01       	movw	r24, r12
     a18:	b5 01       	movw	r22, r10
     a1a:	29 96       	adiw	r28, 0x09	; 9
     a1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a20:	4e ad       	ldd	r20, Y+62	; 0x3e
     a22:	5f ad       	ldd	r21, Y+63	; 0x3f
     a24:	29 97       	sbiw	r28, 0x09	; 9
     a26:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     a2a:	c9 01       	movw	r24, r18
     a2c:	da 01       	movw	r26, r20
     a2e:	5c 01       	movw	r10, r24
     a30:	6d 01       	movw	r12, r26
     a32:	c6 01       	movw	r24, r12
     a34:	b5 01       	movw	r22, r10
     a36:	2d 96       	adiw	r28, 0x0d	; 13
     a38:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     a40:	2d 97       	sbiw	r28, 0x0d	; 13
     a42:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	87 01       	movw	r16, r14
     a4c:	ff 24       	eor	r15, r15
     a4e:	ee 24       	eor	r14, r14
     a50:	8d a5       	ldd	r24, Y+45	; 0x2d
     a52:	9e a5       	ldd	r25, Y+46	; 0x2e
     a54:	af a5       	ldd	r26, Y+47	; 0x2f
     a56:	b8 a9       	ldd	r27, Y+48	; 0x30
     a58:	a0 70       	andi	r26, 0x00	; 0
     a5a:	b0 70       	andi	r27, 0x00	; 0
     a5c:	e8 2a       	or	r14, r24
     a5e:	f9 2a       	or	r15, r25
     a60:	0a 2b       	or	r16, r26
     a62:	1b 2b       	or	r17, r27
     a64:	e2 16       	cp	r14, r18
     a66:	f3 06       	cpc	r15, r19
     a68:	04 07       	cpc	r16, r20
     a6a:	15 07       	cpc	r17, r21
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <__stack+0x23f>
     a6e:	08 94       	sec
     a70:	a1 08       	sbc	r10, r1
     a72:	b1 08       	sbc	r11, r1
     a74:	c1 08       	sbc	r12, r1
     a76:	d1 08       	sbc	r13, r1
     a78:	e2 0c       	add	r14, r2
     a7a:	f3 1c       	adc	r15, r3
     a7c:	04 1d       	adc	r16, r4
     a7e:	15 1d       	adc	r17, r5
     a80:	e2 14       	cp	r14, r2
     a82:	f3 04       	cpc	r15, r3
     a84:	04 05       	cpc	r16, r4
     a86:	15 05       	cpc	r17, r5
     a88:	50 f0       	brcs	.+20     	; 0xa9e <__stack+0x23f>
     a8a:	e2 16       	cp	r14, r18
     a8c:	f3 06       	cpc	r15, r19
     a8e:	04 07       	cpc	r16, r20
     a90:	15 07       	cpc	r17, r21
     a92:	28 f4       	brcc	.+10     	; 0xa9e <__stack+0x23f>
     a94:	08 94       	sec
     a96:	a1 08       	sbc	r10, r1
     a98:	b1 08       	sbc	r11, r1
     a9a:	c1 08       	sbc	r12, r1
     a9c:	d1 08       	sbc	r13, r1
     a9e:	61 96       	adiw	r28, 0x11	; 17
     aa0:	ec ac       	ldd	r14, Y+60	; 0x3c
     aa2:	fd ac       	ldd	r15, Y+61	; 0x3d
     aa4:	0e ad       	ldd	r16, Y+62	; 0x3e
     aa6:	1f ad       	ldd	r17, Y+63	; 0x3f
     aa8:	61 97       	sbiw	r28, 0x11	; 17
     aaa:	d7 01       	movw	r26, r14
     aac:	99 27       	eor	r25, r25
     aae:	88 27       	eor	r24, r24
     ab0:	96 01       	movw	r18, r12
     ab2:	85 01       	movw	r16, r10
     ab4:	08 2b       	or	r16, r24
     ab6:	19 2b       	or	r17, r25
     ab8:	2a 2b       	or	r18, r26
     aba:	3b 2b       	or	r19, r27
     abc:	09 ab       	std	Y+49, r16	; 0x31
     abe:	1a ab       	std	Y+50, r17	; 0x32
     ac0:	2b ab       	std	Y+51, r18	; 0x33
     ac2:	3c ab       	std	Y+52, r19	; 0x34
     ac4:	62 c2       	rjmp	.+1220   	; 0xf8a <__stack+0x72b>
     ac6:	6e 14       	cp	r6, r14
     ac8:	7f 04       	cpc	r7, r15
     aca:	80 06       	cpc	r8, r16
     acc:	91 06       	cpc	r9, r17
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x273>
     ad0:	51 c2       	rjmp	.+1186   	; 0xf74 <__stack+0x715>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	e2 16       	cp	r14, r18
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	f2 06       	cpc	r15, r18
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	02 07       	cpc	r16, r18
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	12 07       	cpc	r17, r18
     ae2:	88 f4       	brcc	.+34     	; 0xb06 <__stack+0x2a7>
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	e3 16       	cp	r14, r19
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	31 f0       	breq	.+12     	; 0xafc <__stack+0x29d>
     af0:	28 f0       	brcs	.+10     	; 0xafc <__stack+0x29d>
     af2:	48 e0       	ldi	r20, 0x08	; 8
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	17 c0       	rjmp	.+46     	; 0xb2a <__stack+0x2cb>
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <__stack+0x2cb>
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	e4 16       	cp	r14, r20
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	f4 06       	cpc	r15, r20
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	04 07       	cpc	r16, r20
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	14 07       	cpc	r17, r20
     b16:	28 f0       	brcs	.+10     	; 0xb22 <__stack+0x2c3>
     b18:	48 e1       	ldi	r20, 0x18	; 24
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__stack+0x2cb>
     b22:	40 e1       	ldi	r20, 0x10	; 16
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	d8 01       	movw	r26, r16
     b2c:	c7 01       	movw	r24, r14
     b2e:	04 2e       	mov	r0, r20
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__stack+0x2db>
     b32:	b6 95       	lsr	r27
     b34:	a7 95       	ror	r26
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__stack+0x2d3>
     b3e:	8f 5f       	subi	r24, 0xFF	; 255
     b40:	9e 4f       	sbci	r25, 0xFE	; 254
     b42:	dc 01       	movw	r26, r24
     b44:	2c 91       	ld	r18, X
     b46:	30 e2       	ldi	r19, 0x20	; 32
     b48:	a3 2e       	mov	r10, r19
     b4a:	b1 2c       	mov	r11, r1
     b4c:	c1 2c       	mov	r12, r1
     b4e:	d1 2c       	mov	r13, r1
     b50:	d6 01       	movw	r26, r12
     b52:	c5 01       	movw	r24, r10
     b54:	84 1b       	sub	r24, r20
     b56:	95 0b       	sbc	r25, r21
     b58:	a6 0b       	sbc	r26, r22
     b5a:	b7 0b       	sbc	r27, r23
     b5c:	82 1b       	sub	r24, r18
     b5e:	91 09       	sbc	r25, r1
     b60:	a1 09       	sbc	r26, r1
     b62:	b1 09       	sbc	r27, r1
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	89 f4       	brne	.+34     	; 0xb8e <__stack+0x32f>
     b6c:	e6 14       	cp	r14, r6
     b6e:	f7 04       	cpc	r15, r7
     b70:	08 05       	cpc	r16, r8
     b72:	19 05       	cpc	r17, r9
     b74:	08 f4       	brcc	.+2      	; 0xb78 <__stack+0x319>
     b76:	f2 c1       	rjmp	.+996    	; 0xf5c <__stack+0x6fd>
     b78:	6d a4       	ldd	r6, Y+45	; 0x2d
     b7a:	7e a4       	ldd	r7, Y+46	; 0x2e
     b7c:	8f a4       	ldd	r8, Y+47	; 0x2f
     b7e:	98 a8       	ldd	r9, Y+48	; 0x30
     b80:	62 14       	cp	r6, r2
     b82:	73 04       	cpc	r7, r3
     b84:	84 04       	cpc	r8, r4
     b86:	95 04       	cpc	r9, r5
     b88:	08 f0       	brcs	.+2      	; 0xb8c <__stack+0x32d>
     b8a:	e8 c1       	rjmp	.+976    	; 0xf5c <__stack+0x6fd>
     b8c:	f3 c1       	rjmp	.+998    	; 0xf74 <__stack+0x715>
     b8e:	6e 96       	adiw	r28, 0x1e	; 30
     b90:	8f af       	std	Y+63, r24	; 0x3f
     b92:	6e 97       	sbiw	r28, 0x1e	; 30
     b94:	08 2e       	mov	r0, r24
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__stack+0x341>
     b98:	ee 0c       	add	r14, r14
     b9a:	ff 1c       	adc	r15, r15
     b9c:	00 1f       	adc	r16, r16
     b9e:	11 1f       	adc	r17, r17
     ba0:	0a 94       	dec	r0
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <__stack+0x339>
     ba4:	6a 2d       	mov	r22, r10
     ba6:	68 1b       	sub	r22, r24
     ba8:	d2 01       	movw	r26, r4
     baa:	c1 01       	movw	r24, r2
     bac:	06 2e       	mov	r0, r22
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__stack+0x359>
     bb0:	b6 95       	lsr	r27
     bb2:	a7 95       	ror	r26
     bb4:	97 95       	ror	r25
     bb6:	87 95       	ror	r24
     bb8:	0a 94       	dec	r0
     bba:	d2 f7       	brpl	.-12     	; 0xbb0 <__stack+0x351>
     bbc:	5c 01       	movw	r10, r24
     bbe:	6d 01       	movw	r12, r26
     bc0:	ae 28       	or	r10, r14
     bc2:	bf 28       	or	r11, r15
     bc4:	c0 2a       	or	r12, r16
     bc6:	d1 2a       	or	r13, r17
     bc8:	ad a2       	std	Y+37, r10	; 0x25
     bca:	be a2       	std	Y+38, r11	; 0x26
     bcc:	cf a2       	std	Y+39, r12	; 0x27
     bce:	d8 a6       	std	Y+40, r13	; 0x28
     bd0:	72 01       	movw	r14, r4
     bd2:	61 01       	movw	r12, r2
     bd4:	6e 96       	adiw	r28, 0x1e	; 30
     bd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     bd8:	6e 97       	sbiw	r28, 0x1e	; 30
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__stack+0x385>
     bdc:	cc 0c       	add	r12, r12
     bde:	dd 1c       	adc	r13, r13
     be0:	ee 1c       	adc	r14, r14
     be2:	ff 1c       	adc	r15, r15
     be4:	0a 94       	dec	r0
     be6:	d2 f7       	brpl	.-12     	; 0xbdc <__stack+0x37d>
     be8:	c9 a2       	std	Y+33, r12	; 0x21
     bea:	da a2       	std	Y+34, r13	; 0x22
     bec:	eb a2       	std	Y+35, r14	; 0x23
     bee:	fc a2       	std	Y+36, r15	; 0x24
     bf0:	64 01       	movw	r12, r8
     bf2:	53 01       	movw	r10, r6
     bf4:	06 2e       	mov	r0, r22
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__stack+0x3a1>
     bf8:	d6 94       	lsr	r13
     bfa:	c7 94       	ror	r12
     bfc:	b7 94       	ror	r11
     bfe:	a7 94       	ror	r10
     c00:	0a 94       	dec	r0
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <__stack+0x399>
     c04:	d4 01       	movw	r26, r8
     c06:	c3 01       	movw	r24, r6
     c08:	6e 96       	adiw	r28, 0x1e	; 30
     c0a:	0f ac       	ldd	r0, Y+63	; 0x3f
     c0c:	6e 97       	sbiw	r28, 0x1e	; 30
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__stack+0x3b9>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	aa 1f       	adc	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	0a 94       	dec	r0
     c1a:	d2 f7       	brpl	.-12     	; 0xc10 <__stack+0x3b1>
     c1c:	ed a4       	ldd	r14, Y+45	; 0x2d
     c1e:	fe a4       	ldd	r15, Y+46	; 0x2e
     c20:	0f a5       	ldd	r16, Y+47	; 0x2f
     c22:	18 a9       	ldd	r17, Y+48	; 0x30
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__stack+0x3cf>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	6a 95       	dec	r22
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__stack+0x3c7>
     c32:	37 01       	movw	r6, r14
     c34:	48 01       	movw	r8, r16
     c36:	68 2a       	or	r6, r24
     c38:	79 2a       	or	r7, r25
     c3a:	8a 2a       	or	r8, r26
     c3c:	9b 2a       	or	r9, r27
     c3e:	6d 8e       	std	Y+29, r6	; 0x1d
     c40:	7e 8e       	std	Y+30, r7	; 0x1e
     c42:	8f 8e       	std	Y+31, r8	; 0x1f
     c44:	98 a2       	std	Y+32, r9	; 0x20
     c46:	ed a0       	ldd	r14, Y+37	; 0x25
     c48:	fe a0       	ldd	r15, Y+38	; 0x26
     c4a:	0f a1       	ldd	r16, Y+39	; 0x27
     c4c:	18 a5       	ldd	r17, Y+40	; 0x28
     c4e:	38 01       	movw	r6, r16
     c50:	88 24       	eor	r8, r8
     c52:	99 24       	eor	r9, r9
     c54:	98 01       	movw	r18, r16
     c56:	87 01       	movw	r16, r14
     c58:	20 70       	andi	r18, 0x00	; 0
     c5a:	30 70       	andi	r19, 0x00	; 0
     c5c:	65 96       	adiw	r28, 0x15	; 21
     c5e:	0c af       	std	Y+60, r16	; 0x3c
     c60:	1d af       	std	Y+61, r17	; 0x3d
     c62:	2e af       	std	Y+62, r18	; 0x3e
     c64:	3f af       	std	Y+63, r19	; 0x3f
     c66:	65 97       	sbiw	r28, 0x15	; 21
     c68:	c6 01       	movw	r24, r12
     c6a:	b5 01       	movw	r22, r10
     c6c:	a4 01       	movw	r20, r8
     c6e:	93 01       	movw	r18, r6
     c70:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     c74:	7b 01       	movw	r14, r22
     c76:	8c 01       	movw	r16, r24
     c78:	c6 01       	movw	r24, r12
     c7a:	b5 01       	movw	r22, r10
     c7c:	a4 01       	movw	r20, r8
     c7e:	93 01       	movw	r18, r6
     c80:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     c84:	c9 01       	movw	r24, r18
     c86:	da 01       	movw	r26, r20
     c88:	1c 01       	movw	r2, r24
     c8a:	2d 01       	movw	r4, r26
     c8c:	c2 01       	movw	r24, r4
     c8e:	b1 01       	movw	r22, r2
     c90:	65 96       	adiw	r28, 0x15	; 21
     c92:	2c ad       	ldd	r18, Y+60	; 0x3c
     c94:	3d ad       	ldd	r19, Y+61	; 0x3d
     c96:	4e ad       	ldd	r20, Y+62	; 0x3e
     c98:	5f ad       	ldd	r21, Y+63	; 0x3f
     c9a:	65 97       	sbiw	r28, 0x15	; 21
     c9c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     ca0:	9b 01       	movw	r18, r22
     ca2:	ac 01       	movw	r20, r24
     ca4:	87 01       	movw	r16, r14
     ca6:	ff 24       	eor	r15, r15
     ca8:	ee 24       	eor	r14, r14
     caa:	ad 8c       	ldd	r10, Y+29	; 0x1d
     cac:	be 8c       	ldd	r11, Y+30	; 0x1e
     cae:	cf 8c       	ldd	r12, Y+31	; 0x1f
     cb0:	d8 a0       	ldd	r13, Y+32	; 0x20
     cb2:	c6 01       	movw	r24, r12
     cb4:	aa 27       	eor	r26, r26
     cb6:	bb 27       	eor	r27, r27
     cb8:	57 01       	movw	r10, r14
     cba:	68 01       	movw	r12, r16
     cbc:	a8 2a       	or	r10, r24
     cbe:	b9 2a       	or	r11, r25
     cc0:	ca 2a       	or	r12, r26
     cc2:	db 2a       	or	r13, r27
     cc4:	a2 16       	cp	r10, r18
     cc6:	b3 06       	cpc	r11, r19
     cc8:	c4 06       	cpc	r12, r20
     cca:	d5 06       	cpc	r13, r21
     ccc:	00 f5       	brcc	.+64     	; 0xd0e <__stack+0x4af>
     cce:	08 94       	sec
     cd0:	21 08       	sbc	r2, r1
     cd2:	31 08       	sbc	r3, r1
     cd4:	41 08       	sbc	r4, r1
     cd6:	51 08       	sbc	r5, r1
     cd8:	ed a0       	ldd	r14, Y+37	; 0x25
     cda:	fe a0       	ldd	r15, Y+38	; 0x26
     cdc:	0f a1       	ldd	r16, Y+39	; 0x27
     cde:	18 a5       	ldd	r17, Y+40	; 0x28
     ce0:	ae 0c       	add	r10, r14
     ce2:	bf 1c       	adc	r11, r15
     ce4:	c0 1e       	adc	r12, r16
     ce6:	d1 1e       	adc	r13, r17
     ce8:	ae 14       	cp	r10, r14
     cea:	bf 04       	cpc	r11, r15
     cec:	c0 06       	cpc	r12, r16
     cee:	d1 06       	cpc	r13, r17
     cf0:	70 f0       	brcs	.+28     	; 0xd0e <__stack+0x4af>
     cf2:	a2 16       	cp	r10, r18
     cf4:	b3 06       	cpc	r11, r19
     cf6:	c4 06       	cpc	r12, r20
     cf8:	d5 06       	cpc	r13, r21
     cfa:	48 f4       	brcc	.+18     	; 0xd0e <__stack+0x4af>
     cfc:	08 94       	sec
     cfe:	21 08       	sbc	r2, r1
     d00:	31 08       	sbc	r3, r1
     d02:	41 08       	sbc	r4, r1
     d04:	51 08       	sbc	r5, r1
     d06:	ae 0c       	add	r10, r14
     d08:	bf 1c       	adc	r11, r15
     d0a:	c0 1e       	adc	r12, r16
     d0c:	d1 1e       	adc	r13, r17
     d0e:	a2 1a       	sub	r10, r18
     d10:	b3 0a       	sbc	r11, r19
     d12:	c4 0a       	sbc	r12, r20
     d14:	d5 0a       	sbc	r13, r21
     d16:	c6 01       	movw	r24, r12
     d18:	b5 01       	movw	r22, r10
     d1a:	a4 01       	movw	r20, r8
     d1c:	93 01       	movw	r18, r6
     d1e:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     d22:	7b 01       	movw	r14, r22
     d24:	8c 01       	movw	r16, r24
     d26:	c6 01       	movw	r24, r12
     d28:	b5 01       	movw	r22, r10
     d2a:	a4 01       	movw	r20, r8
     d2c:	93 01       	movw	r18, r6
     d2e:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <__udivmodsi4>
     d32:	c9 01       	movw	r24, r18
     d34:	da 01       	movw	r26, r20
     d36:	3c 01       	movw	r6, r24
     d38:	4d 01       	movw	r8, r26
     d3a:	c4 01       	movw	r24, r8
     d3c:	b3 01       	movw	r22, r6
     d3e:	65 96       	adiw	r28, 0x15	; 21
     d40:	2c ad       	ldd	r18, Y+60	; 0x3c
     d42:	3d ad       	ldd	r19, Y+61	; 0x3d
     d44:	4e ad       	ldd	r20, Y+62	; 0x3e
     d46:	5f ad       	ldd	r21, Y+63	; 0x3f
     d48:	65 97       	sbiw	r28, 0x15	; 21
     d4a:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	87 01       	movw	r16, r14
     d54:	ff 24       	eor	r15, r15
     d56:	ee 24       	eor	r14, r14
     d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d5c:	af 8d       	ldd	r26, Y+31	; 0x1f
     d5e:	b8 a1       	ldd	r27, Y+32	; 0x20
     d60:	a0 70       	andi	r26, 0x00	; 0
     d62:	b0 70       	andi	r27, 0x00	; 0
     d64:	57 01       	movw	r10, r14
     d66:	68 01       	movw	r12, r16
     d68:	a8 2a       	or	r10, r24
     d6a:	b9 2a       	or	r11, r25
     d6c:	ca 2a       	or	r12, r26
     d6e:	db 2a       	or	r13, r27
     d70:	a2 16       	cp	r10, r18
     d72:	b3 06       	cpc	r11, r19
     d74:	c4 06       	cpc	r12, r20
     d76:	d5 06       	cpc	r13, r21
     d78:	00 f5       	brcc	.+64     	; 0xdba <__stack+0x55b>
     d7a:	08 94       	sec
     d7c:	61 08       	sbc	r6, r1
     d7e:	71 08       	sbc	r7, r1
     d80:	81 08       	sbc	r8, r1
     d82:	91 08       	sbc	r9, r1
     d84:	6d a1       	ldd	r22, Y+37	; 0x25
     d86:	7e a1       	ldd	r23, Y+38	; 0x26
     d88:	8f a1       	ldd	r24, Y+39	; 0x27
     d8a:	98 a5       	ldd	r25, Y+40	; 0x28
     d8c:	a6 0e       	add	r10, r22
     d8e:	b7 1e       	adc	r11, r23
     d90:	c8 1e       	adc	r12, r24
     d92:	d9 1e       	adc	r13, r25
     d94:	a6 16       	cp	r10, r22
     d96:	b7 06       	cpc	r11, r23
     d98:	c8 06       	cpc	r12, r24
     d9a:	d9 06       	cpc	r13, r25
     d9c:	70 f0       	brcs	.+28     	; 0xdba <__stack+0x55b>
     d9e:	a2 16       	cp	r10, r18
     da0:	b3 06       	cpc	r11, r19
     da2:	c4 06       	cpc	r12, r20
     da4:	d5 06       	cpc	r13, r21
     da6:	48 f4       	brcc	.+18     	; 0xdba <__stack+0x55b>
     da8:	08 94       	sec
     daa:	61 08       	sbc	r6, r1
     dac:	71 08       	sbc	r7, r1
     dae:	81 08       	sbc	r8, r1
     db0:	91 08       	sbc	r9, r1
     db2:	a6 0e       	add	r10, r22
     db4:	b7 1e       	adc	r11, r23
     db6:	c8 1e       	adc	r12, r24
     db8:	d9 1e       	adc	r13, r25
     dba:	d6 01       	movw	r26, r12
     dbc:	c5 01       	movw	r24, r10
     dbe:	82 1b       	sub	r24, r18
     dc0:	93 0b       	sbc	r25, r19
     dc2:	a4 0b       	sbc	r26, r20
     dc4:	b5 0b       	sbc	r27, r21
     dc6:	89 8f       	std	Y+25, r24	; 0x19
     dc8:	9a 8f       	std	Y+26, r25	; 0x1a
     dca:	ab 8f       	std	Y+27, r26	; 0x1b
     dcc:	bc 8f       	std	Y+28, r27	; 0x1c
     dce:	d1 01       	movw	r26, r2
     dd0:	99 27       	eor	r25, r25
     dd2:	88 27       	eor	r24, r24
     dd4:	64 01       	movw	r12, r8
     dd6:	53 01       	movw	r10, r6
     dd8:	a8 2a       	or	r10, r24
     dda:	b9 2a       	or	r11, r25
     ddc:	ca 2a       	or	r12, r26
     dde:	db 2a       	or	r13, r27
     de0:	a9 aa       	std	Y+49, r10	; 0x31
     de2:	ba aa       	std	Y+50, r11	; 0x32
     de4:	cb aa       	std	Y+51, r12	; 0x33
     de6:	dc aa       	std	Y+52, r13	; 0x34
     de8:	86 01       	movw	r16, r12
     dea:	75 01       	movw	r14, r10
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	e2 22       	and	r14, r18
     df6:	f3 22       	and	r15, r19
     df8:	04 23       	and	r16, r20
     dfa:	15 23       	and	r17, r21
     dfc:	a6 01       	movw	r20, r12
     dfe:	66 27       	eor	r22, r22
     e00:	77 27       	eor	r23, r23
     e02:	6d 96       	adiw	r28, 0x1d	; 29
     e04:	4c af       	std	Y+60, r20	; 0x3c
     e06:	5d af       	std	Y+61, r21	; 0x3d
     e08:	6e af       	std	Y+62, r22	; 0x3e
     e0a:	7f af       	std	Y+63, r23	; 0x3f
     e0c:	6d 97       	sbiw	r28, 0x1d	; 29
     e0e:	a9 a0       	ldd	r10, Y+33	; 0x21
     e10:	ba a0       	ldd	r11, Y+34	; 0x22
     e12:	cb a0       	ldd	r12, Y+35	; 0x23
     e14:	dc a0       	ldd	r13, Y+36	; 0x24
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	7f ef       	ldi	r23, 0xFF	; 255
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a6 22       	and	r10, r22
     e20:	b7 22       	and	r11, r23
     e22:	c8 22       	and	r12, r24
     e24:	d9 22       	and	r13, r25
     e26:	89 a1       	ldd	r24, Y+33	; 0x21
     e28:	9a a1       	ldd	r25, Y+34	; 0x22
     e2a:	ab a1       	ldd	r26, Y+35	; 0x23
     e2c:	bc a1       	ldd	r27, Y+36	; 0x24
     e2e:	1d 01       	movw	r2, r26
     e30:	44 24       	eor	r4, r4
     e32:	55 24       	eor	r5, r5
     e34:	c8 01       	movw	r24, r16
     e36:	b7 01       	movw	r22, r14
     e38:	a6 01       	movw	r20, r12
     e3a:	95 01       	movw	r18, r10
     e3c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     e40:	69 96       	adiw	r28, 0x19	; 25
     e42:	6c af       	std	Y+60, r22	; 0x3c
     e44:	7d af       	std	Y+61, r23	; 0x3d
     e46:	8e af       	std	Y+62, r24	; 0x3e
     e48:	9f af       	std	Y+63, r25	; 0x3f
     e4a:	69 97       	sbiw	r28, 0x19	; 25
     e4c:	c8 01       	movw	r24, r16
     e4e:	b7 01       	movw	r22, r14
     e50:	a2 01       	movw	r20, r4
     e52:	91 01       	movw	r18, r2
     e54:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     e58:	3b 01       	movw	r6, r22
     e5a:	4c 01       	movw	r8, r24
     e5c:	6d 96       	adiw	r28, 0x1d	; 29
     e5e:	6c ad       	ldd	r22, Y+60	; 0x3c
     e60:	7d ad       	ldd	r23, Y+61	; 0x3d
     e62:	8e ad       	ldd	r24, Y+62	; 0x3e
     e64:	9f ad       	ldd	r25, Y+63	; 0x3f
     e66:	6d 97       	sbiw	r28, 0x1d	; 29
     e68:	a6 01       	movw	r20, r12
     e6a:	95 01       	movw	r18, r10
     e6c:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     e70:	7b 01       	movw	r14, r22
     e72:	8c 01       	movw	r16, r24
     e74:	6d 96       	adiw	r28, 0x1d	; 29
     e76:	6c ad       	ldd	r22, Y+60	; 0x3c
     e78:	7d ad       	ldd	r23, Y+61	; 0x3d
     e7a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e7e:	6d 97       	sbiw	r28, 0x1d	; 29
     e80:	a2 01       	movw	r20, r4
     e82:	91 01       	movw	r18, r2
     e84:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
     e88:	5b 01       	movw	r10, r22
     e8a:	6c 01       	movw	r12, r24
     e8c:	a8 01       	movw	r20, r16
     e8e:	97 01       	movw	r18, r14
     e90:	26 0d       	add	r18, r6
     e92:	37 1d       	adc	r19, r7
     e94:	48 1d       	adc	r20, r8
     e96:	59 1d       	adc	r21, r9
     e98:	69 96       	adiw	r28, 0x19	; 25
     e9a:	6c ac       	ldd	r6, Y+60	; 0x3c
     e9c:	7d ac       	ldd	r7, Y+61	; 0x3d
     e9e:	8e ac       	ldd	r8, Y+62	; 0x3e
     ea0:	9f ac       	ldd	r9, Y+63	; 0x3f
     ea2:	69 97       	sbiw	r28, 0x19	; 25
     ea4:	c4 01       	movw	r24, r8
     ea6:	aa 27       	eor	r26, r26
     ea8:	bb 27       	eor	r27, r27
     eaa:	28 0f       	add	r18, r24
     eac:	39 1f       	adc	r19, r25
     eae:	4a 1f       	adc	r20, r26
     eb0:	5b 1f       	adc	r21, r27
     eb2:	2e 15       	cp	r18, r14
     eb4:	3f 05       	cpc	r19, r15
     eb6:	40 07       	cpc	r20, r16
     eb8:	51 07       	cpc	r21, r17
     eba:	48 f4       	brcc	.+18     	; 0xece <__stack+0x66f>
     ebc:	e1 2c       	mov	r14, r1
     ebe:	f1 2c       	mov	r15, r1
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	06 2f       	mov	r16, r22
     ec4:	11 2d       	mov	r17, r1
     ec6:	ae 0c       	add	r10, r14
     ec8:	bf 1c       	adc	r11, r15
     eca:	c0 1e       	adc	r12, r16
     ecc:	d1 1e       	adc	r13, r17
     ece:	ca 01       	movw	r24, r20
     ed0:	aa 27       	eor	r26, r26
     ed2:	bb 27       	eor	r27, r27
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	6a 0d       	add	r22, r10
     eda:	7b 1d       	adc	r23, r11
     edc:	8c 1d       	adc	r24, r12
     ede:	9d 1d       	adc	r25, r13
     ee0:	69 8c       	ldd	r6, Y+25	; 0x19
     ee2:	7a 8c       	ldd	r7, Y+26	; 0x1a
     ee4:	8b 8c       	ldd	r8, Y+27	; 0x1b
     ee6:	9c 8c       	ldd	r9, Y+28	; 0x1c
     ee8:	66 16       	cp	r6, r22
     eea:	77 06       	cpc	r7, r23
     eec:	88 06       	cpc	r8, r24
     eee:	99 06       	cpc	r9, r25
     ef0:	40 f1       	brcs	.+80     	; 0xf42 <__stack+0x6e3>
     ef2:	66 15       	cp	r22, r6
     ef4:	77 05       	cpc	r23, r7
     ef6:	88 05       	cpc	r24, r8
     ef8:	99 05       	cpc	r25, r9
     efa:	09 f0       	breq	.+2      	; 0xefe <__stack+0x69f>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__stack+0x725>
     efe:	d9 01       	movw	r26, r18
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	69 96       	adiw	r28, 0x19	; 25
     f06:	2c ad       	ldd	r18, Y+60	; 0x3c
     f08:	3d ad       	ldd	r19, Y+61	; 0x3d
     f0a:	4e ad       	ldd	r20, Y+62	; 0x3e
     f0c:	5f ad       	ldd	r21, Y+63	; 0x3f
     f0e:	69 97       	sbiw	r28, 0x19	; 25
     f10:	40 70       	andi	r20, 0x00	; 0
     f12:	50 70       	andi	r21, 0x00	; 0
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	a4 1f       	adc	r26, r20
     f1a:	b5 1f       	adc	r27, r21
     f1c:	2d a5       	ldd	r18, Y+45	; 0x2d
     f1e:	3e a5       	ldd	r19, Y+46	; 0x2e
     f20:	4f a5       	ldd	r20, Y+47	; 0x2f
     f22:	58 a9       	ldd	r21, Y+48	; 0x30
     f24:	6e 96       	adiw	r28, 0x1e	; 30
     f26:	0f ac       	ldd	r0, Y+63	; 0x3f
     f28:	6e 97       	sbiw	r28, 0x1e	; 30
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <__stack+0x6d5>
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	0a 94       	dec	r0
     f36:	d2 f7       	brpl	.-12     	; 0xf2c <__stack+0x6cd>
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	4a 07       	cpc	r20, r26
     f3e:	5b 07       	cpc	r21, r27
     f40:	08 f5       	brcc	.+66     	; 0xf84 <__stack+0x725>
     f42:	09 a9       	ldd	r16, Y+49	; 0x31
     f44:	1a a9       	ldd	r17, Y+50	; 0x32
     f46:	2b a9       	ldd	r18, Y+51	; 0x33
     f48:	3c a9       	ldd	r19, Y+52	; 0x34
     f4a:	01 50       	subi	r16, 0x01	; 1
     f4c:	10 40       	sbci	r17, 0x00	; 0
     f4e:	20 40       	sbci	r18, 0x00	; 0
     f50:	30 40       	sbci	r19, 0x00	; 0
     f52:	09 ab       	std	Y+49, r16	; 0x31
     f54:	1a ab       	std	Y+50, r17	; 0x32
     f56:	2b ab       	std	Y+51, r18	; 0x33
     f58:	3c ab       	std	Y+52, r19	; 0x34
     f5a:	14 c0       	rjmp	.+40     	; 0xf84 <__stack+0x725>
     f5c:	66 24       	eor	r6, r6
     f5e:	77 24       	eor	r7, r7
     f60:	43 01       	movw	r8, r6
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	29 ab       	std	Y+49, r18	; 0x31
     f6c:	3a ab       	std	Y+50, r19	; 0x32
     f6e:	4b ab       	std	Y+51, r20	; 0x33
     f70:	5c ab       	std	Y+52, r21	; 0x34
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <__stack+0x72b>
     f74:	66 24       	eor	r6, r6
     f76:	77 24       	eor	r7, r7
     f78:	43 01       	movw	r8, r6
     f7a:	19 aa       	std	Y+49, r1	; 0x31
     f7c:	1a aa       	std	Y+50, r1	; 0x32
     f7e:	1b aa       	std	Y+51, r1	; 0x33
     f80:	1c aa       	std	Y+52, r1	; 0x34
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <__stack+0x72b>
     f84:	66 24       	eor	r6, r6
     f86:	77 24       	eor	r7, r7
     f88:	43 01       	movw	r8, r6
     f8a:	fe 01       	movw	r30, r28
     f8c:	71 96       	adiw	r30, 0x11	; 17
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	df 01       	movw	r26, r30
     f92:	1d 92       	st	X+, r1
     f94:	8a 95       	dec	r24
     f96:	e9 f7       	brne	.-6      	; 0xf92 <__stack+0x733>
     f98:	a9 a8       	ldd	r10, Y+49	; 0x31
     f9a:	ba a8       	ldd	r11, Y+50	; 0x32
     f9c:	cb a8       	ldd	r12, Y+51	; 0x33
     f9e:	dc a8       	ldd	r13, Y+52	; 0x34
     fa0:	a9 8a       	std	Y+17, r10	; 0x11
     fa2:	ba 8a       	std	Y+18, r11	; 0x12
     fa4:	cb 8a       	std	Y+19, r12	; 0x13
     fa6:	dc 8a       	std	Y+20, r13	; 0x14
     fa8:	6d 8a       	std	Y+21, r6	; 0x15
     faa:	7e 8a       	std	Y+22, r7	; 0x16
     fac:	8f 8a       	std	Y+23, r8	; 0x17
     fae:	98 8e       	std	Y+24, r9	; 0x18
     fb0:	29 a9       	ldd	r18, Y+49	; 0x31
     fb2:	3a 89       	ldd	r19, Y+18	; 0x12
     fb4:	4b 89       	ldd	r20, Y+19	; 0x13
     fb6:	5c 89       	ldd	r21, Y+20	; 0x14
     fb8:	66 2d       	mov	r22, r6
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	c2 5a       	subi	r28, 0xA2	; 162
     fc2:	df 4f       	sbci	r29, 0xFF	; 255
     fc4:	e2 e1       	ldi	r30, 0x12	; 18
     fc6:	0c 94 c4 4f 	jmp	0x9f88	; 0x9f88 <__epilogue_restores__>

00000fca <_fpadd_parts>:
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb ee       	ldi	r30, 0xEB	; 235
     fd0:	f7 e0       	ldi	r31, 0x07	; 7
     fd2:	0c 94 a8 4f 	jmp	0x9f50	; 0x9f50 <__prologue_saves__>
     fd6:	dc 01       	movw	r26, r24
     fd8:	2b 01       	movw	r4, r22
     fda:	fa 01       	movw	r30, r20
     fdc:	9c 91       	ld	r25, X
     fde:	92 30       	cpi	r25, 0x02	; 2
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <_fpadd_parts+0x1a>
     fe2:	39 c1       	rjmp	.+626    	; 0x1256 <_fpadd_parts+0x28c>
     fe4:	eb 01       	movw	r28, r22
     fe6:	88 81       	ld	r24, Y
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	08 f4       	brcc	.+2      	; 0xfee <_fpadd_parts+0x24>
     fec:	33 c1       	rjmp	.+614    	; 0x1254 <_fpadd_parts+0x28a>
     fee:	94 30       	cpi	r25, 0x04	; 4
     ff0:	69 f4       	brne	.+26     	; 0x100c <_fpadd_parts+0x42>
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	09 f0       	breq	.+2      	; 0xff8 <_fpadd_parts+0x2e>
     ff6:	2f c1       	rjmp	.+606    	; 0x1256 <_fpadd_parts+0x28c>
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	9c 91       	ld	r25, X
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	98 17       	cp	r25, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <_fpadd_parts+0x3c>
    1004:	28 c1       	rjmp	.+592    	; 0x1256 <_fpadd_parts+0x28c>
    1006:	a9 ef       	ldi	r26, 0xF9	; 249
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	25 c1       	rjmp	.+586    	; 0x1256 <_fpadd_parts+0x28c>
    100c:	84 30       	cpi	r24, 0x04	; 4
    100e:	09 f4       	brne	.+2      	; 0x1012 <_fpadd_parts+0x48>
    1010:	21 c1       	rjmp	.+578    	; 0x1254 <_fpadd_parts+0x28a>
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	a9 f4       	brne	.+42     	; 0x1040 <_fpadd_parts+0x76>
    1016:	92 30       	cpi	r25, 0x02	; 2
    1018:	09 f0       	breq	.+2      	; 0x101c <_fpadd_parts+0x52>
    101a:	1d c1       	rjmp	.+570    	; 0x1256 <_fpadd_parts+0x28c>
    101c:	9a 01       	movw	r18, r20
    101e:	ad 01       	movw	r20, r26
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	ea 01       	movw	r28, r20
    1024:	09 90       	ld	r0, Y+
    1026:	ae 01       	movw	r20, r28
    1028:	e9 01       	movw	r28, r18
    102a:	09 92       	st	Y+, r0
    102c:	9e 01       	movw	r18, r28
    102e:	81 50       	subi	r24, 0x01	; 1
    1030:	c1 f7       	brne	.-16     	; 0x1022 <_fpadd_parts+0x58>
    1032:	e2 01       	movw	r28, r4
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	11 96       	adiw	r26, 0x01	; 1
    1038:	9c 91       	ld	r25, X
    103a:	89 23       	and	r24, r25
    103c:	81 83       	std	Z+1, r24	; 0x01
    103e:	08 c1       	rjmp	.+528    	; 0x1250 <_fpadd_parts+0x286>
    1040:	92 30       	cpi	r25, 0x02	; 2
    1042:	09 f4       	brne	.+2      	; 0x1046 <_fpadd_parts+0x7c>
    1044:	07 c1       	rjmp	.+526    	; 0x1254 <_fpadd_parts+0x28a>
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	2d 90       	ld	r2, X+
    104a:	3c 90       	ld	r3, X
    104c:	13 97       	sbiw	r26, 0x03	; 3
    104e:	eb 01       	movw	r28, r22
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	14 96       	adiw	r26, 0x04	; 4
    1056:	ad 90       	ld	r10, X+
    1058:	bd 90       	ld	r11, X+
    105a:	cd 90       	ld	r12, X+
    105c:	dc 90       	ld	r13, X
    105e:	17 97       	sbiw	r26, 0x07	; 7
    1060:	ec 80       	ldd	r14, Y+4	; 0x04
    1062:	fd 80       	ldd	r15, Y+5	; 0x05
    1064:	0e 81       	ldd	r16, Y+6	; 0x06
    1066:	1f 81       	ldd	r17, Y+7	; 0x07
    1068:	91 01       	movw	r18, r2
    106a:	28 1b       	sub	r18, r24
    106c:	39 0b       	sbc	r19, r25
    106e:	b9 01       	movw	r22, r18
    1070:	37 ff       	sbrs	r19, 7
    1072:	04 c0       	rjmp	.+8      	; 0x107c <_fpadd_parts+0xb2>
    1074:	66 27       	eor	r22, r22
    1076:	77 27       	eor	r23, r23
    1078:	62 1b       	sub	r22, r18
    107a:	73 0b       	sbc	r23, r19
    107c:	60 32       	cpi	r22, 0x20	; 32
    107e:	71 05       	cpc	r23, r1
    1080:	0c f0       	brlt	.+2      	; 0x1084 <_fpadd_parts+0xba>
    1082:	61 c0       	rjmp	.+194    	; 0x1146 <_fpadd_parts+0x17c>
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	6c f5       	brge	.+90     	; 0x10e4 <_fpadd_parts+0x11a>
    108a:	37 01       	movw	r6, r14
    108c:	48 01       	movw	r8, r16
    108e:	06 2e       	mov	r0, r22
    1090:	04 c0       	rjmp	.+8      	; 0x109a <_fpadd_parts+0xd0>
    1092:	96 94       	lsr	r9
    1094:	87 94       	ror	r8
    1096:	77 94       	ror	r7
    1098:	67 94       	ror	r6
    109a:	0a 94       	dec	r0
    109c:	d2 f7       	brpl	.-12     	; 0x1092 <_fpadd_parts+0xc8>
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <_fpadd_parts+0xe6>
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	44 1f       	adc	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	6a 95       	dec	r22
    10b2:	d2 f7       	brpl	.-12     	; 0x10a8 <_fpadd_parts+0xde>
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	30 40       	sbci	r19, 0x00	; 0
    10b8:	40 40       	sbci	r20, 0x00	; 0
    10ba:	50 40       	sbci	r21, 0x00	; 0
    10bc:	2e 21       	and	r18, r14
    10be:	3f 21       	and	r19, r15
    10c0:	40 23       	and	r20, r16
    10c2:	51 23       	and	r21, r17
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	41 05       	cpc	r20, r1
    10ca:	51 05       	cpc	r21, r1
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <_fpadd_parts+0x10c>
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	79 01       	movw	r14, r18
    10d8:	8a 01       	movw	r16, r20
    10da:	e6 28       	or	r14, r6
    10dc:	f7 28       	or	r15, r7
    10de:	08 29       	or	r16, r8
    10e0:	19 29       	or	r17, r9
    10e2:	3c c0       	rjmp	.+120    	; 0x115c <_fpadd_parts+0x192>
    10e4:	23 2b       	or	r18, r19
    10e6:	d1 f1       	breq	.+116    	; 0x115c <_fpadd_parts+0x192>
    10e8:	26 0e       	add	r2, r22
    10ea:	37 1e       	adc	r3, r23
    10ec:	35 01       	movw	r6, r10
    10ee:	46 01       	movw	r8, r12
    10f0:	06 2e       	mov	r0, r22
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <_fpadd_parts+0x132>
    10f4:	96 94       	lsr	r9
    10f6:	87 94       	ror	r8
    10f8:	77 94       	ror	r7
    10fa:	67 94       	ror	r6
    10fc:	0a 94       	dec	r0
    10fe:	d2 f7       	brpl	.-12     	; 0x10f4 <_fpadd_parts+0x12a>
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <_fpadd_parts+0x148>
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	44 1f       	adc	r20, r20
    1110:	55 1f       	adc	r21, r21
    1112:	6a 95       	dec	r22
    1114:	d2 f7       	brpl	.-12     	; 0x110a <_fpadd_parts+0x140>
    1116:	21 50       	subi	r18, 0x01	; 1
    1118:	30 40       	sbci	r19, 0x00	; 0
    111a:	40 40       	sbci	r20, 0x00	; 0
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	2a 21       	and	r18, r10
    1120:	3b 21       	and	r19, r11
    1122:	4c 21       	and	r20, r12
    1124:	5d 21       	and	r21, r13
    1126:	21 15       	cp	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	41 05       	cpc	r20, r1
    112c:	51 05       	cpc	r21, r1
    112e:	21 f0       	breq	.+8      	; 0x1138 <_fpadd_parts+0x16e>
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	59 01       	movw	r10, r18
    113a:	6a 01       	movw	r12, r20
    113c:	a6 28       	or	r10, r6
    113e:	b7 28       	or	r11, r7
    1140:	c8 28       	or	r12, r8
    1142:	d9 28       	or	r13, r9
    1144:	0b c0       	rjmp	.+22     	; 0x115c <_fpadd_parts+0x192>
    1146:	82 15       	cp	r24, r2
    1148:	93 05       	cpc	r25, r3
    114a:	2c f0       	brlt	.+10     	; 0x1156 <_fpadd_parts+0x18c>
    114c:	1c 01       	movw	r2, r24
    114e:	aa 24       	eor	r10, r10
    1150:	bb 24       	eor	r11, r11
    1152:	65 01       	movw	r12, r10
    1154:	03 c0       	rjmp	.+6      	; 0x115c <_fpadd_parts+0x192>
    1156:	ee 24       	eor	r14, r14
    1158:	ff 24       	eor	r15, r15
    115a:	87 01       	movw	r16, r14
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	9c 91       	ld	r25, X
    1160:	d2 01       	movw	r26, r4
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	8c 91       	ld	r24, X
    1166:	98 17       	cp	r25, r24
    1168:	09 f4       	brne	.+2      	; 0x116c <_fpadd_parts+0x1a2>
    116a:	45 c0       	rjmp	.+138    	; 0x11f6 <_fpadd_parts+0x22c>
    116c:	99 23       	and	r25, r25
    116e:	39 f0       	breq	.+14     	; 0x117e <_fpadd_parts+0x1b4>
    1170:	a8 01       	movw	r20, r16
    1172:	97 01       	movw	r18, r14
    1174:	2a 19       	sub	r18, r10
    1176:	3b 09       	sbc	r19, r11
    1178:	4c 09       	sbc	r20, r12
    117a:	5d 09       	sbc	r21, r13
    117c:	06 c0       	rjmp	.+12     	; 0x118a <_fpadd_parts+0x1c0>
    117e:	a6 01       	movw	r20, r12
    1180:	95 01       	movw	r18, r10
    1182:	2e 19       	sub	r18, r14
    1184:	3f 09       	sbc	r19, r15
    1186:	40 0b       	sbc	r20, r16
    1188:	51 0b       	sbc	r21, r17
    118a:	57 fd       	sbrc	r21, 7
    118c:	08 c0       	rjmp	.+16     	; 0x119e <_fpadd_parts+0x1d4>
    118e:	11 82       	std	Z+1, r1	; 0x01
    1190:	33 82       	std	Z+3, r3	; 0x03
    1192:	22 82       	std	Z+2, r2	; 0x02
    1194:	24 83       	std	Z+4, r18	; 0x04
    1196:	35 83       	std	Z+5, r19	; 0x05
    1198:	46 83       	std	Z+6, r20	; 0x06
    119a:	57 83       	std	Z+7, r21	; 0x07
    119c:	1d c0       	rjmp	.+58     	; 0x11d8 <_fpadd_parts+0x20e>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	33 82       	std	Z+3, r3	; 0x03
    11a4:	22 82       	std	Z+2, r2	; 0x02
    11a6:	88 27       	eor	r24, r24
    11a8:	99 27       	eor	r25, r25
    11aa:	dc 01       	movw	r26, r24
    11ac:	82 1b       	sub	r24, r18
    11ae:	93 0b       	sbc	r25, r19
    11b0:	a4 0b       	sbc	r26, r20
    11b2:	b5 0b       	sbc	r27, r21
    11b4:	84 83       	std	Z+4, r24	; 0x04
    11b6:	95 83       	std	Z+5, r25	; 0x05
    11b8:	a6 83       	std	Z+6, r26	; 0x06
    11ba:	b7 83       	std	Z+7, r27	; 0x07
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <_fpadd_parts+0x20e>
    11be:	22 0f       	add	r18, r18
    11c0:	33 1f       	adc	r19, r19
    11c2:	44 1f       	adc	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	24 83       	std	Z+4, r18	; 0x04
    11c8:	35 83       	std	Z+5, r19	; 0x05
    11ca:	46 83       	std	Z+6, r20	; 0x06
    11cc:	57 83       	std	Z+7, r21	; 0x07
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	93 83       	std	Z+3, r25	; 0x03
    11d6:	82 83       	std	Z+2, r24	; 0x02
    11d8:	24 81       	ldd	r18, Z+4	; 0x04
    11da:	35 81       	ldd	r19, Z+5	; 0x05
    11dc:	46 81       	ldd	r20, Z+6	; 0x06
    11de:	57 81       	ldd	r21, Z+7	; 0x07
    11e0:	da 01       	movw	r26, r20
    11e2:	c9 01       	movw	r24, r18
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	a1 09       	sbc	r26, r1
    11e8:	b1 09       	sbc	r27, r1
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	af 4f       	sbci	r26, 0xFF	; 255
    11f0:	bf 43       	sbci	r27, 0x3F	; 63
    11f2:	28 f3       	brcs	.-54     	; 0x11be <_fpadd_parts+0x1f4>
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <_fpadd_parts+0x242>
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	33 82       	std	Z+3, r3	; 0x03
    11fa:	22 82       	std	Z+2, r2	; 0x02
    11fc:	ea 0c       	add	r14, r10
    11fe:	fb 1c       	adc	r15, r11
    1200:	0c 1d       	adc	r16, r12
    1202:	1d 1d       	adc	r17, r13
    1204:	e4 82       	std	Z+4, r14	; 0x04
    1206:	f5 82       	std	Z+5, r15	; 0x05
    1208:	06 83       	std	Z+6, r16	; 0x06
    120a:	17 83       	std	Z+7, r17	; 0x07
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	80 83       	st	Z, r24
    1210:	24 81       	ldd	r18, Z+4	; 0x04
    1212:	35 81       	ldd	r19, Z+5	; 0x05
    1214:	46 81       	ldd	r20, Z+6	; 0x06
    1216:	57 81       	ldd	r21, Z+7	; 0x07
    1218:	57 ff       	sbrs	r21, 7
    121a:	1a c0       	rjmp	.+52     	; 0x1250 <_fpadd_parts+0x286>
    121c:	c9 01       	movw	r24, r18
    121e:	aa 27       	eor	r26, r26
    1220:	97 fd       	sbrc	r25, 7
    1222:	a0 95       	com	r26
    1224:	ba 2f       	mov	r27, r26
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	90 70       	andi	r25, 0x00	; 0
    122a:	a0 70       	andi	r26, 0x00	; 0
    122c:	b0 70       	andi	r27, 0x00	; 0
    122e:	56 95       	lsr	r21
    1230:	47 95       	ror	r20
    1232:	37 95       	ror	r19
    1234:	27 95       	ror	r18
    1236:	82 2b       	or	r24, r18
    1238:	93 2b       	or	r25, r19
    123a:	a4 2b       	or	r26, r20
    123c:	b5 2b       	or	r27, r21
    123e:	84 83       	std	Z+4, r24	; 0x04
    1240:	95 83       	std	Z+5, r25	; 0x05
    1242:	a6 83       	std	Z+6, r26	; 0x06
    1244:	b7 83       	std	Z+7, r27	; 0x07
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	93 83       	std	Z+3, r25	; 0x03
    124e:	82 83       	std	Z+2, r24	; 0x02
    1250:	df 01       	movw	r26, r30
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <_fpadd_parts+0x28c>
    1254:	d2 01       	movw	r26, r4
    1256:	cd 01       	movw	r24, r26
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	e2 e1       	ldi	r30, 0x12	; 18
    125e:	0c 94 c4 4f 	jmp	0x9f88	; 0x9f88 <__epilogue_restores__>

00001262 <__subsf3>:
    1262:	a0 e2       	ldi	r26, 0x20	; 32
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <__prologue_saves__+0x18>
    126e:	69 83       	std	Y+1, r22	; 0x01
    1270:	7a 83       	std	Y+2, r23	; 0x02
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	2d 83       	std	Y+5, r18	; 0x05
    1278:	3e 83       	std	Y+6, r19	; 0x06
    127a:	4f 83       	std	Y+7, r20	; 0x07
    127c:	58 87       	std	Y+8, r21	; 0x08
    127e:	e9 e0       	ldi	r30, 0x09	; 9
    1280:	ee 2e       	mov	r14, r30
    1282:	f1 2c       	mov	r15, r1
    1284:	ec 0e       	add	r14, r28
    1286:	fd 1e       	adc	r15, r29
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	b7 01       	movw	r22, r14
    128e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1292:	8e 01       	movw	r16, r28
    1294:	0f 5e       	subi	r16, 0xEF	; 239
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	ce 01       	movw	r24, r28
    129a:	05 96       	adiw	r24, 0x05	; 5
    129c:	b8 01       	movw	r22, r16
    129e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    12a2:	8a 89       	ldd	r24, Y+18	; 0x12
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	89 27       	eor	r24, r25
    12a8:	8a 8b       	std	Y+18, r24	; 0x12
    12aa:	c7 01       	movw	r24, r14
    12ac:	b8 01       	movw	r22, r16
    12ae:	ae 01       	movw	r20, r28
    12b0:	47 5e       	subi	r20, 0xE7	; 231
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	0e 94 e5 07 	call	0xfca	; 0xfca <_fpadd_parts>
    12b8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__pack_f>
    12bc:	a0 96       	adiw	r28, 0x20	; 32
    12be:	e6 e0       	ldi	r30, 0x06	; 6
    12c0:	0c 94 d0 4f 	jmp	0x9fa0	; 0x9fa0 <__epilogue_restores__+0x18>

000012c4 <__addsf3>:
    12c4:	a0 e2       	ldi	r26, 0x20	; 32
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e6       	ldi	r30, 0x68	; 104
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <__prologue_saves__+0x18>
    12d0:	69 83       	std	Y+1, r22	; 0x01
    12d2:	7a 83       	std	Y+2, r23	; 0x02
    12d4:	8b 83       	std	Y+3, r24	; 0x03
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	2d 83       	std	Y+5, r18	; 0x05
    12da:	3e 83       	std	Y+6, r19	; 0x06
    12dc:	4f 83       	std	Y+7, r20	; 0x07
    12de:	58 87       	std	Y+8, r21	; 0x08
    12e0:	f9 e0       	ldi	r31, 0x09	; 9
    12e2:	ef 2e       	mov	r14, r31
    12e4:	f1 2c       	mov	r15, r1
    12e6:	ec 0e       	add	r14, r28
    12e8:	fd 1e       	adc	r15, r29
    12ea:	ce 01       	movw	r24, r28
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	b7 01       	movw	r22, r14
    12f0:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    12f4:	8e 01       	movw	r16, r28
    12f6:	0f 5e       	subi	r16, 0xEF	; 239
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	ce 01       	movw	r24, r28
    12fc:	05 96       	adiw	r24, 0x05	; 5
    12fe:	b8 01       	movw	r22, r16
    1300:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1304:	c7 01       	movw	r24, r14
    1306:	b8 01       	movw	r22, r16
    1308:	ae 01       	movw	r20, r28
    130a:	47 5e       	subi	r20, 0xE7	; 231
    130c:	5f 4f       	sbci	r21, 0xFF	; 255
    130e:	0e 94 e5 07 	call	0xfca	; 0xfca <_fpadd_parts>
    1312:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__pack_f>
    1316:	a0 96       	adiw	r28, 0x20	; 32
    1318:	e6 e0       	ldi	r30, 0x06	; 6
    131a:	0c 94 d0 4f 	jmp	0x9fa0	; 0x9fa0 <__epilogue_restores__+0x18>

0000131e <__mulsf3>:
    131e:	a0 e2       	ldi	r26, 0x20	; 32
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e9       	ldi	r30, 0x95	; 149
    1324:	f9 e0       	ldi	r31, 0x09	; 9
    1326:	0c 94 a8 4f 	jmp	0x9f50	; 0x9f50 <__prologue_saves__>
    132a:	69 83       	std	Y+1, r22	; 0x01
    132c:	7a 83       	std	Y+2, r23	; 0x02
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	2d 83       	std	Y+5, r18	; 0x05
    1334:	3e 83       	std	Y+6, r19	; 0x06
    1336:	4f 83       	std	Y+7, r20	; 0x07
    1338:	58 87       	std	Y+8, r21	; 0x08
    133a:	ce 01       	movw	r24, r28
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	be 01       	movw	r22, r28
    1340:	67 5f       	subi	r22, 0xF7	; 247
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1348:	ce 01       	movw	r24, r28
    134a:	05 96       	adiw	r24, 0x05	; 5
    134c:	be 01       	movw	r22, r28
    134e:	6f 5e       	subi	r22, 0xEF	; 239
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1356:	99 85       	ldd	r25, Y+9	; 0x09
    1358:	92 30       	cpi	r25, 0x02	; 2
    135a:	88 f0       	brcs	.+34     	; 0x137e <__mulsf3+0x60>
    135c:	89 89       	ldd	r24, Y+17	; 0x11
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	c8 f0       	brcs	.+50     	; 0x1394 <__mulsf3+0x76>
    1362:	94 30       	cpi	r25, 0x04	; 4
    1364:	19 f4       	brne	.+6      	; 0x136c <__mulsf3+0x4e>
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	51 f4       	brne	.+20     	; 0x137e <__mulsf3+0x60>
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <__mulsf3+0x56>
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	29 f4       	brne	.+10     	; 0x137a <__mulsf3+0x5c>
    1370:	92 30       	cpi	r25, 0x02	; 2
    1372:	81 f4       	brne	.+32     	; 0x1394 <__mulsf3+0x76>
    1374:	89 ef       	ldi	r24, 0xF9	; 249
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	c6 c0       	rjmp	.+396    	; 0x1506 <__mulsf3+0x1e8>
    137a:	92 30       	cpi	r25, 0x02	; 2
    137c:	49 f4       	brne	.+18     	; 0x1390 <__mulsf3+0x72>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	8a 89       	ldd	r24, Y+18	; 0x12
    1384:	98 13       	cpse	r25, r24
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	2a 87       	std	Y+10, r18	; 0x0a
    138a:	ce 01       	movw	r24, r28
    138c:	09 96       	adiw	r24, 0x09	; 9
    138e:	bb c0       	rjmp	.+374    	; 0x1506 <__mulsf3+0x1e8>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	49 f4       	brne	.+18     	; 0x13a6 <__mulsf3+0x88>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	8a 89       	ldd	r24, Y+18	; 0x12
    139a:	98 13       	cpse	r25, r24
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	2a 8b       	std	Y+18, r18	; 0x12
    13a0:	ce 01       	movw	r24, r28
    13a2:	41 96       	adiw	r24, 0x11	; 17
    13a4:	b0 c0       	rjmp	.+352    	; 0x1506 <__mulsf3+0x1e8>
    13a6:	2d 84       	ldd	r2, Y+13	; 0x0d
    13a8:	3e 84       	ldd	r3, Y+14	; 0x0e
    13aa:	4f 84       	ldd	r4, Y+15	; 0x0f
    13ac:	58 88       	ldd	r5, Y+16	; 0x10
    13ae:	6d 88       	ldd	r6, Y+21	; 0x15
    13b0:	7e 88       	ldd	r7, Y+22	; 0x16
    13b2:	8f 88       	ldd	r8, Y+23	; 0x17
    13b4:	98 8c       	ldd	r9, Y+24	; 0x18
    13b6:	ee 24       	eor	r14, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	87 01       	movw	r16, r14
    13bc:	aa 24       	eor	r10, r10
    13be:	bb 24       	eor	r11, r11
    13c0:	65 01       	movw	r12, r10
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	e0 e0       	ldi	r30, 0x00	; 0
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	c1 01       	movw	r24, r2
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	90 70       	andi	r25, 0x00	; 0
    13d4:	89 2b       	or	r24, r25
    13d6:	e9 f0       	breq	.+58     	; 0x1412 <__mulsf3+0xf4>
    13d8:	e6 0c       	add	r14, r6
    13da:	f7 1c       	adc	r15, r7
    13dc:	08 1d       	adc	r16, r8
    13de:	19 1d       	adc	r17, r9
    13e0:	9a 01       	movw	r18, r20
    13e2:	ab 01       	movw	r20, r22
    13e4:	2a 0d       	add	r18, r10
    13e6:	3b 1d       	adc	r19, r11
    13e8:	4c 1d       	adc	r20, r12
    13ea:	5d 1d       	adc	r21, r13
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e6 14       	cp	r14, r6
    13f6:	f7 04       	cpc	r15, r7
    13f8:	08 05       	cpc	r16, r8
    13fa:	19 05       	cpc	r17, r9
    13fc:	20 f4       	brcc	.+8      	; 0x1406 <__mulsf3+0xe8>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ba 01       	movw	r22, r20
    1408:	a9 01       	movw	r20, r18
    140a:	48 0f       	add	r20, r24
    140c:	59 1f       	adc	r21, r25
    140e:	6a 1f       	adc	r22, r26
    1410:	7b 1f       	adc	r23, r27
    1412:	aa 0c       	add	r10, r10
    1414:	bb 1c       	adc	r11, r11
    1416:	cc 1c       	adc	r12, r12
    1418:	dd 1c       	adc	r13, r13
    141a:	97 fe       	sbrs	r9, 7
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__mulsf3+0x110>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a0 e0       	ldi	r26, 0x00	; 0
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	a8 2a       	or	r10, r24
    1428:	b9 2a       	or	r11, r25
    142a:	ca 2a       	or	r12, r26
    142c:	db 2a       	or	r13, r27
    142e:	31 96       	adiw	r30, 0x01	; 1
    1430:	e0 32       	cpi	r30, 0x20	; 32
    1432:	f1 05       	cpc	r31, r1
    1434:	49 f0       	breq	.+18     	; 0x1448 <__mulsf3+0x12a>
    1436:	66 0c       	add	r6, r6
    1438:	77 1c       	adc	r7, r7
    143a:	88 1c       	adc	r8, r8
    143c:	99 1c       	adc	r9, r9
    143e:	56 94       	lsr	r5
    1440:	47 94       	ror	r4
    1442:	37 94       	ror	r3
    1444:	27 94       	ror	r2
    1446:	c3 cf       	rjmp	.-122    	; 0x13ce <__mulsf3+0xb0>
    1448:	fa 85       	ldd	r31, Y+10	; 0x0a
    144a:	ea 89       	ldd	r30, Y+18	; 0x12
    144c:	2b 89       	ldd	r18, Y+19	; 0x13
    144e:	3c 89       	ldd	r19, Y+20	; 0x14
    1450:	8b 85       	ldd	r24, Y+11	; 0x0b
    1452:	9c 85       	ldd	r25, Y+12	; 0x0c
    1454:	28 0f       	add	r18, r24
    1456:	39 1f       	adc	r19, r25
    1458:	2e 5f       	subi	r18, 0xFE	; 254
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	17 c0       	rjmp	.+46     	; 0x148c <__mulsf3+0x16e>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	89 2b       	or	r24, r25
    1466:	61 f0       	breq	.+24     	; 0x1480 <__mulsf3+0x162>
    1468:	16 95       	lsr	r17
    146a:	07 95       	ror	r16
    146c:	f7 94       	ror	r15
    146e:	e7 94       	ror	r14
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e8       	ldi	r27, 0x80	; 128
    1478:	e8 2a       	or	r14, r24
    147a:	f9 2a       	or	r15, r25
    147c:	0a 2b       	or	r16, r26
    147e:	1b 2b       	or	r17, r27
    1480:	76 95       	lsr	r23
    1482:	67 95       	ror	r22
    1484:	57 95       	ror	r21
    1486:	47 95       	ror	r20
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	77 fd       	sbrc	r23, 7
    148e:	e7 cf       	rjmp	.-50     	; 0x145e <__mulsf3+0x140>
    1490:	0c c0       	rjmp	.+24     	; 0x14aa <__mulsf3+0x18c>
    1492:	44 0f       	add	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	66 1f       	adc	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	17 fd       	sbrc	r17, 7
    149c:	41 60       	ori	r20, 0x01	; 1
    149e:	ee 0c       	add	r14, r14
    14a0:	ff 1c       	adc	r15, r15
    14a2:	00 1f       	adc	r16, r16
    14a4:	11 1f       	adc	r17, r17
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	30 40       	sbci	r19, 0x00	; 0
    14aa:	40 30       	cpi	r20, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	59 07       	cpc	r21, r25
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	69 07       	cpc	r22, r25
    14b4:	90 e4       	ldi	r25, 0x40	; 64
    14b6:	79 07       	cpc	r23, r25
    14b8:	60 f3       	brcs	.-40     	; 0x1492 <__mulsf3+0x174>
    14ba:	2b 8f       	std	Y+27, r18	; 0x1b
    14bc:	3c 8f       	std	Y+28, r19	; 0x1c
    14be:	db 01       	movw	r26, r22
    14c0:	ca 01       	movw	r24, r20
    14c2:	8f 77       	andi	r24, 0x7F	; 127
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	a0 70       	andi	r26, 0x00	; 0
    14c8:	b0 70       	andi	r27, 0x00	; 0
    14ca:	80 34       	cpi	r24, 0x40	; 64
    14cc:	91 05       	cpc	r25, r1
    14ce:	a1 05       	cpc	r26, r1
    14d0:	b1 05       	cpc	r27, r1
    14d2:	61 f4       	brne	.+24     	; 0x14ec <__mulsf3+0x1ce>
    14d4:	47 fd       	sbrc	r20, 7
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <__mulsf3+0x1ce>
    14d8:	e1 14       	cp	r14, r1
    14da:	f1 04       	cpc	r15, r1
    14dc:	01 05       	cpc	r16, r1
    14de:	11 05       	cpc	r17, r1
    14e0:	29 f0       	breq	.+10     	; 0x14ec <__mulsf3+0x1ce>
    14e2:	40 5c       	subi	r20, 0xC0	; 192
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	6f 4f       	sbci	r22, 0xFF	; 255
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	40 78       	andi	r20, 0x80	; 128
    14ec:	1a 8e       	std	Y+26, r1	; 0x1a
    14ee:	fe 17       	cp	r31, r30
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <__mulsf3+0x1d8>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	8a 8f       	std	Y+26, r24	; 0x1a
    14f6:	4d 8f       	std	Y+29, r20	; 0x1d
    14f8:	5e 8f       	std	Y+30, r21	; 0x1e
    14fa:	6f 8f       	std	Y+31, r22	; 0x1f
    14fc:	78 a3       	std	Y+32, r23	; 0x20
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	89 8f       	std	Y+25, r24	; 0x19
    1502:	ce 01       	movw	r24, r28
    1504:	49 96       	adiw	r24, 0x19	; 25
    1506:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__pack_f>
    150a:	a0 96       	adiw	r28, 0x20	; 32
    150c:	e2 e1       	ldi	r30, 0x12	; 18
    150e:	0c 94 c4 4f 	jmp	0x9f88	; 0x9f88 <__epilogue_restores__>

00001512 <__divsf3>:
    1512:	a8 e1       	ldi	r26, 0x18	; 24
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 b0 4f 	jmp	0x9f60	; 0x9f60 <__prologue_saves__+0x10>
    151e:	69 83       	std	Y+1, r22	; 0x01
    1520:	7a 83       	std	Y+2, r23	; 0x02
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	2d 83       	std	Y+5, r18	; 0x05
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	4f 83       	std	Y+7, r20	; 0x07
    152c:	58 87       	std	Y+8, r21	; 0x08
    152e:	b9 e0       	ldi	r27, 0x09	; 9
    1530:	eb 2e       	mov	r14, r27
    1532:	f1 2c       	mov	r15, r1
    1534:	ec 0e       	add	r14, r28
    1536:	fd 1e       	adc	r15, r29
    1538:	ce 01       	movw	r24, r28
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	b7 01       	movw	r22, r14
    153e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1542:	8e 01       	movw	r16, r28
    1544:	0f 5e       	subi	r16, 0xEF	; 239
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	ce 01       	movw	r24, r28
    154a:	05 96       	adiw	r24, 0x05	; 5
    154c:	b8 01       	movw	r22, r16
    154e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    1552:	29 85       	ldd	r18, Y+9	; 0x09
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	08 f4       	brcc	.+2      	; 0x155a <__divsf3+0x48>
    1558:	7e c0       	rjmp	.+252    	; 0x1656 <__divsf3+0x144>
    155a:	39 89       	ldd	r19, Y+17	; 0x11
    155c:	32 30       	cpi	r19, 0x02	; 2
    155e:	10 f4       	brcc	.+4      	; 0x1564 <__divsf3+0x52>
    1560:	b8 01       	movw	r22, r16
    1562:	7c c0       	rjmp	.+248    	; 0x165c <__divsf3+0x14a>
    1564:	8a 85       	ldd	r24, Y+10	; 0x0a
    1566:	9a 89       	ldd	r25, Y+18	; 0x12
    1568:	89 27       	eor	r24, r25
    156a:	8a 87       	std	Y+10, r24	; 0x0a
    156c:	24 30       	cpi	r18, 0x04	; 4
    156e:	11 f0       	breq	.+4      	; 0x1574 <__divsf3+0x62>
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 f4       	brne	.+12     	; 0x1580 <__divsf3+0x6e>
    1574:	23 17       	cp	r18, r19
    1576:	09 f0       	breq	.+2      	; 0x157a <__divsf3+0x68>
    1578:	6e c0       	rjmp	.+220    	; 0x1656 <__divsf3+0x144>
    157a:	69 ef       	ldi	r22, 0xF9	; 249
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	6e c0       	rjmp	.+220    	; 0x165c <__divsf3+0x14a>
    1580:	34 30       	cpi	r19, 0x04	; 4
    1582:	39 f4       	brne	.+14     	; 0x1592 <__divsf3+0x80>
    1584:	1d 86       	std	Y+13, r1	; 0x0d
    1586:	1e 86       	std	Y+14, r1	; 0x0e
    1588:	1f 86       	std	Y+15, r1	; 0x0f
    158a:	18 8a       	std	Y+16, r1	; 0x10
    158c:	1c 86       	std	Y+12, r1	; 0x0c
    158e:	1b 86       	std	Y+11, r1	; 0x0b
    1590:	04 c0       	rjmp	.+8      	; 0x159a <__divsf3+0x88>
    1592:	32 30       	cpi	r19, 0x02	; 2
    1594:	21 f4       	brne	.+8      	; 0x159e <__divsf3+0x8c>
    1596:	84 e0       	ldi	r24, 0x04	; 4
    1598:	89 87       	std	Y+9, r24	; 0x09
    159a:	b7 01       	movw	r22, r14
    159c:	5f c0       	rjmp	.+190    	; 0x165c <__divsf3+0x14a>
    159e:	2b 85       	ldd	r18, Y+11	; 0x0b
    15a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	28 1b       	sub	r18, r24
    15a8:	39 0b       	sbc	r19, r25
    15aa:	3c 87       	std	Y+12, r19	; 0x0c
    15ac:	2b 87       	std	Y+11, r18	; 0x0b
    15ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    15b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    15b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    15b4:	18 89       	ldd	r17, Y+16	; 0x10
    15b6:	ad 88       	ldd	r10, Y+21	; 0x15
    15b8:	be 88       	ldd	r11, Y+22	; 0x16
    15ba:	cf 88       	ldd	r12, Y+23	; 0x17
    15bc:	d8 8c       	ldd	r13, Y+24	; 0x18
    15be:	ea 14       	cp	r14, r10
    15c0:	fb 04       	cpc	r15, r11
    15c2:	0c 05       	cpc	r16, r12
    15c4:	1d 05       	cpc	r17, r13
    15c6:	40 f4       	brcc	.+16     	; 0x15d8 <__divsf3+0xc6>
    15c8:	ee 0c       	add	r14, r14
    15ca:	ff 1c       	adc	r15, r15
    15cc:	00 1f       	adc	r16, r16
    15ce:	11 1f       	adc	r17, r17
    15d0:	21 50       	subi	r18, 0x01	; 1
    15d2:	30 40       	sbci	r19, 0x00	; 0
    15d4:	3c 87       	std	Y+12, r19	; 0x0c
    15d6:	2b 87       	std	Y+11, r18	; 0x0b
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e4       	ldi	r27, 0x40	; 64
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	ea 14       	cp	r14, r10
    15ee:	fb 04       	cpc	r15, r11
    15f0:	0c 05       	cpc	r16, r12
    15f2:	1d 05       	cpc	r17, r13
    15f4:	40 f0       	brcs	.+16     	; 0x1606 <__divsf3+0xf4>
    15f6:	28 2b       	or	r18, r24
    15f8:	39 2b       	or	r19, r25
    15fa:	4a 2b       	or	r20, r26
    15fc:	5b 2b       	or	r21, r27
    15fe:	ea 18       	sub	r14, r10
    1600:	fb 08       	sbc	r15, r11
    1602:	0c 09       	sbc	r16, r12
    1604:	1d 09       	sbc	r17, r13
    1606:	b6 95       	lsr	r27
    1608:	a7 95       	ror	r26
    160a:	97 95       	ror	r25
    160c:	87 95       	ror	r24
    160e:	ee 0c       	add	r14, r14
    1610:	ff 1c       	adc	r15, r15
    1612:	00 1f       	adc	r16, r16
    1614:	11 1f       	adc	r17, r17
    1616:	6f 5f       	subi	r22, 0xFF	; 255
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	6f 31       	cpi	r22, 0x1F	; 31
    161c:	71 05       	cpc	r23, r1
    161e:	31 f7       	brne	.-52     	; 0x15ec <__divsf3+0xda>
    1620:	da 01       	movw	r26, r20
    1622:	c9 01       	movw	r24, r18
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	a0 70       	andi	r26, 0x00	; 0
    162a:	b0 70       	andi	r27, 0x00	; 0
    162c:	80 34       	cpi	r24, 0x40	; 64
    162e:	91 05       	cpc	r25, r1
    1630:	a1 05       	cpc	r26, r1
    1632:	b1 05       	cpc	r27, r1
    1634:	61 f4       	brne	.+24     	; 0x164e <__divsf3+0x13c>
    1636:	27 fd       	sbrc	r18, 7
    1638:	0a c0       	rjmp	.+20     	; 0x164e <__divsf3+0x13c>
    163a:	e1 14       	cp	r14, r1
    163c:	f1 04       	cpc	r15, r1
    163e:	01 05       	cpc	r16, r1
    1640:	11 05       	cpc	r17, r1
    1642:	29 f0       	breq	.+10     	; 0x164e <__divsf3+0x13c>
    1644:	20 5c       	subi	r18, 0xC0	; 192
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	4f 4f       	sbci	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	20 78       	andi	r18, 0x80	; 128
    164e:	2d 87       	std	Y+13, r18	; 0x0d
    1650:	3e 87       	std	Y+14, r19	; 0x0e
    1652:	4f 87       	std	Y+15, r20	; 0x0f
    1654:	58 8b       	std	Y+16, r21	; 0x10
    1656:	be 01       	movw	r22, r28
    1658:	67 5f       	subi	r22, 0xF7	; 247
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	cb 01       	movw	r24, r22
    165e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__pack_f>
    1662:	68 96       	adiw	r28, 0x18	; 24
    1664:	ea e0       	ldi	r30, 0x0A	; 10
    1666:	0c 94 cc 4f 	jmp	0x9f98	; 0x9f98 <__epilogue_restores__+0x10>

0000166a <__gtsf2>:
    166a:	a8 e1       	ldi	r26, 0x18	; 24
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <__prologue_saves__+0x18>
    1676:	69 83       	std	Y+1, r22	; 0x01
    1678:	7a 83       	std	Y+2, r23	; 0x02
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	2d 83       	std	Y+5, r18	; 0x05
    1680:	3e 83       	std	Y+6, r19	; 0x06
    1682:	4f 83       	std	Y+7, r20	; 0x07
    1684:	58 87       	std	Y+8, r21	; 0x08
    1686:	89 e0       	ldi	r24, 0x09	; 9
    1688:	e8 2e       	mov	r14, r24
    168a:	f1 2c       	mov	r15, r1
    168c:	ec 0e       	add	r14, r28
    168e:	fd 1e       	adc	r15, r29
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	b7 01       	movw	r22, r14
    1696:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    169a:	8e 01       	movw	r16, r28
    169c:	0f 5e       	subi	r16, 0xEF	; 239
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	ce 01       	movw	r24, r28
    16a2:	05 96       	adiw	r24, 0x05	; 5
    16a4:	b8 01       	movw	r22, r16
    16a6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	40 f0       	brcs	.+16     	; 0x16c0 <__gtsf2+0x56>
    16b0:	89 89       	ldd	r24, Y+17	; 0x11
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	28 f0       	brcs	.+10     	; 0x16c0 <__gtsf2+0x56>
    16b6:	c7 01       	movw	r24, r14
    16b8:	b8 01       	movw	r22, r16
    16ba:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fpcmp_parts_f>
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <__gtsf2+0x58>
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	68 96       	adiw	r28, 0x18	; 24
    16c4:	e6 e0       	ldi	r30, 0x06	; 6
    16c6:	0c 94 d0 4f 	jmp	0x9fa0	; 0x9fa0 <__epilogue_restores__+0x18>

000016ca <__gesf2>:
    16ca:	a8 e1       	ldi	r26, 0x18	; 24
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e6       	ldi	r30, 0x6B	; 107
    16d0:	fb e0       	ldi	r31, 0x0B	; 11
    16d2:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <__prologue_saves__+0x18>
    16d6:	69 83       	std	Y+1, r22	; 0x01
    16d8:	7a 83       	std	Y+2, r23	; 0x02
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	2d 83       	std	Y+5, r18	; 0x05
    16e0:	3e 83       	std	Y+6, r19	; 0x06
    16e2:	4f 83       	std	Y+7, r20	; 0x07
    16e4:	58 87       	std	Y+8, r21	; 0x08
    16e6:	89 e0       	ldi	r24, 0x09	; 9
    16e8:	e8 2e       	mov	r14, r24
    16ea:	f1 2c       	mov	r15, r1
    16ec:	ec 0e       	add	r14, r28
    16ee:	fd 1e       	adc	r15, r29
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    16fa:	8e 01       	movw	r16, r28
    16fc:	0f 5e       	subi	r16, 0xEF	; 239
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	ce 01       	movw	r24, r28
    1702:	05 96       	adiw	r24, 0x05	; 5
    1704:	b8 01       	movw	r22, r16
    1706:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	40 f0       	brcs	.+16     	; 0x1720 <__gesf2+0x56>
    1710:	89 89       	ldd	r24, Y+17	; 0x11
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	28 f0       	brcs	.+10     	; 0x1720 <__gesf2+0x56>
    1716:	c7 01       	movw	r24, r14
    1718:	b8 01       	movw	r22, r16
    171a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fpcmp_parts_f>
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <__gesf2+0x58>
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	68 96       	adiw	r28, 0x18	; 24
    1724:	e6 e0       	ldi	r30, 0x06	; 6
    1726:	0c 94 d0 4f 	jmp	0x9fa0	; 0x9fa0 <__epilogue_restores__+0x18>

0000172a <__ltsf2>:
    172a:	a8 e1       	ldi	r26, 0x18	; 24
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	eb e9       	ldi	r30, 0x9B	; 155
    1730:	fb e0       	ldi	r31, 0x0B	; 11
    1732:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <__prologue_saves__+0x18>
    1736:	69 83       	std	Y+1, r22	; 0x01
    1738:	7a 83       	std	Y+2, r23	; 0x02
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	2d 83       	std	Y+5, r18	; 0x05
    1740:	3e 83       	std	Y+6, r19	; 0x06
    1742:	4f 83       	std	Y+7, r20	; 0x07
    1744:	58 87       	std	Y+8, r21	; 0x08
    1746:	89 e0       	ldi	r24, 0x09	; 9
    1748:	e8 2e       	mov	r14, r24
    174a:	f1 2c       	mov	r15, r1
    174c:	ec 0e       	add	r14, r28
    174e:	fd 1e       	adc	r15, r29
    1750:	ce 01       	movw	r24, r28
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	b7 01       	movw	r22, r14
    1756:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    175a:	8e 01       	movw	r16, r28
    175c:	0f 5e       	subi	r16, 0xEF	; 239
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	ce 01       	movw	r24, r28
    1762:	05 96       	adiw	r24, 0x05	; 5
    1764:	b8 01       	movw	r22, r16
    1766:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	40 f0       	brcs	.+16     	; 0x1780 <__ltsf2+0x56>
    1770:	89 89       	ldd	r24, Y+17	; 0x11
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	28 f0       	brcs	.+10     	; 0x1780 <__ltsf2+0x56>
    1776:	c7 01       	movw	r24, r14
    1778:	b8 01       	movw	r22, r16
    177a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__fpcmp_parts_f>
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <__ltsf2+0x58>
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	68 96       	adiw	r28, 0x18	; 24
    1784:	e6 e0       	ldi	r30, 0x06	; 6
    1786:	0c 94 d0 4f 	jmp	0x9fa0	; 0x9fa0 <__epilogue_restores__+0x18>

0000178a <__fixsfsi>:
    178a:	ac e0       	ldi	r26, 0x0C	; 12
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb ec       	ldi	r30, 0xCB	; 203
    1790:	fb e0       	ldi	r31, 0x0B	; 11
    1792:	0c 94 b8 4f 	jmp	0x9f70	; 0x9f70 <__prologue_saves__+0x20>
    1796:	69 83       	std	Y+1, r22	; 0x01
    1798:	7a 83       	std	Y+2, r23	; 0x02
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	be 01       	movw	r22, r28
    17a4:	6b 5f       	subi	r22, 0xFB	; 251
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__unpack_f>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	61 f1       	breq	.+88     	; 0x180a <__fixsfsi+0x80>
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	50 f1       	brcs	.+84     	; 0x180a <__fixsfsi+0x80>
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <__fixsfsi+0x38>
    17ba:	8e 81       	ldd	r24, Y+6	; 0x06
    17bc:	88 23       	and	r24, r24
    17be:	51 f1       	breq	.+84     	; 0x1814 <__fixsfsi+0x8a>
    17c0:	2e c0       	rjmp	.+92     	; 0x181e <__fixsfsi+0x94>
    17c2:	2f 81       	ldd	r18, Y+7	; 0x07
    17c4:	38 85       	ldd	r19, Y+8	; 0x08
    17c6:	37 fd       	sbrc	r19, 7
    17c8:	20 c0       	rjmp	.+64     	; 0x180a <__fixsfsi+0x80>
    17ca:	6e 81       	ldd	r22, Y+6	; 0x06
    17cc:	2f 31       	cpi	r18, 0x1F	; 31
    17ce:	31 05       	cpc	r19, r1
    17d0:	1c f0       	brlt	.+6      	; 0x17d8 <__fixsfsi+0x4e>
    17d2:	66 23       	and	r22, r22
    17d4:	f9 f0       	breq	.+62     	; 0x1814 <__fixsfsi+0x8a>
    17d6:	23 c0       	rjmp	.+70     	; 0x181e <__fixsfsi+0x94>
    17d8:	8e e1       	ldi	r24, 0x1E	; 30
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	82 1b       	sub	r24, r18
    17de:	93 0b       	sbc	r25, r19
    17e0:	29 85       	ldd	r18, Y+9	; 0x09
    17e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    17e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__fixsfsi+0x68>
    17ea:	56 95       	lsr	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	8a 95       	dec	r24
    17f4:	d2 f7       	brpl	.-12     	; 0x17ea <__fixsfsi+0x60>
    17f6:	66 23       	and	r22, r22
    17f8:	b1 f0       	breq	.+44     	; 0x1826 <__fixsfsi+0x9c>
    17fa:	50 95       	com	r21
    17fc:	40 95       	com	r20
    17fe:	30 95       	com	r19
    1800:	21 95       	neg	r18
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
    1804:	4f 4f       	sbci	r20, 0xFF	; 255
    1806:	5f 4f       	sbci	r21, 0xFF	; 255
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <__fixsfsi+0x9c>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <__fixsfsi+0x9c>
    1814:	2f ef       	ldi	r18, 0xFF	; 255
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f ef       	ldi	r20, 0xFF	; 255
    181a:	5f e7       	ldi	r21, 0x7F	; 127
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <__fixsfsi+0x9c>
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e8       	ldi	r21, 0x80	; 128
    1826:	b9 01       	movw	r22, r18
    1828:	ca 01       	movw	r24, r20
    182a:	2c 96       	adiw	r28, 0x0c	; 12
    182c:	e2 e0       	ldi	r30, 0x02	; 2
    182e:	0c 94 d4 4f 	jmp	0x9fa8	; 0x9fa8 <__epilogue_restores__+0x20>

00001832 <__floatunsisf>:
    1832:	a8 e0       	ldi	r26, 0x08	; 8
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ef e1       	ldi	r30, 0x1F	; 31
    1838:	fc e0       	ldi	r31, 0x0C	; 12
    183a:	0c 94 b0 4f 	jmp	0x9f60	; 0x9f60 <__prologue_saves__+0x10>
    183e:	7b 01       	movw	r14, r22
    1840:	8c 01       	movw	r16, r24
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	81 05       	cpc	r24, r1
    1848:	91 05       	cpc	r25, r1
    184a:	19 f4       	brne	.+6      	; 0x1852 <__floatunsisf+0x20>
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	60 c0       	rjmp	.+192    	; 0x1912 <__floatunsisf+0xe0>
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	8e e1       	ldi	r24, 0x1E	; 30
    1858:	c8 2e       	mov	r12, r24
    185a:	d1 2c       	mov	r13, r1
    185c:	dc 82       	std	Y+4, r13	; 0x04
    185e:	cb 82       	std	Y+3, r12	; 0x03
    1860:	ed 82       	std	Y+5, r14	; 0x05
    1862:	fe 82       	std	Y+6, r15	; 0x06
    1864:	0f 83       	std	Y+7, r16	; 0x07
    1866:	18 87       	std	Y+8, r17	; 0x08
    1868:	c8 01       	movw	r24, r16
    186a:	b7 01       	movw	r22, r14
    186c:	0e 94 92 0c 	call	0x1924	; 0x1924 <__clzsi2>
    1870:	fc 01       	movw	r30, r24
    1872:	31 97       	sbiw	r30, 0x01	; 1
    1874:	f7 ff       	sbrs	r31, 7
    1876:	3b c0       	rjmp	.+118    	; 0x18ee <__floatunsisf+0xbc>
    1878:	22 27       	eor	r18, r18
    187a:	33 27       	eor	r19, r19
    187c:	2e 1b       	sub	r18, r30
    187e:	3f 0b       	sbc	r19, r31
    1880:	57 01       	movw	r10, r14
    1882:	68 01       	movw	r12, r16
    1884:	02 2e       	mov	r0, r18
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <__floatunsisf+0x5e>
    1888:	d6 94       	lsr	r13
    188a:	c7 94       	ror	r12
    188c:	b7 94       	ror	r11
    188e:	a7 94       	ror	r10
    1890:	0a 94       	dec	r0
    1892:	d2 f7       	brpl	.-12     	; 0x1888 <__floatunsisf+0x56>
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <__floatunsisf+0x7c>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	2a 95       	dec	r18
    18b0:	d2 f7       	brpl	.-12     	; 0x18a6 <__floatunsisf+0x74>
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	8e 21       	and	r24, r14
    18ba:	9f 21       	and	r25, r15
    18bc:	a0 23       	and	r26, r16
    18be:	b1 23       	and	r27, r17
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	a1 05       	cpc	r26, r1
    18c4:	b1 05       	cpc	r27, r1
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <__floatunsisf+0x9e>
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	4a 29       	or	r20, r10
    18d2:	5b 29       	or	r21, r11
    18d4:	6c 29       	or	r22, r12
    18d6:	7d 29       	or	r23, r13
    18d8:	4d 83       	std	Y+5, r20	; 0x05
    18da:	5e 83       	std	Y+6, r21	; 0x06
    18dc:	6f 83       	std	Y+7, r22	; 0x07
    18de:	78 87       	std	Y+8, r23	; 0x08
    18e0:	8e e1       	ldi	r24, 0x1E	; 30
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	8e 1b       	sub	r24, r30
    18e6:	9f 0b       	sbc	r25, r31
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	12 c0       	rjmp	.+36     	; 0x1912 <__floatunsisf+0xe0>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	81 f0       	breq	.+32     	; 0x1912 <__floatunsisf+0xe0>
    18f2:	0e 2e       	mov	r0, r30
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <__floatunsisf+0xcc>
    18f6:	ee 0c       	add	r14, r14
    18f8:	ff 1c       	adc	r15, r15
    18fa:	00 1f       	adc	r16, r16
    18fc:	11 1f       	adc	r17, r17
    18fe:	0a 94       	dec	r0
    1900:	d2 f7       	brpl	.-12     	; 0x18f6 <__floatunsisf+0xc4>
    1902:	ed 82       	std	Y+5, r14	; 0x05
    1904:	fe 82       	std	Y+6, r15	; 0x06
    1906:	0f 83       	std	Y+7, r16	; 0x07
    1908:	18 87       	std	Y+8, r17	; 0x08
    190a:	ce 1a       	sub	r12, r30
    190c:	df 0a       	sbc	r13, r31
    190e:	dc 82       	std	Y+4, r13	; 0x04
    1910:	cb 82       	std	Y+3, r12	; 0x03
    1912:	1a 82       	std	Y+2, r1	; 0x02
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__pack_f>
    191c:	28 96       	adiw	r28, 0x08	; 8
    191e:	ea e0       	ldi	r30, 0x0A	; 10
    1920:	0c 94 cc 4f 	jmp	0x9f98	; 0x9f98 <__epilogue_restores__+0x10>

00001924 <__clzsi2>:
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	7b 01       	movw	r14, r22
    192e:	8c 01       	movw	r16, r24
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	e8 16       	cp	r14, r24
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	f8 06       	cpc	r15, r24
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	08 07       	cpc	r16, r24
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	18 07       	cpc	r17, r24
    1940:	88 f4       	brcc	.+34     	; 0x1964 <__clzsi2+0x40>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	e8 16       	cp	r14, r24
    1946:	f1 04       	cpc	r15, r1
    1948:	01 05       	cpc	r16, r1
    194a:	11 05       	cpc	r17, r1
    194c:	31 f0       	breq	.+12     	; 0x195a <__clzsi2+0x36>
    194e:	28 f0       	brcs	.+10     	; 0x195a <__clzsi2+0x36>
    1950:	88 e0       	ldi	r24, 0x08	; 8
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e0       	ldi	r26, 0x00	; 0
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	17 c0       	rjmp	.+46     	; 0x1988 <__clzsi2+0x64>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	12 c0       	rjmp	.+36     	; 0x1988 <__clzsi2+0x64>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	e8 16       	cp	r14, r24
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	f8 06       	cpc	r15, r24
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	08 07       	cpc	r16, r24
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	18 07       	cpc	r17, r24
    1974:	28 f0       	brcs	.+10     	; 0x1980 <__clzsi2+0x5c>
    1976:	88 e1       	ldi	r24, 0x18	; 24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <__clzsi2+0x64>
    1980:	80 e1       	ldi	r24, 0x10	; 16
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	20 e2       	ldi	r18, 0x20	; 32
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	28 1b       	sub	r18, r24
    1992:	39 0b       	sbc	r19, r25
    1994:	4a 0b       	sbc	r20, r26
    1996:	5b 0b       	sbc	r21, r27
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__clzsi2+0x7e>
    199a:	16 95       	lsr	r17
    199c:	07 95       	ror	r16
    199e:	f7 94       	ror	r15
    19a0:	e7 94       	ror	r14
    19a2:	8a 95       	dec	r24
    19a4:	d2 f7       	brpl	.-12     	; 0x199a <__clzsi2+0x76>
    19a6:	f7 01       	movw	r30, r14
    19a8:	ef 5f       	subi	r30, 0xFF	; 255
    19aa:	fe 4f       	sbci	r31, 0xFE	; 254
    19ac:	80 81       	ld	r24, Z
    19ae:	28 1b       	sub	r18, r24
    19b0:	31 09       	sbc	r19, r1
    19b2:	41 09       	sbc	r20, r1
    19b4:	51 09       	sbc	r21, r1
    19b6:	c9 01       	movw	r24, r18
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <__pack_f>:
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	fc 01       	movw	r30, r24
    19ce:	e4 80       	ldd	r14, Z+4	; 0x04
    19d0:	f5 80       	ldd	r15, Z+5	; 0x05
    19d2:	06 81       	ldd	r16, Z+6	; 0x06
    19d4:	17 81       	ldd	r17, Z+7	; 0x07
    19d6:	d1 80       	ldd	r13, Z+1	; 0x01
    19d8:	80 81       	ld	r24, Z
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	48 f4       	brcc	.+18     	; 0x19f0 <__pack_f+0x2e>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 e1       	ldi	r26, 0x10	; 16
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e8 2a       	or	r14, r24
    19e8:	f9 2a       	or	r15, r25
    19ea:	0a 2b       	or	r16, r26
    19ec:	1b 2b       	or	r17, r27
    19ee:	a5 c0       	rjmp	.+330    	; 0x1b3a <__pack_f+0x178>
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__pack_f+0x34>
    19f4:	9f c0       	rjmp	.+318    	; 0x1b34 <__pack_f+0x172>
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <__pack_f+0x40>
    19fa:	ee 24       	eor	r14, r14
    19fc:	ff 24       	eor	r15, r15
    19fe:	87 01       	movw	r16, r14
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <__pack_f+0x4a>
    1a02:	e1 14       	cp	r14, r1
    1a04:	f1 04       	cpc	r15, r1
    1a06:	01 05       	cpc	r16, r1
    1a08:	11 05       	cpc	r17, r1
    1a0a:	19 f4       	brne	.+6      	; 0x1a12 <__pack_f+0x50>
    1a0c:	e0 e0       	ldi	r30, 0x00	; 0
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	96 c0       	rjmp	.+300    	; 0x1b3e <__pack_f+0x17c>
    1a12:	62 81       	ldd	r22, Z+2	; 0x02
    1a14:	73 81       	ldd	r23, Z+3	; 0x03
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	62 38       	cpi	r22, 0x82	; 130
    1a1a:	79 07       	cpc	r23, r25
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <__pack_f+0x5e>
    1a1e:	5b c0       	rjmp	.+182    	; 0x1ad6 <__pack_f+0x114>
    1a20:	22 e8       	ldi	r18, 0x82	; 130
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	26 1b       	sub	r18, r22
    1a26:	37 0b       	sbc	r19, r23
    1a28:	2a 31       	cpi	r18, 0x1A	; 26
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f0       	brlt	.+10     	; 0x1a38 <__pack_f+0x76>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	2a c0       	rjmp	.+84     	; 0x1a8c <__pack_f+0xca>
    1a38:	b8 01       	movw	r22, r16
    1a3a:	a7 01       	movw	r20, r14
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	04 c0       	rjmp	.+8      	; 0x1a48 <__pack_f+0x86>
    1a40:	76 95       	lsr	r23
    1a42:	67 95       	ror	r22
    1a44:	57 95       	ror	r21
    1a46:	47 95       	ror	r20
    1a48:	0a 94       	dec	r0
    1a4a:	d2 f7       	brpl	.-12     	; 0x1a40 <__pack_f+0x7e>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <__pack_f+0x9c>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	aa 1f       	adc	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	2a 95       	dec	r18
    1a60:	d2 f7       	brpl	.-12     	; 0x1a56 <__pack_f+0x94>
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	a1 09       	sbc	r26, r1
    1a66:	b1 09       	sbc	r27, r1
    1a68:	8e 21       	and	r24, r14
    1a6a:	9f 21       	and	r25, r15
    1a6c:	a0 23       	and	r26, r16
    1a6e:	b1 23       	and	r27, r17
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	a1 05       	cpc	r26, r1
    1a74:	b1 05       	cpc	r27, r1
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <__pack_f+0xbe>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	9a 01       	movw	r18, r20
    1a82:	ab 01       	movw	r20, r22
    1a84:	28 2b       	or	r18, r24
    1a86:	39 2b       	or	r19, r25
    1a88:	4a 2b       	or	r20, r26
    1a8a:	5b 2b       	or	r21, r27
    1a8c:	da 01       	movw	r26, r20
    1a8e:	c9 01       	movw	r24, r18
    1a90:	8f 77       	andi	r24, 0x7F	; 127
    1a92:	90 70       	andi	r25, 0x00	; 0
    1a94:	a0 70       	andi	r26, 0x00	; 0
    1a96:	b0 70       	andi	r27, 0x00	; 0
    1a98:	80 34       	cpi	r24, 0x40	; 64
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	a1 05       	cpc	r26, r1
    1a9e:	b1 05       	cpc	r27, r1
    1aa0:	39 f4       	brne	.+14     	; 0x1ab0 <__pack_f+0xee>
    1aa2:	27 ff       	sbrs	r18, 7
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <__pack_f+0xf6>
    1aa6:	20 5c       	subi	r18, 0xC0	; 192
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	4f 4f       	sbci	r20, 0xFF	; 255
    1aac:	5f 4f       	sbci	r21, 0xFF	; 255
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <__pack_f+0xf6>
    1ab0:	21 5c       	subi	r18, 0xC1	; 193
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab8:	e0 e0       	ldi	r30, 0x00	; 0
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	20 30       	cpi	r18, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	3a 07       	cpc	r19, r26
    1ac2:	a0 e0       	ldi	r26, 0x00	; 0
    1ac4:	4a 07       	cpc	r20, r26
    1ac6:	a0 e4       	ldi	r26, 0x40	; 64
    1ac8:	5a 07       	cpc	r21, r26
    1aca:	10 f0       	brcs	.+4      	; 0x1ad0 <__pack_f+0x10e>
    1acc:	e1 e0       	ldi	r30, 0x01	; 1
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	79 01       	movw	r14, r18
    1ad2:	8a 01       	movw	r16, r20
    1ad4:	27 c0       	rjmp	.+78     	; 0x1b24 <__pack_f+0x162>
    1ad6:	60 38       	cpi	r22, 0x80	; 128
    1ad8:	71 05       	cpc	r23, r1
    1ada:	64 f5       	brge	.+88     	; 0x1b34 <__pack_f+0x172>
    1adc:	fb 01       	movw	r30, r22
    1ade:	e1 58       	subi	r30, 0x81	; 129
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	d8 01       	movw	r26, r16
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	a0 70       	andi	r26, 0x00	; 0
    1aec:	b0 70       	andi	r27, 0x00	; 0
    1aee:	80 34       	cpi	r24, 0x40	; 64
    1af0:	91 05       	cpc	r25, r1
    1af2:	a1 05       	cpc	r26, r1
    1af4:	b1 05       	cpc	r27, r1
    1af6:	39 f4       	brne	.+14     	; 0x1b06 <__pack_f+0x144>
    1af8:	e7 fe       	sbrs	r14, 7
    1afa:	0d c0       	rjmp	.+26     	; 0x1b16 <__pack_f+0x154>
    1afc:	80 e4       	ldi	r24, 0x40	; 64
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	04 c0       	rjmp	.+8      	; 0x1b0e <__pack_f+0x14c>
    1b06:	8f e3       	ldi	r24, 0x3F	; 63
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e0       	ldi	r26, 0x00	; 0
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e8 0e       	add	r14, r24
    1b10:	f9 1e       	adc	r15, r25
    1b12:	0a 1f       	adc	r16, r26
    1b14:	1b 1f       	adc	r17, r27
    1b16:	17 ff       	sbrs	r17, 7
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <__pack_f+0x162>
    1b1a:	16 95       	lsr	r17
    1b1c:	07 95       	ror	r16
    1b1e:	f7 94       	ror	r15
    1b20:	e7 94       	ror	r14
    1b22:	31 96       	adiw	r30, 0x01	; 1
    1b24:	87 e0       	ldi	r24, 0x07	; 7
    1b26:	16 95       	lsr	r17
    1b28:	07 95       	ror	r16
    1b2a:	f7 94       	ror	r15
    1b2c:	e7 94       	ror	r14
    1b2e:	8a 95       	dec	r24
    1b30:	d1 f7       	brne	.-12     	; 0x1b26 <__pack_f+0x164>
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <__pack_f+0x17c>
    1b34:	ee 24       	eor	r14, r14
    1b36:	ff 24       	eor	r15, r15
    1b38:	87 01       	movw	r16, r14
    1b3a:	ef ef       	ldi	r30, 0xFF	; 255
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	6e 2f       	mov	r22, r30
    1b40:	67 95       	ror	r22
    1b42:	66 27       	eor	r22, r22
    1b44:	67 95       	ror	r22
    1b46:	90 2f       	mov	r25, r16
    1b48:	9f 77       	andi	r25, 0x7F	; 127
    1b4a:	d7 94       	ror	r13
    1b4c:	dd 24       	eor	r13, r13
    1b4e:	d7 94       	ror	r13
    1b50:	8e 2f       	mov	r24, r30
    1b52:	86 95       	lsr	r24
    1b54:	49 2f       	mov	r20, r25
    1b56:	46 2b       	or	r20, r22
    1b58:	58 2f       	mov	r21, r24
    1b5a:	5d 29       	or	r21, r13
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	ca 01       	movw	r24, r20
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	08 95       	ret

00001b6c <__unpack_f>:
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	db 01       	movw	r26, r22
    1b70:	40 81       	ld	r20, Z
    1b72:	51 81       	ldd	r21, Z+1	; 0x01
    1b74:	22 81       	ldd	r18, Z+2	; 0x02
    1b76:	62 2f       	mov	r22, r18
    1b78:	6f 77       	andi	r22, 0x7F	; 127
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	22 1f       	adc	r18, r18
    1b7e:	22 27       	eor	r18, r18
    1b80:	22 1f       	adc	r18, r18
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	89 2f       	mov	r24, r25
    1b86:	88 0f       	add	r24, r24
    1b88:	82 2b       	or	r24, r18
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	99 1f       	adc	r25, r25
    1b90:	99 27       	eor	r25, r25
    1b92:	99 1f       	adc	r25, r25
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	9c 93       	st	X, r25
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	a9 f5       	brne	.+106    	; 0x1c0a <__unpack_f+0x9e>
    1ba0:	41 15       	cp	r20, r1
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	61 05       	cpc	r22, r1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__unpack_f+0x42>
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	37 c0       	rjmp	.+110    	; 0x1c1c <__unpack_f+0xb0>
    1bae:	82 e8       	ldi	r24, 0x82	; 130
    1bb0:	9f ef       	ldi	r25, 0xFF	; 255
    1bb2:	13 96       	adiw	r26, 0x03	; 3
    1bb4:	9c 93       	st	X, r25
    1bb6:	8e 93       	st	-X, r24
    1bb8:	12 97       	sbiw	r26, 0x02	; 2
    1bba:	9a 01       	movw	r18, r20
    1bbc:	ab 01       	movw	r20, r22
    1bbe:	67 e0       	ldi	r22, 0x07	; 7
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	6a 95       	dec	r22
    1bca:	d1 f7       	brne	.-12     	; 0x1bc0 <__unpack_f+0x54>
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	8c 93       	st	X, r24
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <__unpack_f+0x80>
    1bd2:	22 0f       	add	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	44 1f       	adc	r20, r20
    1bd8:	55 1f       	adc	r21, r21
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	8d 91       	ld	r24, X+
    1bde:	9c 91       	ld	r25, X
    1be0:	13 97       	sbiw	r26, 0x03	; 3
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	13 96       	adiw	r26, 0x03	; 3
    1be6:	9c 93       	st	X, r25
    1be8:	8e 93       	st	-X, r24
    1bea:	12 97       	sbiw	r26, 0x02	; 2
    1bec:	20 30       	cpi	r18, 0x00	; 0
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	38 07       	cpc	r19, r24
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	48 07       	cpc	r20, r24
    1bf6:	80 e4       	ldi	r24, 0x40	; 64
    1bf8:	58 07       	cpc	r21, r24
    1bfa:	58 f3       	brcs	.-42     	; 0x1bd2 <__unpack_f+0x66>
    1bfc:	14 96       	adiw	r26, 0x04	; 4
    1bfe:	2d 93       	st	X+, r18
    1c00:	3d 93       	st	X+, r19
    1c02:	4d 93       	st	X+, r20
    1c04:	5c 93       	st	X, r21
    1c06:	17 97       	sbiw	r26, 0x07	; 7
    1c08:	08 95       	ret
    1c0a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	79 f4       	brne	.+30     	; 0x1c2e <__unpack_f+0xc2>
    1c10:	41 15       	cp	r20, r1
    1c12:	51 05       	cpc	r21, r1
    1c14:	61 05       	cpc	r22, r1
    1c16:	71 05       	cpc	r23, r1
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <__unpack_f+0xb4>
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	8c 93       	st	X, r24
    1c1e:	08 95       	ret
    1c20:	64 ff       	sbrs	r22, 4
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <__unpack_f+0xbe>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8c 93       	st	X, r24
    1c28:	12 c0       	rjmp	.+36     	; 0x1c4e <__unpack_f+0xe2>
    1c2a:	1c 92       	st	X, r1
    1c2c:	10 c0       	rjmp	.+32     	; 0x1c4e <__unpack_f+0xe2>
    1c2e:	2f 57       	subi	r18, 0x7F	; 127
    1c30:	30 40       	sbci	r19, 0x00	; 0
    1c32:	13 96       	adiw	r26, 0x03	; 3
    1c34:	3c 93       	st	X, r19
    1c36:	2e 93       	st	-X, r18
    1c38:	12 97       	sbiw	r26, 0x02	; 2
    1c3a:	83 e0       	ldi	r24, 0x03	; 3
    1c3c:	8c 93       	st	X, r24
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	44 0f       	add	r20, r20
    1c42:	55 1f       	adc	r21, r21
    1c44:	66 1f       	adc	r22, r22
    1c46:	77 1f       	adc	r23, r23
    1c48:	8a 95       	dec	r24
    1c4a:	d1 f7       	brne	.-12     	; 0x1c40 <__unpack_f+0xd4>
    1c4c:	70 64       	ori	r23, 0x40	; 64
    1c4e:	14 96       	adiw	r26, 0x04	; 4
    1c50:	4d 93       	st	X+, r20
    1c52:	5d 93       	st	X+, r21
    1c54:	6d 93       	st	X+, r22
    1c56:	7c 93       	st	X, r23
    1c58:	17 97       	sbiw	r26, 0x07	; 7
    1c5a:	08 95       	ret

00001c5c <__fpcmp_parts_f>:
    1c5c:	1f 93       	push	r17
    1c5e:	dc 01       	movw	r26, r24
    1c60:	fb 01       	movw	r30, r22
    1c62:	9c 91       	ld	r25, X
    1c64:	92 30       	cpi	r25, 0x02	; 2
    1c66:	08 f4       	brcc	.+2      	; 0x1c6a <__fpcmp_parts_f+0xe>
    1c68:	47 c0       	rjmp	.+142    	; 0x1cf8 <__fpcmp_parts_f+0x9c>
    1c6a:	80 81       	ld	r24, Z
    1c6c:	82 30       	cpi	r24, 0x02	; 2
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <__fpcmp_parts_f+0x16>
    1c70:	43 c0       	rjmp	.+134    	; 0x1cf8 <__fpcmp_parts_f+0x9c>
    1c72:	94 30       	cpi	r25, 0x04	; 4
    1c74:	51 f4       	brne	.+20     	; 0x1c8a <__fpcmp_parts_f+0x2e>
    1c76:	11 96       	adiw	r26, 0x01	; 1
    1c78:	1c 91       	ld	r17, X
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	99 f5       	brne	.+102    	; 0x1ce4 <__fpcmp_parts_f+0x88>
    1c7e:	81 81       	ldd	r24, Z+1	; 0x01
    1c80:	68 2f       	mov	r22, r24
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	61 1b       	sub	r22, r17
    1c86:	71 09       	sbc	r23, r1
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <__fpcmp_parts_f+0xac>
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	21 f0       	breq	.+8      	; 0x1c96 <__fpcmp_parts_f+0x3a>
    1c8e:	92 30       	cpi	r25, 0x02	; 2
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <__fpcmp_parts_f+0x42>
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	b9 f1       	breq	.+110    	; 0x1d04 <__fpcmp_parts_f+0xa8>
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	88 23       	and	r24, r24
    1c9a:	89 f1       	breq	.+98     	; 0x1cfe <__fpcmp_parts_f+0xa2>
    1c9c:	2d c0       	rjmp	.+90     	; 0x1cf8 <__fpcmp_parts_f+0x9c>
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	1c 91       	ld	r17, X
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	f1 f0       	breq	.+60     	; 0x1ce4 <__fpcmp_parts_f+0x88>
    1ca8:	81 81       	ldd	r24, Z+1	; 0x01
    1caa:	18 17       	cp	r17, r24
    1cac:	d9 f4       	brne	.+54     	; 0x1ce4 <__fpcmp_parts_f+0x88>
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	2d 91       	ld	r18, X+
    1cb2:	3c 91       	ld	r19, X
    1cb4:	13 97       	sbiw	r26, 0x03	; 3
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	82 17       	cp	r24, r18
    1cbc:	93 07       	cpc	r25, r19
    1cbe:	94 f0       	brlt	.+36     	; 0x1ce4 <__fpcmp_parts_f+0x88>
    1cc0:	28 17       	cp	r18, r24
    1cc2:	39 07       	cpc	r19, r25
    1cc4:	bc f0       	brlt	.+46     	; 0x1cf4 <__fpcmp_parts_f+0x98>
    1cc6:	14 96       	adiw	r26, 0x04	; 4
    1cc8:	8d 91       	ld	r24, X+
    1cca:	9d 91       	ld	r25, X+
    1ccc:	0d 90       	ld	r0, X+
    1cce:	bc 91       	ld	r27, X
    1cd0:	a0 2d       	mov	r26, r0
    1cd2:	24 81       	ldd	r18, Z+4	; 0x04
    1cd4:	35 81       	ldd	r19, Z+5	; 0x05
    1cd6:	46 81       	ldd	r20, Z+6	; 0x06
    1cd8:	57 81       	ldd	r21, Z+7	; 0x07
    1cda:	28 17       	cp	r18, r24
    1cdc:	39 07       	cpc	r19, r25
    1cde:	4a 07       	cpc	r20, r26
    1ce0:	5b 07       	cpc	r21, r27
    1ce2:	18 f4       	brcc	.+6      	; 0x1cea <__fpcmp_parts_f+0x8e>
    1ce4:	11 23       	and	r17, r17
    1ce6:	41 f0       	breq	.+16     	; 0x1cf8 <__fpcmp_parts_f+0x9c>
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <__fpcmp_parts_f+0xa2>
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	a4 07       	cpc	r26, r20
    1cf0:	b5 07       	cpc	r27, r21
    1cf2:	40 f4       	brcc	.+16     	; 0x1d04 <__fpcmp_parts_f+0xa8>
    1cf4:	11 23       	and	r17, r17
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <__fpcmp_parts_f+0xa2>
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	05 c0       	rjmp	.+10     	; 0x1d08 <__fpcmp_parts_f+0xac>
    1cfe:	6f ef       	ldi	r22, 0xFF	; 255
    1d00:	7f ef       	ldi	r23, 0xFF	; 255
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <__fpcmp_parts_f+0xac>
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	cb 01       	movw	r24, r22
    1d0a:	1f 91       	pop	r17
    1d0c:	08 95       	ret

00001d0e <ADC_init>:

#include <avr/io.h>
#include "Types_Macros.h"
#include "ADC.h"

void ADC_init(void){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0;
    1d16:	e7 e2       	ldi	r30, 0x27	; 39
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    1d1c:	a6 e2       	ldi	r26, 0x26	; 38
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e6 e2       	ldi	r30, 0x26	; 38
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	83 68       	ori	r24, 0x83	; 131
    1d28:	8c 93       	st	X, r24
}
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num){
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	0f 92       	push	r0
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = 0XE0;
    1d3c:	e7 e2       	ldi	r30, 0x27	; 39
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 ee       	ldi	r24, 0xE0	; 224
    1d42:	80 83       	st	Z, r24
	ADMUX = ADMUX | (channel_num & (0X1F));
    1d44:	a7 e2       	ldi	r26, 0x27	; 39
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e7 e2       	ldi	r30, 0x27	; 39
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	98 2f       	mov	r25, r24
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	8f 71       	andi	r24, 0x1F	; 31
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC);
    1d58:	a6 e2       	ldi	r26, 0x26	; 38
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e6 e2       	ldi	r30, 0x26	; 38
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	80 64       	ori	r24, 0x40	; 64
    1d64:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA , ADIF));
    1d66:	e6 e2       	ldi	r30, 0x26	; 38
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	80 71       	andi	r24, 0x10	; 16
    1d72:	90 70       	andi	r25, 0x00	; 0
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	b9 f3       	breq	.-18     	; 0x1d66 <ADC_readChannel+0x36>
	SET_BIT(ADCSRA , ADIF);
    1d78:	a6 e2       	ldi	r26, 0x26	; 38
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e6 e2       	ldi	r30, 0x26	; 38
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	8c 93       	st	X, r24
	return ADC;
    1d86:	e4 e2       	ldi	r30, 0x24	; 36
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <get_Value>:

#if(NUM_OF_COL == 4)
static uint8 getTheRightValue4X4(uint8);
#endif

uint8 get_Value(){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	60 97       	sbiw	r28, 0x10	; 16
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(KEYPAD_DDRX , FIRST_COL );
    1daa:	a4 e3       	ldi	r26, 0x34	; 52
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e4 e3       	ldi	r30, 0x34	; 52
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 61       	ori	r24, 0x10	; 16
    1db6:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDRX , (FIRST_COL + 1) );
    1db8:	a4 e3       	ldi	r26, 0x34	; 52
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e4 e3       	ldi	r30, 0x34	; 52
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 62       	ori	r24, 0x20	; 32
    1dc4:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDRX , (FIRST_COL + 2) );
    1dc6:	a4 e3       	ldi	r26, 0x34	; 52
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e4 e3       	ldi	r30, 0x34	; 52
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 64       	ori	r24, 0x40	; 64
    1dd2:	8c 93       	st	X, r24

#if(NUM_OF_COL == 4)
	SET_BIT(KEYPAD_DDRX , (FIRST_COL + 3) );
#endif

	CLEAR_BIT(KEYPAD_DDRX , FIRST_ROW );
    1dd4:	a4 e3       	ldi	r26, 0x34	; 52
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e4 e3       	ldi	r30, 0x34	; 52
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8e 7f       	andi	r24, 0xFE	; 254
    1de0:	8c 93       	st	X, r24
	CLEAR_BIT(KEYPAD_DDRX , (FIRST_ROW + 1) );
    1de2:	a4 e3       	ldi	r26, 0x34	; 52
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e4 e3       	ldi	r30, 0x34	; 52
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8d 7f       	andi	r24, 0xFD	; 253
    1dee:	8c 93       	st	X, r24
	CLEAR_BIT(KEYPAD_DDRX , (FIRST_ROW + 2) );
    1df0:	a4 e3       	ldi	r26, 0x34	; 52
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e4 e3       	ldi	r30, 0x34	; 52
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8b 7f       	andi	r24, 0xFB	; 251
    1dfc:	8c 93       	st	X, r24
	CLEAR_BIT(KEYPAD_DDRX , (FIRST_ROW + 3) );
    1dfe:	a4 e3       	ldi	r26, 0x34	; 52
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e4 e3       	ldi	r30, 0x34	; 52
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	87 7f       	andi	r24, 0xF7	; 247
    1e0a:	8c 93       	st	X, r24

	uint8 col=0 , row =0;
    1e0c:	18 8a       	std	Y+16, r1	; 0x10
    1e0e:	1f 86       	std	Y+15, r1	; 0x0f
	while(1){
		for(col=0 ; col < NUM_OF_COL ; col ++){
    1e10:	18 8a       	std	Y+16, r1	; 0x10
    1e12:	e7 c0       	rjmp	.+462    	; 0x1fe2 <get_Value+0x24c>
			CLEAR_BIT(KEYPAD_PORTX , FIRST_COL );
    1e14:	a5 e3       	ldi	r26, 0x35	; 53
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e3       	ldi	r30, 0x35	; 53
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 7e       	andi	r24, 0xEF	; 239
    1e20:	8c 93       	st	X, r24
			CLEAR_BIT(KEYPAD_PORTX , (FIRST_COL + 1) );
    1e22:	a5 e3       	ldi	r26, 0x35	; 53
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e3       	ldi	r30, 0x35	; 53
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 7d       	andi	r24, 0xDF	; 223
    1e2e:	8c 93       	st	X, r24
			CLEAR_BIT(KEYPAD_PORTX , (FIRST_COL + 2) );
    1e30:	a5 e3       	ldi	r26, 0x35	; 53
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e3       	ldi	r30, 0x35	; 53
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 7b       	andi	r24, 0xBF	; 191
    1e3c:	8c 93       	st	X, r24
#if(NUM_OF_COL == 4)
			CLEAR_BIT(KEYPAD_PORTX , (FIRST_COL + 3) );
#endif

			SET_BIT(KEYPAD_PORTX , (FIRST_COL + col));
    1e3e:	a5 e3       	ldi	r26, 0x35	; 53
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e3       	ldi	r30, 0x35	; 53
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	88 89       	ldd	r24, Y+16	; 0x10
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c 01       	movw	r18, r24
    1e52:	2c 5f       	subi	r18, 0xFC	; 252
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <get_Value+0xcc>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <get_Value+0xc8>
    1e66:	84 2b       	or	r24, r20
    1e68:	8c 93       	st	X, r24

			for(row=0 ; row < NUM_OF_ROW ; row++){
    1e6a:	1f 86       	std	Y+15, r1	; 0x0f
    1e6c:	b3 c0       	rjmp	.+358    	; 0x1fd4 <get_Value+0x23e>
				if(BIT_IS_SET(KEYPAD_PINX, (FIRST_ROW + row) )){
    1e6e:	e3 e3       	ldi	r30, 0x33	; 51
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a9 01       	movw	r20, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <get_Value+0xf0>
    1e82:	55 95       	asr	r21
    1e84:	47 95       	ror	r20
    1e86:	8a 95       	dec	r24
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <get_Value+0xec>
    1e8a:	ca 01       	movw	r24, r20
    1e8c:	81 70       	andi	r24, 0x01	; 1
    1e8e:	90 70       	andi	r25, 0x00	; 0
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <get_Value+0x100>
    1e94:	9c c0       	rjmp	.+312    	; 0x1fce <get_Value+0x238>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1e9c:	b1 e4       	ldi	r27, 0x41	; 65
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	ad 87       	std	Y+13, r26	; 0x0d
    1ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a e7       	ldi	r20, 0x7A	; 122
    1eb4:	55 e4       	ldi	r21, 0x45	; 69
    1eb6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8f 83       	std	Y+7, r24	; 0x07
    1ec0:	98 87       	std	Y+8, r25	; 0x08
    1ec2:	a9 87       	std	Y+9, r26	; 0x09
    1ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e8       	ldi	r20, 0x80	; 128
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <get_Value+0x152>
		__ticks = 1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	3f c0       	rjmp	.+126    	; 0x1f66 <get_Value+0x1d0>
	else if (__tmp > 65535)
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	4c f5       	brge	.+82     	; 0x1f52 <get_Value+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <get_Value+0x1b2>
    1f2a:	80 e9       	ldi	r24, 0x90	; 144
    1f2c:	91 e0       	ldi	r25, 0x01	; 1
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <get_Value+0x1a0>
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <get_Value+0x194>
    1f50:	14 c0       	rjmp	.+40     	; 0x1f7a <get_Value+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <get_Value+0x1dc>
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(30);
					if(BIT_IS_SET(KEYPAD_PINX, (FIRST_ROW + row) )){
    1f7a:	e3 e3       	ldi	r30, 0x33	; 51
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <get_Value+0x1fc>
    1f8e:	55 95       	asr	r21
    1f90:	47 95       	ror	r20
    1f92:	8a 95       	dec	r24
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <get_Value+0x1f8>
    1f96:	ca 01       	movw	r24, r20
    1f98:	81 70       	andi	r24, 0x01	; 1
    1f9a:	90 70       	andi	r25, 0x00	; 0
    1f9c:	88 23       	and	r24, r24
    1f9e:	b9 f0       	breq	.+46     	; 0x1fce <get_Value+0x238>

#if(NUM_OF_COL == 3)
						return getTheRightValue4X3((row * NUM_OF_COL) + col + 1);
    1fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	c9 01       	movw	r24, r18
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	82 0f       	add	r24, r18
    1fae:	93 1f       	adc	r25, r19
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	89 0f       	add	r24, r25
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <getTheRightValue4X3>
					}
				}
			}
		}
	}
}
    1fbc:	60 96       	adiw	r28, 0x10	; 16
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret
			CLEAR_BIT(KEYPAD_PORTX , (FIRST_COL + 3) );
#endif

			SET_BIT(KEYPAD_PORTX , (FIRST_COL + col));

			for(row=0 ; row < NUM_OF_ROW ; row++){
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	8f 87       	std	Y+15, r24	; 0x0f
    1fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	08 f4       	brcc	.+2      	; 0x1fdc <get_Value+0x246>
    1fda:	49 cf       	rjmp	.-366    	; 0x1e6e <get_Value+0xd8>
	CLEAR_BIT(KEYPAD_DDRX , (FIRST_ROW + 2) );
	CLEAR_BIT(KEYPAD_DDRX , (FIRST_ROW + 3) );

	uint8 col=0 , row =0;
	while(1){
		for(col=0 ; col < NUM_OF_COL ; col ++){
    1fdc:	88 89       	ldd	r24, Y+16	; 0x10
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	88 8b       	std	Y+16, r24	; 0x10
    1fe2:	88 89       	ldd	r24, Y+16	; 0x10
    1fe4:	83 30       	cpi	r24, 0x03	; 3
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <get_Value+0x254>
    1fe8:	15 cf       	rjmp	.-470    	; 0x1e14 <get_Value+0x7e>
    1fea:	12 cf       	rjmp	.-476    	; 0x1e10 <get_Value+0x7a>

00001fec <getTheRightValue4X3>:
	}
}

#if(NUM_OF_COL == 3)

uint8 getTheRightValue4X3(uint8 value){
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <getTheRightValue4X3+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <getTheRightValue4X3+0x8>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 number = value;
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	switch(value){
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3c 83       	std	Y+4, r19	; 0x04
    2006:	2b 83       	std	Y+3, r18	; 0x03
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	8a 30       	cpi	r24, 0x0A	; 10
    200e:	91 05       	cpc	r25, r1
    2010:	81 f0       	breq	.+32     	; 0x2032 <getTheRightValue4X3+0x46>
    2012:	2b 81       	ldd	r18, Y+3	; 0x03
    2014:	3c 81       	ldd	r19, Y+4	; 0x04
    2016:	2a 30       	cpi	r18, 0x0A	; 10
    2018:	31 05       	cpc	r19, r1
    201a:	9c f0       	brlt	.+38     	; 0x2042 <getTheRightValue4X3+0x56>
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	8b 30       	cpi	r24, 0x0B	; 11
    2022:	91 05       	cpc	r25, r1
    2024:	49 f0       	breq	.+18     	; 0x2038 <getTheRightValue4X3+0x4c>
    2026:	2b 81       	ldd	r18, Y+3	; 0x03
    2028:	3c 81       	ldd	r19, Y+4	; 0x04
    202a:	2c 30       	cpi	r18, 0x0C	; 12
    202c:	31 05       	cpc	r19, r1
    202e:	31 f0       	breq	.+12     	; 0x203c <getTheRightValue4X3+0x50>
    2030:	08 c0       	rjmp	.+16     	; 0x2042 <getTheRightValue4X3+0x56>
	case 10:
		number = '*';
    2032:	8a e2       	ldi	r24, 0x2A	; 42
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <getTheRightValue4X3+0x5a>
		break;
	case 11:
		number = 0;
    2038:	19 82       	std	Y+1, r1	; 0x01
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <getTheRightValue4X3+0x5a>
		break;
	case 12:
		number = '#';
    203c:	83 e2       	ldi	r24, 0x23	; 35
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <getTheRightValue4X3+0x5a>
		break;
	default:
		number = value;
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
	}
	 return number;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <LCD_Init>:
static _PORT CONTROL_PORT;
static uint8 RS_PIN;
static uint8 RW_PIN;
static uint8 EN_PIN;

void LCD_Init(const Configuration *confg){
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	c6 56       	subi	r28, 0x66	; 102
    2064:	d0 40       	sbci	r29, 0x00	; 0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	fe 01       	movw	r30, r28
    2072:	eb 59       	subi	r30, 0x9B	; 155
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
	LCD_PORT = confg->LCD_Port;
    207a:	fe 01       	movw	r30, r28
    207c:	eb 59       	subi	r30, 0x9B	; 155
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	01 90       	ld	r0, Z+
    2082:	f0 81       	ld	r31, Z
    2084:	e0 2d       	mov	r30, r0
    2086:	84 81       	ldd	r24, Z+4	; 0x04
    2088:	80 93 46 02 	sts	0x0246, r24
	CONTROL_PORT = confg->ControlPort;
    208c:	fe 01       	movw	r30, r28
    208e:	eb 59       	subi	r30, 0x9B	; 155
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	01 90       	ld	r0, Z+
    2094:	f0 81       	ld	r31, Z
    2096:	e0 2d       	mov	r30, r0
    2098:	83 81       	ldd	r24, Z+3	; 0x03
    209a:	80 93 47 02 	sts	0x0247, r24
	RS_PIN = confg->RS_Pin;
    209e:	fe 01       	movw	r30, r28
    20a0:	eb 59       	subi	r30, 0x9B	; 155
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	01 90       	ld	r0, Z+
    20a6:	f0 81       	ld	r31, Z
    20a8:	e0 2d       	mov	r30, r0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 93 48 02 	sts	0x0248, r24
	RW_PIN = confg->RW_Pin;
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 59       	subi	r30, 0x9B	; 155
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	01 90       	ld	r0, Z+
    20b8:	f0 81       	ld	r31, Z
    20ba:	e0 2d       	mov	r30, r0
    20bc:	81 81       	ldd	r24, Z+1	; 0x01
    20be:	80 93 49 02 	sts	0x0249, r24
	EN_PIN = confg->EN_Pin;
    20c2:	fe 01       	movw	r30, r28
    20c4:	eb 59       	subi	r30, 0x9B	; 155
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	01 90       	ld	r0, Z+
    20ca:	f0 81       	ld	r31, Z
    20cc:	e0 2d       	mov	r30, r0
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	80 93 4a 02 	sts	0x024A, r24
    20d4:	fe 01       	movw	r30, r28
    20d6:	ef 59       	subi	r30, 0x9F	; 159
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a8 ef       	ldi	r26, 0xF8	; 248
    20e0:	b1 e4       	ldi	r27, 0x41	; 65
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	8e 01       	movw	r16, r28
    20ec:	03 5a       	subi	r16, 0xA3	; 163
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 59       	subi	r30, 0x9F	; 159
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	55 e4       	ldi	r21, 0x45	; 69
    2106:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	e3 5a       	subi	r30, 0xA3	; 163
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	44 f4       	brge	.+16     	; 0x2146 <LCD_Init+0xf0>
		__ticks = 1;
    2136:	fe 01       	movw	r30, r28
    2138:	e5 5a       	subi	r30, 0xA5	; 165
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	64 c0       	rjmp	.+200    	; 0x220e <LCD_Init+0x1b8>
	else if (__tmp > 65535)
    2146:	fe 01       	movw	r30, r28
    2148:	e3 5a       	subi	r30, 0xA3	; 163
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	0c f0       	brlt	.+2      	; 0x2166 <LCD_Init+0x110>
    2164:	43 c0       	rjmp	.+134    	; 0x21ec <LCD_Init+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	fe 01       	movw	r30, r28
    2168:	ef 59       	subi	r30, 0x9F	; 159
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 01       	movw	r16, r28
    2186:	05 5a       	subi	r16, 0xA5	; 165
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	1f c0       	rjmp	.+62     	; 0x21dc <LCD_Init+0x186>
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 5a       	subi	r30, 0xA7	; 167
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 e9       	ldi	r24, 0x90	; 144
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 5a       	subi	r30, 0xA7	; 167
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_Init+0x160>
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5a       	subi	r30, 0xA7	; 167
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	de 01       	movw	r26, r28
    21c6:	a5 5a       	subi	r26, 0xA5	; 165
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e5 5a       	subi	r30, 0xA5	; 165
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	fe 01       	movw	r30, r28
    21de:	e5 5a       	subi	r30, 0xA5	; 165
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f6       	brne	.-76     	; 0x219e <LCD_Init+0x148>
    21ea:	27 c0       	rjmp	.+78     	; 0x223a <LCD_Init+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	8e 01       	movw	r16, r28
    21ee:	05 5a       	subi	r16, 0xA5	; 165
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e3 5a       	subi	r30, 0xA3	; 163
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	de 01       	movw	r26, r28
    2210:	a9 5a       	subi	r26, 0xA9	; 169
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e5 5a       	subi	r30, 0xA5	; 165
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	8d 93       	st	X+, r24
    2220:	9c 93       	st	X, r25
    2222:	fe 01       	movw	r30, r28
    2224:	e9 5a       	subi	r30, 0xA9	; 169
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_Init+0x1d6>
    2230:	fe 01       	movw	r30, r28
    2232:	e9 5a       	subi	r30, 0xA9	; 169
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
	_delay_ms(31);
	LCD_SendCommand(FUNCTION_SET | confg->DL | confg->N | confg->F);
    223a:	fe 01       	movw	r30, r28
    223c:	eb 59       	subi	r30, 0x9B	; 155
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	01 90       	ld	r0, Z+
    2242:	f0 81       	ld	r31, Z
    2244:	e0 2d       	mov	r30, r0
    2246:	95 81       	ldd	r25, Z+5	; 0x05
    2248:	fe 01       	movw	r30, r28
    224a:	eb 59       	subi	r30, 0x9B	; 155
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	01 90       	ld	r0, Z+
    2250:	f0 81       	ld	r31, Z
    2252:	e0 2d       	mov	r30, r0
    2254:	86 81       	ldd	r24, Z+6	; 0x06
    2256:	98 2b       	or	r25, r24
    2258:	fe 01       	movw	r30, r28
    225a:	eb 59       	subi	r30, 0x9B	; 155
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	01 90       	ld	r0, Z+
    2260:	f0 81       	ld	r31, Z
    2262:	e0 2d       	mov	r30, r0
    2264:	87 81       	ldd	r24, Z+7	; 0x07
    2266:	89 2b       	or	r24, r25
    2268:	80 62       	ori	r24, 0x20	; 32
    226a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    226e:	fe 01       	movw	r30, r28
    2270:	ed 5a       	subi	r30, 0xAD	; 173
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e2       	ldi	r26, 0x20	; 32
    227a:	b2 e4       	ldi	r27, 0x42	; 66
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2284:	8e 01       	movw	r16, r28
    2286:	01 5b       	subi	r16, 0xB1	; 177
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	ed 5a       	subi	r30, 0xAD	; 173
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	2b ea       	ldi	r18, 0xAB	; 171
    229a:	3a ea       	ldi	r19, 0xAA	; 170
    229c:	4a ea       	ldi	r20, 0xAA	; 170
    229e:	50 e4       	ldi	r21, 0x40	; 64
    22a0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b2:	fe 01       	movw	r30, r28
    22b4:	e1 5b       	subi	r30, 0xB1	; 177
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	60 81       	ld	r22, Z
    22ba:	71 81       	ldd	r23, Z+1	; 0x01
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	34 f4       	brge	.+12     	; 0x22dc <LCD_Init+0x286>
		__ticks = 1;
    22d0:	fe 01       	movw	r30, r28
    22d2:	e2 5b       	subi	r30, 0xB2	; 178
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 83       	st	Z, r24
    22da:	e0 c0       	rjmp	.+448    	; 0x249c <LCD_Init+0x446>
	else if (__tmp > 255)
    22dc:	fe 01       	movw	r30, r28
    22de:	e1 5b       	subi	r30, 0xB1	; 177
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	53 e4       	ldi	r21, 0x43	; 67
    22f2:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	0c f0       	brlt	.+2      	; 0x22fc <LCD_Init+0x2a6>
    22fa:	c0 c0       	rjmp	.+384    	; 0x247c <LCD_Init+0x426>
	{
		_delay_ms(__us / 1000.0);
    22fc:	fe 01       	movw	r30, r28
    22fe:	ed 5a       	subi	r30, 0xAD	; 173
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a e7       	ldi	r20, 0x7A	; 122
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	fe 01       	movw	r30, r28
    231c:	e6 5b       	subi	r30, 0xB6	; 182
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	a2 83       	std	Z+2, r26	; 0x02
    2326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	8e 01       	movw	r16, r28
    232a:	0a 5b       	subi	r16, 0xBA	; 186
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	e6 5b       	subi	r30, 0xB6	; 182
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	80 83       	st	Z, r24
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	a2 83       	std	Z+2, r26	; 0x02
    2354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2356:	fe 01       	movw	r30, r28
    2358:	ea 5b       	subi	r30, 0xBA	; 186
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	44 f4       	brge	.+16     	; 0x2384 <LCD_Init+0x32e>
		__ticks = 1;
    2374:	fe 01       	movw	r30, r28
    2376:	ec 5b       	subi	r30, 0xBC	; 188
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	64 c0       	rjmp	.+200    	; 0x244c <LCD_Init+0x3f6>
	else if (__tmp > 65535)
    2384:	fe 01       	movw	r30, r28
    2386:	ea 5b       	subi	r30, 0xBA	; 186
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	0c f0       	brlt	.+2      	; 0x23a4 <LCD_Init+0x34e>
    23a2:	43 c0       	rjmp	.+134    	; 0x242a <LCD_Init+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	fe 01       	movw	r30, r28
    23a6:	e6 5b       	subi	r30, 0xB6	; 182
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8e 01       	movw	r16, r28
    23c4:	0c 5b       	subi	r16, 0xBC	; 188
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
    23da:	1f c0       	rjmp	.+62     	; 0x241a <LCD_Init+0x3c4>
    23dc:	fe 01       	movw	r30, r28
    23de:	ee 5b       	subi	r30, 0xBE	; 190
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 e9       	ldi	r24, 0x90	; 144
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	fe 01       	movw	r30, r28
    23ec:	ee 5b       	subi	r30, 0xBE	; 190
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_Init+0x39e>
    23f8:	fe 01       	movw	r30, r28
    23fa:	ee 5b       	subi	r30, 0xBE	; 190
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	de 01       	movw	r26, r28
    2404:	ac 5b       	subi	r26, 0xBC	; 188
    2406:	bf 4f       	sbci	r27, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	ec 5b       	subi	r30, 0xBC	; 188
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	9c 93       	st	X, r25
    2418:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	fe 01       	movw	r30, r28
    241c:	ec 5b       	subi	r30, 0xBC	; 188
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	d1 f6       	brne	.-76     	; 0x23dc <LCD_Init+0x386>
    2428:	42 c0       	rjmp	.+132    	; 0x24ae <LCD_Init+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	8e 01       	movw	r16, r28
    242c:	0c 5b       	subi	r16, 0xBC	; 188
    242e:	1f 4f       	sbci	r17, 0xFF	; 255
    2430:	fe 01       	movw	r30, r28
    2432:	ea 5b       	subi	r30, 0xBA	; 186
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	de 01       	movw	r26, r28
    244e:	a0 5c       	subi	r26, 0xC0	; 192
    2450:	bf 4f       	sbci	r27, 0xFF	; 255
    2452:	fe 01       	movw	r30, r28
    2454:	ec 5b       	subi	r30, 0xBC	; 188
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	11 96       	adiw	r26, 0x01	; 1
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
    2462:	fe 01       	movw	r30, r28
    2464:	e0 5c       	subi	r30, 0xC0	; 192
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <LCD_Init+0x416>
    2470:	fe 01       	movw	r30, r28
    2472:	e0 5c       	subi	r30, 0xC0	; 192
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	80 83       	st	Z, r24
    247a:	19 c0       	rjmp	.+50     	; 0x24ae <LCD_Init+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    247c:	8e 01       	movw	r16, r28
    247e:	02 5b       	subi	r16, 0xB2	; 178
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	e1 5b       	subi	r30, 0xB1	; 177
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	f8 01       	movw	r30, r16
    249a:	80 83       	st	Z, r24
    249c:	fe 01       	movw	r30, r28
    249e:	e2 5b       	subi	r30, 0xB2	; 178
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    24a8:	8a 95       	dec	r24
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_Init+0x452>
    24ac:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(40);
	LCD_SendCommand(DISPLAY_ON_CURSOR_OFF);
    24ae:	8c e0       	ldi	r24, 0x0C	; 12
    24b0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e2       	ldi	r26, 0x20	; 32
    24ba:	b2 e4       	ldi	r27, 0x42	; 66
    24bc:	8b af       	std	Y+59, r24	; 0x3b
    24be:	9c af       	std	Y+60, r25	; 0x3c
    24c0:	ad af       	std	Y+61, r26	; 0x3d
    24c2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24c4:	6b ad       	ldd	r22, Y+59	; 0x3b
    24c6:	7c ad       	ldd	r23, Y+60	; 0x3c
    24c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    24cc:	2b ea       	ldi	r18, 0xAB	; 171
    24ce:	3a ea       	ldi	r19, 0xAA	; 170
    24d0:	4a ea       	ldi	r20, 0xAA	; 170
    24d2:	50 e4       	ldi	r21, 0x40	; 64
    24d4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8f ab       	std	Y+55, r24	; 0x37
    24de:	98 af       	std	Y+56, r25	; 0x38
    24e0:	a9 af       	std	Y+57, r26	; 0x39
    24e2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    24e4:	6f a9       	ldd	r22, Y+55	; 0x37
    24e6:	78 ad       	ldd	r23, Y+56	; 0x38
    24e8:	89 ad       	ldd	r24, Y+57	; 0x39
    24ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	1c f4       	brge	.+6      	; 0x2502 <LCD_Init+0x4ac>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	8e ab       	std	Y+54, r24	; 0x36
    2500:	91 c0       	rjmp	.+290    	; 0x2624 <LCD_Init+0x5ce>
	else if (__tmp > 255)
    2502:	6f a9       	ldd	r22, Y+55	; 0x37
    2504:	78 ad       	ldd	r23, Y+56	; 0x38
    2506:	89 ad       	ldd	r24, Y+57	; 0x39
    2508:	9a ad       	ldd	r25, Y+58	; 0x3a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	53 e4       	ldi	r21, 0x43	; 67
    2512:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <LCD_Init+0x4c6>
    251a:	7b c0       	rjmp	.+246    	; 0x2612 <LCD_Init+0x5bc>
	{
		_delay_ms(__us / 1000.0);
    251c:	6b ad       	ldd	r22, Y+59	; 0x3b
    251e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2520:	8d ad       	ldd	r24, Y+61	; 0x3d
    2522:	9e ad       	ldd	r25, Y+62	; 0x3e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a e7       	ldi	r20, 0x7A	; 122
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8a ab       	std	Y+50, r24	; 0x32
    2536:	9b ab       	std	Y+51, r25	; 0x33
    2538:	ac ab       	std	Y+52, r26	; 0x34
    253a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6a a9       	ldd	r22, Y+50	; 0x32
    253e:	7b a9       	ldd	r23, Y+51	; 0x33
    2540:	8c a9       	ldd	r24, Y+52	; 0x34
    2542:	9d a9       	ldd	r25, Y+53	; 0x35
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	55 e4       	ldi	r21, 0x45	; 69
    254c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8e a7       	std	Y+46, r24	; 0x2e
    2556:	9f a7       	std	Y+47, r25	; 0x2f
    2558:	a8 ab       	std	Y+48, r26	; 0x30
    255a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    255c:	6e a5       	ldd	r22, Y+46	; 0x2e
    255e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2560:	88 a9       	ldd	r24, Y+48	; 0x30
    2562:	99 a9       	ldd	r25, Y+49	; 0x31
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_Init+0x528>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9d a7       	std	Y+45, r25	; 0x2d
    257a:	8c a7       	std	Y+44, r24	; 0x2c
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <LCD_Init+0x5a6>
	else if (__tmp > 65535)
    257e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2580:	7f a5       	ldd	r23, Y+47	; 0x2f
    2582:	88 a9       	ldd	r24, Y+48	; 0x30
    2584:	99 a9       	ldd	r25, Y+49	; 0x31
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <LCD_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6a a9       	ldd	r22, Y+50	; 0x32
    2598:	7b a9       	ldd	r23, Y+51	; 0x33
    259a:	8c a9       	ldd	r24, Y+52	; 0x34
    259c:	9d a9       	ldd	r25, Y+53	; 0x35
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9d a7       	std	Y+45, r25	; 0x2d
    25bc:	8c a7       	std	Y+44, r24	; 0x2c
    25be:	0f c0       	rjmp	.+30     	; 0x25de <LCD_Init+0x588>
    25c0:	80 e9       	ldi	r24, 0x90	; 144
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	9b a7       	std	Y+43, r25	; 0x2b
    25c6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    25ca:	9b a5       	ldd	r25, Y+43	; 0x2b
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_Init+0x576>
    25d0:	9b a7       	std	Y+43, r25	; 0x2b
    25d2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8c a5       	ldd	r24, Y+44	; 0x2c
    25d6:	9d a5       	ldd	r25, Y+45	; 0x2d
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9d a7       	std	Y+45, r25	; 0x2d
    25dc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8c a5       	ldd	r24, Y+44	; 0x2c
    25e0:	9d a5       	ldd	r25, Y+45	; 0x2d
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <LCD_Init+0x56a>
    25e6:	24 c0       	rjmp	.+72     	; 0x2630 <LCD_Init+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6e a5       	ldd	r22, Y+46	; 0x2e
    25ea:	7f a5       	ldd	r23, Y+47	; 0x2f
    25ec:	88 a9       	ldd	r24, Y+48	; 0x30
    25ee:	99 a9       	ldd	r25, Y+49	; 0x31
    25f0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9d a7       	std	Y+45, r25	; 0x2d
    25fa:	8c a7       	std	Y+44, r24	; 0x2c
    25fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    25fe:	9d a5       	ldd	r25, Y+45	; 0x2d
    2600:	99 a7       	std	Y+41, r25	; 0x29
    2602:	88 a7       	std	Y+40, r24	; 0x28
    2604:	88 a5       	ldd	r24, Y+40	; 0x28
    2606:	99 a5       	ldd	r25, Y+41	; 0x29
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_Init+0x5b2>
    260c:	99 a7       	std	Y+41, r25	; 0x29
    260e:	88 a7       	std	Y+40, r24	; 0x28
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <LCD_Init+0x5da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2612:	6f a9       	ldd	r22, Y+55	; 0x37
    2614:	78 ad       	ldd	r23, Y+56	; 0x38
    2616:	89 ad       	ldd	r24, Y+57	; 0x39
    2618:	9a ad       	ldd	r25, Y+58	; 0x3a
    261a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8e ab       	std	Y+54, r24	; 0x36
    2624:	8e a9       	ldd	r24, Y+54	; 0x36
    2626:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2628:	8f a1       	ldd	r24, Y+39	; 0x27
    262a:	8a 95       	dec	r24
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_Init+0x5d4>
    262e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_SendCommand(ENTERY_MODE);
    2630:	86 e0       	ldi	r24, 0x06	; 6
    2632:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e2       	ldi	r26, 0x20	; 32
    263c:	b2 e4       	ldi	r27, 0x42	; 66
    263e:	8b a3       	std	Y+35, r24	; 0x23
    2640:	9c a3       	std	Y+36, r25	; 0x24
    2642:	ad a3       	std	Y+37, r26	; 0x25
    2644:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2646:	6b a1       	ldd	r22, Y+35	; 0x23
    2648:	7c a1       	ldd	r23, Y+36	; 0x24
    264a:	8d a1       	ldd	r24, Y+37	; 0x25
    264c:	9e a1       	ldd	r25, Y+38	; 0x26
    264e:	2b ea       	ldi	r18, 0xAB	; 171
    2650:	3a ea       	ldi	r19, 0xAA	; 170
    2652:	4a ea       	ldi	r20, 0xAA	; 170
    2654:	50 e4       	ldi	r21, 0x40	; 64
    2656:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8f 8f       	std	Y+31, r24	; 0x1f
    2660:	98 a3       	std	Y+32, r25	; 0x20
    2662:	a9 a3       	std	Y+33, r26	; 0x21
    2664:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2666:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2668:	78 a1       	ldd	r23, Y+32	; 0x20
    266a:	89 a1       	ldd	r24, Y+33	; 0x21
    266c:	9a a1       	ldd	r25, Y+34	; 0x22
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	1c f4       	brge	.+6      	; 0x2684 <LCD_Init+0x62e>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	8e 8f       	std	Y+30, r24	; 0x1e
    2682:	91 c0       	rjmp	.+290    	; 0x27a6 <LCD_Init+0x750>
	else if (__tmp > 255)
    2684:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2686:	78 a1       	ldd	r23, Y+32	; 0x20
    2688:	89 a1       	ldd	r24, Y+33	; 0x21
    268a:	9a a1       	ldd	r25, Y+34	; 0x22
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4f e7       	ldi	r20, 0x7F	; 127
    2692:	53 e4       	ldi	r21, 0x43	; 67
    2694:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2698:	18 16       	cp	r1, r24
    269a:	0c f0       	brlt	.+2      	; 0x269e <LCD_Init+0x648>
    269c:	7b c0       	rjmp	.+246    	; 0x2794 <LCD_Init+0x73e>
	{
		_delay_ms(__us / 1000.0);
    269e:	6b a1       	ldd	r22, Y+35	; 0x23
    26a0:	7c a1       	ldd	r23, Y+36	; 0x24
    26a2:	8d a1       	ldd	r24, Y+37	; 0x25
    26a4:	9e a1       	ldd	r25, Y+38	; 0x26
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a e7       	ldi	r20, 0x7A	; 122
    26ac:	54 e4       	ldi	r21, 0x44	; 68
    26ae:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	8a 8f       	std	Y+26, r24	; 0x1a
    26b8:	9b 8f       	std	Y+27, r25	; 0x1b
    26ba:	ac 8f       	std	Y+28, r26	; 0x1c
    26bc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a e7       	ldi	r20, 0x7A	; 122
    26cc:	55 e4       	ldi	r21, 0x45	; 69
    26ce:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8e 8b       	std	Y+22, r24	; 0x16
    26d8:	9f 8b       	std	Y+23, r25	; 0x17
    26da:	a8 8f       	std	Y+24, r26	; 0x18
    26dc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    26de:	6e 89       	ldd	r22, Y+22	; 0x16
    26e0:	7f 89       	ldd	r23, Y+23	; 0x17
    26e2:	88 8d       	ldd	r24, Y+24	; 0x18
    26e4:	99 8d       	ldd	r25, Y+25	; 0x19
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <LCD_Init+0x6aa>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9d 8b       	std	Y+21, r25	; 0x15
    26fc:	8c 8b       	std	Y+20, r24	; 0x14
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <LCD_Init+0x728>
	else if (__tmp > 65535)
    2700:	6e 89       	ldd	r22, Y+22	; 0x16
    2702:	7f 89       	ldd	r23, Y+23	; 0x17
    2704:	88 8d       	ldd	r24, Y+24	; 0x18
    2706:	99 8d       	ldd	r25, Y+25	; 0x19
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <LCD_Init+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	6a 8d       	ldd	r22, Y+26	; 0x1a
    271a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    271c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    271e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9d 8b       	std	Y+21, r25	; 0x15
    273e:	8c 8b       	std	Y+20, r24	; 0x14
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <LCD_Init+0x70a>
    2742:	80 e9       	ldi	r24, 0x90	; 144
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	9b 8b       	std	Y+19, r25	; 0x13
    2748:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    274a:	8a 89       	ldd	r24, Y+18	; 0x12
    274c:	9b 89       	ldd	r25, Y+19	; 0x13
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_Init+0x6f8>
    2752:	9b 8b       	std	Y+19, r25	; 0x13
    2754:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8c 89       	ldd	r24, Y+20	; 0x14
    2758:	9d 89       	ldd	r25, Y+21	; 0x15
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9d 8b       	std	Y+21, r25	; 0x15
    275e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8c 89       	ldd	r24, Y+20	; 0x14
    2762:	9d 89       	ldd	r25, Y+21	; 0x15
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <LCD_Init+0x6ec>
    2768:	24 c0       	rjmp	.+72     	; 0x27b2 <LCD_Init+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6e 89       	ldd	r22, Y+22	; 0x16
    276c:	7f 89       	ldd	r23, Y+23	; 0x17
    276e:	88 8d       	ldd	r24, Y+24	; 0x18
    2770:	99 8d       	ldd	r25, Y+25	; 0x19
    2772:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9d 8b       	std	Y+21, r25	; 0x15
    277c:	8c 8b       	std	Y+20, r24	; 0x14
    277e:	8c 89       	ldd	r24, Y+20	; 0x14
    2780:	9d 89       	ldd	r25, Y+21	; 0x15
    2782:	99 8b       	std	Y+17, r25	; 0x11
    2784:	88 8b       	std	Y+16, r24	; 0x10
    2786:	88 89       	ldd	r24, Y+16	; 0x10
    2788:	99 89       	ldd	r25, Y+17	; 0x11
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_Init+0x734>
    278e:	99 8b       	std	Y+17, r25	; 0x11
    2790:	88 8b       	std	Y+16, r24	; 0x10
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <LCD_Init+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2794:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2796:	78 a1       	ldd	r23, Y+32	; 0x20
    2798:	89 a1       	ldd	r24, Y+33	; 0x21
    279a:	9a a1       	ldd	r25, Y+34	; 0x22
    279c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8e 8f       	std	Y+30, r24	; 0x1e
    27a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ac:	8a 95       	dec	r24
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_Init+0x756>
    27b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_SendCommand(DISPLAY_CLEAR);
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a0 e0       	ldi	r26, 0x00	; 0
    27be:	b0 e4       	ldi	r27, 0x40	; 64
    27c0:	8b 87       	std	Y+11, r24	; 0x0b
    27c2:	9c 87       	std	Y+12, r25	; 0x0c
    27c4:	ad 87       	std	Y+13, r26	; 0x0d
    27c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    27cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	55 e4       	ldi	r21, 0x45	; 69
    27d8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8f 83       	std	Y+7, r24	; 0x07
    27e2:	98 87       	std	Y+8, r25	; 0x08
    27e4:	a9 87       	std	Y+9, r26	; 0x09
    27e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <LCD_Init+0x7b4>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <LCD_Init+0x832>
	else if (__tmp > 65535)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <LCD_Init+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6b 85       	ldd	r22, Y+11	; 0x0b
    2824:	7c 85       	ldd	r23, Y+12	; 0x0c
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	9e 85       	ldd	r25, Y+14	; 0x0e
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	0f c0       	rjmp	.+30     	; 0x286a <LCD_Init+0x814>
    284c:	80 e9       	ldi	r24, 0x90	; 144
    284e:	91 e0       	ldi	r25, 0x01	; 1
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_Init+0x802>
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <LCD_Init+0x7f6>
    2872:	14 c0       	rjmp	.+40     	; 0x289c <LCD_Init+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_Init+0x83e>
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    289c:	ca 59       	subi	r28, 0x9A	; 154
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <LCD_SendCommand>:

void LCD_SendCommand(const uint8 Command){
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	cf 5a       	subi	r28, 0xAF	; 175
    28c2:	d0 40       	sbci	r29, 0x00	; 0
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 55       	subi	r30, 0x57	; 87
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 83       	st	Z, r24
	switch(CONTROL_PORT){
    28d6:	80 91 47 02 	lds	r24, 0x0247
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	c2 55       	subi	r28, 0x52	; 82
    28e0:	df 4f       	sbci	r29, 0xFF	; 255
    28e2:	39 83       	std	Y+1, r19	; 0x01
    28e4:	28 83       	st	Y, r18
    28e6:	ce 5a       	subi	r28, 0xAE	; 174
    28e8:	d0 40       	sbci	r29, 0x00	; 0
    28ea:	c2 55       	subi	r28, 0x52	; 82
    28ec:	df 4f       	sbci	r29, 0xFF	; 255
    28ee:	88 81       	ld	r24, Y
    28f0:	99 81       	ldd	r25, Y+1	; 0x01
    28f2:	ce 5a       	subi	r28, 0xAE	; 174
    28f4:	d0 40       	sbci	r29, 0x00	; 0
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <LCD_SendCommand+0x4a>
    28fc:	52 c0       	rjmp	.+164    	; 0x29a2 <LCD_SendCommand+0xee>
    28fe:	c2 55       	subi	r28, 0x52	; 82
    2900:	df 4f       	sbci	r29, 0xFF	; 255
    2902:	e8 81       	ld	r30, Y
    2904:	f9 81       	ldd	r31, Y+1	; 0x01
    2906:	ce 5a       	subi	r28, 0xAE	; 174
    2908:	d0 40       	sbci	r29, 0x00	; 0
    290a:	e2 30       	cpi	r30, 0x02	; 2
    290c:	f1 05       	cpc	r31, r1
    290e:	54 f4       	brge	.+20     	; 0x2924 <LCD_SendCommand+0x70>
    2910:	c2 55       	subi	r28, 0x52	; 82
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	28 81       	ld	r18, Y
    2916:	39 81       	ldd	r19, Y+1	; 0x01
    2918:	ce 5a       	subi	r28, 0xAE	; 174
    291a:	d0 40       	sbci	r29, 0x00	; 0
    291c:	21 15       	cp	r18, r1
    291e:	31 05       	cpc	r19, r1
    2920:	b1 f0       	breq	.+44     	; 0x294e <LCD_SendCommand+0x9a>
    2922:	bb c0       	rjmp	.+374    	; 0x2a9a <LCD_SendCommand+0x1e6>
    2924:	c2 55       	subi	r28, 0x52	; 82
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	88 81       	ld	r24, Y
    292a:	99 81       	ldd	r25, Y+1	; 0x01
    292c:	ce 5a       	subi	r28, 0xAE	; 174
    292e:	d0 40       	sbci	r29, 0x00	; 0
    2930:	82 30       	cpi	r24, 0x02	; 2
    2932:	91 05       	cpc	r25, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <LCD_SendCommand+0x84>
    2936:	5f c0       	rjmp	.+190    	; 0x29f6 <LCD_SendCommand+0x142>
    2938:	c2 55       	subi	r28, 0x52	; 82
    293a:	df 4f       	sbci	r29, 0xFF	; 255
    293c:	e8 81       	ld	r30, Y
    293e:	f9 81       	ldd	r31, Y+1	; 0x01
    2940:	ce 5a       	subi	r28, 0xAE	; 174
    2942:	d0 40       	sbci	r29, 0x00	; 0
    2944:	e3 30       	cpi	r30, 0x03	; 3
    2946:	f1 05       	cpc	r31, r1
    2948:	09 f4       	brne	.+2      	; 0x294c <LCD_SendCommand+0x98>
    294a:	7f c0       	rjmp	.+254    	; 0x2a4a <LCD_SendCommand+0x196>
    294c:	a6 c0       	rjmp	.+332    	; 0x2a9a <LCD_SendCommand+0x1e6>
		case PortA:
			CLEAR_BIT(PORTA, RS_PIN);
    294e:	ab e3       	ldi	r26, 0x3B	; 59
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	eb e3       	ldi	r30, 0x3B	; 59
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	80 91 48 02 	lds	r24, 0x0248
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <LCD_SendCommand+0xb8>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	2a 95       	dec	r18
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <LCD_SendCommand+0xb4>
    2970:	80 95       	com	r24
    2972:	84 23       	and	r24, r20
    2974:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA, RW_PIN);
    2976:	ab e3       	ldi	r26, 0x3B	; 59
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	eb e3       	ldi	r30, 0x3B	; 59
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	48 2f       	mov	r20, r24
    2982:	80 91 49 02 	lds	r24, 0x0249
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <LCD_SendCommand+0xe2>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <LCD_SendCommand+0xde>
    299a:	80 95       	com	r24
    299c:	84 23       	and	r24, r20
    299e:	8c 93       	st	X, r24
    29a0:	7c c0       	rjmp	.+248    	; 0x2a9a <LCD_SendCommand+0x1e6>
			break;
		case PortB:
			CLEAR_BIT(PORTB, RS_PIN);
    29a2:	a8 e3       	ldi	r26, 0x38	; 56
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e8 e3       	ldi	r30, 0x38	; 56
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	48 2f       	mov	r20, r24
    29ae:	80 91 48 02 	lds	r24, 0x0248
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <LCD_SendCommand+0x10c>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	2a 95       	dec	r18
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <LCD_SendCommand+0x108>
    29c4:	80 95       	com	r24
    29c6:	84 23       	and	r24, r20
    29c8:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB, RW_PIN);
    29ca:	a8 e3       	ldi	r26, 0x38	; 56
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e8 e3       	ldi	r30, 0x38	; 56
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	48 2f       	mov	r20, r24
    29d6:	80 91 49 02 	lds	r24, 0x0249
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 2e       	mov	r0, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <LCD_SendCommand+0x136>
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	0a 94       	dec	r0
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <LCD_SendCommand+0x132>
    29ee:	80 95       	com	r24
    29f0:	84 23       	and	r24, r20
    29f2:	8c 93       	st	X, r24
    29f4:	52 c0       	rjmp	.+164    	; 0x2a9a <LCD_SendCommand+0x1e6>
			break;
		case PortC:
			CLEAR_BIT(PORTC, RS_PIN);
    29f6:	a5 e3       	ldi	r26, 0x35	; 53
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e5 e3       	ldi	r30, 0x35	; 53
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	48 2f       	mov	r20, r24
    2a02:	80 91 48 02 	lds	r24, 0x0248
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <LCD_SendCommand+0x160>
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	2a 95       	dec	r18
    2a16:	e2 f7       	brpl	.-8      	; 0x2a10 <LCD_SendCommand+0x15c>
    2a18:	80 95       	com	r24
    2a1a:	84 23       	and	r24, r20
    2a1c:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC, RW_PIN);
    2a1e:	a5 e3       	ldi	r26, 0x35	; 53
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e5 e3       	ldi	r30, 0x35	; 53
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	80 91 49 02 	lds	r24, 0x0249
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 2e       	mov	r0, r18
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <LCD_SendCommand+0x18a>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <LCD_SendCommand+0x186>
    2a42:	80 95       	com	r24
    2a44:	84 23       	and	r24, r20
    2a46:	8c 93       	st	X, r24
    2a48:	28 c0       	rjmp	.+80     	; 0x2a9a <LCD_SendCommand+0x1e6>
			break;
		case PortD:
			CLEAR_BIT(PORTD, RS_PIN);
    2a4a:	a2 e3       	ldi	r26, 0x32	; 50
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e2 e3       	ldi	r30, 0x32	; 50
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	48 2f       	mov	r20, r24
    2a56:	80 91 48 02 	lds	r24, 0x0248
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <LCD_SendCommand+0x1b4>
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	2a 95       	dec	r18
    2a6a:	e2 f7       	brpl	.-8      	; 0x2a64 <LCD_SendCommand+0x1b0>
    2a6c:	80 95       	com	r24
    2a6e:	84 23       	and	r24, r20
    2a70:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD, RW_PIN);
    2a72:	a2 e3       	ldi	r26, 0x32	; 50
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e2 e3       	ldi	r30, 0x32	; 50
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	48 2f       	mov	r20, r24
    2a7e:	80 91 49 02 	lds	r24, 0x0249
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <LCD_SendCommand+0x1dc>
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	2a 95       	dec	r18
    2a92:	e2 f7       	brpl	.-8      	; 0x2a8c <LCD_SendCommand+0x1d8>
    2a94:	80 95       	com	r24
    2a96:	84 23       	and	r24, r20
    2a98:	8c 93       	st	X, r24
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	eb 55       	subi	r30, 0x5B	; 91
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e8       	ldi	r26, 0x80	; 128
    2aa6:	bf e3       	ldi	r27, 0x3F	; 63
    2aa8:	80 83       	st	Z, r24
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	a2 83       	std	Z+2, r26	; 0x02
    2aae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	0f 55       	subi	r16, 0x5F	; 95
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	eb 55       	subi	r30, 0x5B	; 91
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	2b ea       	ldi	r18, 0xAB	; 171
    2ac6:	3a ea       	ldi	r19, 0xAA	; 170
    2ac8:	4a ea       	ldi	r20, 0xAA	; 170
    2aca:	50 e4       	ldi	r21, 0x40	; 64
    2acc:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	80 83       	st	Z, r24
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	a2 83       	std	Z+2, r26	; 0x02
    2adc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ef 55       	subi	r30, 0x5F	; 95
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	34 f4       	brge	.+12     	; 0x2b08 <LCD_SendCommand+0x254>
		__ticks = 1;
    2afc:	fe 01       	movw	r30, r28
    2afe:	e0 56       	subi	r30, 0x60	; 96
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 83       	st	Z, r24
    2b06:	e0 c0       	rjmp	.+448    	; 0x2cc8 <LCD_SendCommand+0x414>
	else if (__tmp > 255)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ef 55       	subi	r30, 0x5F	; 95
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	53 e4       	ldi	r21, 0x43	; 67
    2b1e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <LCD_SendCommand+0x274>
    2b26:	c0 c0       	rjmp	.+384    	; 0x2ca8 <LCD_SendCommand+0x3f4>
	{
		_delay_ms(__us / 1000.0);
    2b28:	fe 01       	movw	r30, r28
    2b2a:	eb 55       	subi	r30, 0x5B	; 91
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	4a e7       	ldi	r20, 0x7A	; 122
    2b3c:	54 e4       	ldi	r21, 0x44	; 68
    2b3e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	fe 01       	movw	r30, r28
    2b48:	e4 56       	subi	r30, 0x64	; 100
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 83       	st	Z, r24
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	a2 83       	std	Z+2, r26	; 0x02
    2b52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	8e 01       	movw	r16, r28
    2b56:	08 56       	subi	r16, 0x68	; 104
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e4 56       	subi	r30, 0x64	; 100
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	60 81       	ld	r22, Z
    2b62:	71 81       	ldd	r23, Z+1	; 0x01
    2b64:	82 81       	ldd	r24, Z+2	; 0x02
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a e7       	ldi	r20, 0x7A	; 122
    2b6e:	55 e4       	ldi	r21, 0x45	; 69
    2b70:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	f8 01       	movw	r30, r16
    2b7a:	80 83       	st	Z, r24
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	a2 83       	std	Z+2, r26	; 0x02
    2b80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b82:	fe 01       	movw	r30, r28
    2b84:	e8 56       	subi	r30, 0x68	; 104
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	44 f4       	brge	.+16     	; 0x2bb0 <LCD_SendCommand+0x2fc>
		__ticks = 1;
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ea 56       	subi	r30, 0x6A	; 106
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	64 c0       	rjmp	.+200    	; 0x2c78 <LCD_SendCommand+0x3c4>
	else if (__tmp > 65535)
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e8 56       	subi	r30, 0x68	; 104
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	3f ef       	ldi	r19, 0xFF	; 255
    2bc2:	4f e7       	ldi	r20, 0x7F	; 127
    2bc4:	57 e4       	ldi	r21, 0x47	; 71
    2bc6:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2bca:	18 16       	cp	r1, r24
    2bcc:	0c f0       	brlt	.+2      	; 0x2bd0 <LCD_SendCommand+0x31c>
    2bce:	43 c0       	rjmp	.+134    	; 0x2c56 <LCD_SendCommand+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e4 56       	subi	r30, 0x64	; 100
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8e 01       	movw	r16, r28
    2bf0:	0a 56       	subi	r16, 0x6A	; 106
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	1f c0       	rjmp	.+62     	; 0x2c46 <LCD_SendCommand+0x392>
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ec 56       	subi	r30, 0x6C	; 108
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 e9       	ldi	r24, 0x90	; 144
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	fe 01       	movw	r30, r28
    2c18:	ec 56       	subi	r30, 0x6C	; 108
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_SendCommand+0x36c>
    2c24:	fe 01       	movw	r30, r28
    2c26:	ec 56       	subi	r30, 0x6C	; 108
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2e:	de 01       	movw	r26, r28
    2c30:	aa 56       	subi	r26, 0x6A	; 106
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	ea 56       	subi	r30, 0x6A	; 106
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	11 96       	adiw	r26, 0x01	; 1
    2c42:	9c 93       	st	X, r25
    2c44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	fe 01       	movw	r30, r28
    2c48:	ea 56       	subi	r30, 0x6A	; 106
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	d1 f6       	brne	.-76     	; 0x2c08 <LCD_SendCommand+0x354>
    2c54:	4b c0       	rjmp	.+150    	; 0x2cec <LCD_SendCommand+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c56:	8e 01       	movw	r16, r28
    2c58:	0a 56       	subi	r16, 0x6A	; 106
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e8 56       	subi	r30, 0x68	; 104
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	f8 01       	movw	r30, r16
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	80 83       	st	Z, r24
    2c78:	de 01       	movw	r26, r28
    2c7a:	ae 56       	subi	r26, 0x6E	; 110
    2c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ea 56       	subi	r30, 0x6A	; 106
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	11 96       	adiw	r26, 0x01	; 1
    2c8a:	9c 93       	st	X, r25
    2c8c:	8e 93       	st	-X, r24
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ee 56       	subi	r30, 0x6E	; 110
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_SendCommand+0x3e4>
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	ee 56       	subi	r30, 0x6E	; 110
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    2ca6:	22 c0       	rjmp	.+68     	; 0x2cec <LCD_SendCommand+0x438>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ca8:	8e 01       	movw	r16, r28
    2caa:	00 56       	subi	r16, 0x60	; 96
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ef 55       	subi	r30, 0x5F	; 95
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	80 83       	st	Z, r24
    2cc8:	de 01       	movw	r26, r28
    2cca:	af 56       	subi	r26, 0x6F	; 111
    2ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e0 56       	subi	r30, 0x60	; 96
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ef 56       	subi	r30, 0x6F	; 111
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	8a 95       	dec	r24
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_SendCommand+0x42c>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ef 56       	subi	r30, 0x6F	; 111
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 83       	st	Z, r24
			break;
	}
	_delay_us(1);
	switch(LCD_PORT){
    2cec:	80 91 46 02 	lds	r24, 0x0246
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	c4 55       	subi	r28, 0x54	; 84
    2cf6:	df 4f       	sbci	r29, 0xFF	; 255
    2cf8:	39 83       	std	Y+1, r19	; 0x01
    2cfa:	28 83       	st	Y, r18
    2cfc:	cc 5a       	subi	r28, 0xAC	; 172
    2cfe:	d0 40       	sbci	r29, 0x00	; 0
    2d00:	c4 55       	subi	r28, 0x54	; 84
    2d02:	df 4f       	sbci	r29, 0xFF	; 255
    2d04:	88 81       	ld	r24, Y
    2d06:	99 81       	ldd	r25, Y+1	; 0x01
    2d08:	cc 5a       	subi	r28, 0xAC	; 172
    2d0a:	d0 40       	sbci	r29, 0x00	; 0
    2d0c:	81 30       	cpi	r24, 0x01	; 1
    2d0e:	91 05       	cpc	r25, r1
    2d10:	71 f1       	breq	.+92     	; 0x2d6e <LCD_SendCommand+0x4ba>
    2d12:	c4 55       	subi	r28, 0x54	; 84
    2d14:	df 4f       	sbci	r29, 0xFF	; 255
    2d16:	e8 81       	ld	r30, Y
    2d18:	f9 81       	ldd	r31, Y+1	; 0x01
    2d1a:	cc 5a       	subi	r28, 0xAC	; 172
    2d1c:	d0 40       	sbci	r29, 0x00	; 0
    2d1e:	e2 30       	cpi	r30, 0x02	; 2
    2d20:	f1 05       	cpc	r31, r1
    2d22:	54 f4       	brge	.+20     	; 0x2d38 <LCD_SendCommand+0x484>
    2d24:	c4 55       	subi	r28, 0x54	; 84
    2d26:	df 4f       	sbci	r29, 0xFF	; 255
    2d28:	28 81       	ld	r18, Y
    2d2a:	39 81       	ldd	r19, Y+1	; 0x01
    2d2c:	cc 5a       	subi	r28, 0xAC	; 172
    2d2e:	d0 40       	sbci	r29, 0x00	; 0
    2d30:	21 15       	cp	r18, r1
    2d32:	31 05       	cpc	r19, r1
    2d34:	a1 f0       	breq	.+40     	; 0x2d5e <LCD_SendCommand+0x4aa>
    2d36:	32 c0       	rjmp	.+100    	; 0x2d9c <LCD_SendCommand+0x4e8>
    2d38:	c4 55       	subi	r28, 0x54	; 84
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	88 81       	ld	r24, Y
    2d3e:	99 81       	ldd	r25, Y+1	; 0x01
    2d40:	cc 5a       	subi	r28, 0xAC	; 172
    2d42:	d0 40       	sbci	r29, 0x00	; 0
    2d44:	82 30       	cpi	r24, 0x02	; 2
    2d46:	91 05       	cpc	r25, r1
    2d48:	d1 f0       	breq	.+52     	; 0x2d7e <LCD_SendCommand+0x4ca>
    2d4a:	c4 55       	subi	r28, 0x54	; 84
    2d4c:	df 4f       	sbci	r29, 0xFF	; 255
    2d4e:	e8 81       	ld	r30, Y
    2d50:	f9 81       	ldd	r31, Y+1	; 0x01
    2d52:	cc 5a       	subi	r28, 0xAC	; 172
    2d54:	d0 40       	sbci	r29, 0x00	; 0
    2d56:	e3 30       	cpi	r30, 0x03	; 3
    2d58:	f1 05       	cpc	r31, r1
    2d5a:	c9 f0       	breq	.+50     	; 0x2d8e <LCD_SendCommand+0x4da>
    2d5c:	1f c0       	rjmp	.+62     	; 0x2d9c <LCD_SendCommand+0x4e8>
		case PortA:
			PORTA = Command;
    2d5e:	eb e3       	ldi	r30, 0x3B	; 59
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	de 01       	movw	r26, r28
    2d64:	a7 55       	subi	r26, 0x57	; 87
    2d66:	bf 4f       	sbci	r27, 0xFF	; 255
    2d68:	8c 91       	ld	r24, X
    2d6a:	80 83       	st	Z, r24
    2d6c:	17 c0       	rjmp	.+46     	; 0x2d9c <LCD_SendCommand+0x4e8>
			break;
		case PortB:
			PORTB = Command;
    2d6e:	e8 e3       	ldi	r30, 0x38	; 56
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	de 01       	movw	r26, r28
    2d74:	a7 55       	subi	r26, 0x57	; 87
    2d76:	bf 4f       	sbci	r27, 0xFF	; 255
    2d78:	8c 91       	ld	r24, X
    2d7a:	80 83       	st	Z, r24
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <LCD_SendCommand+0x4e8>
			break;
		case PortC:
			PORTC = Command;
    2d7e:	e5 e3       	ldi	r30, 0x35	; 53
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	de 01       	movw	r26, r28
    2d84:	a7 55       	subi	r26, 0x57	; 87
    2d86:	bf 4f       	sbci	r27, 0xFF	; 255
    2d88:	8c 91       	ld	r24, X
    2d8a:	80 83       	st	Z, r24
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <LCD_SendCommand+0x4e8>
			break;
		case PortD:
			PORTD = Command;
    2d8e:	e2 e3       	ldi	r30, 0x32	; 50
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	de 01       	movw	r26, r28
    2d94:	a7 55       	subi	r26, 0x57	; 87
    2d96:	bf 4f       	sbci	r27, 0xFF	; 255
    2d98:	8c 91       	ld	r24, X
    2d9a:	80 83       	st	Z, r24
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 57       	subi	r30, 0x73	; 115
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 e8       	ldi	r26, 0x80	; 128
    2da8:	bf e3       	ldi	r27, 0x3F	; 63
    2daa:	80 83       	st	Z, r24
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	a2 83       	std	Z+2, r26	; 0x02
    2db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2db2:	8e 01       	movw	r16, r28
    2db4:	07 57       	subi	r16, 0x77	; 119
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 57       	subi	r30, 0x73	; 115
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	2b ea       	ldi	r18, 0xAB	; 171
    2dc8:	3a ea       	ldi	r19, 0xAA	; 170
    2dca:	4a ea       	ldi	r20, 0xAA	; 170
    2dcc:	50 e4       	ldi	r21, 0x40	; 64
    2dce:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	80 83       	st	Z, r24
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	a2 83       	std	Z+2, r26	; 0x02
    2dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 57       	subi	r30, 0x77	; 119
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	34 f4       	brge	.+12     	; 0x2e0a <LCD_SendCommand+0x556>
		__ticks = 1;
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e8 57       	subi	r30, 0x78	; 120
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 83       	st	Z, r24
    2e08:	e0 c0       	rjmp	.+448    	; 0x2fca <LCD_SendCommand+0x716>
	else if (__tmp > 255)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 57       	subi	r30, 0x77	; 119
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	53 e4       	ldi	r21, 0x43	; 67
    2e20:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	0c f0       	brlt	.+2      	; 0x2e2a <LCD_SendCommand+0x576>
    2e28:	c0 c0       	rjmp	.+384    	; 0x2faa <LCD_SendCommand+0x6f6>
	{
		_delay_ms(__us / 1000.0);
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e3 57       	subi	r30, 0x73	; 115
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4a e7       	ldi	r20, 0x7A	; 122
    2e3e:	54 e4       	ldi	r21, 0x44	; 68
    2e40:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ec 57       	subi	r30, 0x7C	; 124
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 83       	st	Z, r24
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	a2 83       	std	Z+2, r26	; 0x02
    2e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	8e 01       	movw	r16, r28
    2e58:	00 58       	subi	r16, 0x80	; 128
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ec 57       	subi	r30, 0x7C	; 124
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a e7       	ldi	r20, 0x7A	; 122
    2e70:	55 e4       	ldi	r21, 0x45	; 69
    2e72:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	80 83       	st	Z, r24
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	a2 83       	std	Z+2, r26	; 0x02
    2e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e84:	fe 01       	movw	r30, r28
    2e86:	e0 58       	subi	r30, 0x80	; 128
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	44 f4       	brge	.+16     	; 0x2eb2 <LCD_SendCommand+0x5fe>
		__ticks = 1;
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e2 58       	subi	r30, 0x82	; 130
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
    2eb0:	64 c0       	rjmp	.+200    	; 0x2f7a <LCD_SendCommand+0x6c6>
	else if (__tmp > 65535)
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e0 58       	subi	r30, 0x80	; 128
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	60 81       	ld	r22, Z
    2eba:	71 81       	ldd	r23, Z+1	; 0x01
    2ebc:	82 81       	ldd	r24, Z+2	; 0x02
    2ebe:	93 81       	ldd	r25, Z+3	; 0x03
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	0c f0       	brlt	.+2      	; 0x2ed2 <LCD_SendCommand+0x61e>
    2ed0:	43 c0       	rjmp	.+134    	; 0x2f58 <LCD_SendCommand+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ec 57       	subi	r30, 0x7C	; 124
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	8e 01       	movw	r16, r28
    2ef2:	02 58       	subi	r16, 0x82	; 130
    2ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	f8 01       	movw	r30, r16
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	1f c0       	rjmp	.+62     	; 0x2f48 <LCD_SendCommand+0x694>
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e4 58       	subi	r30, 0x84	; 132
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 e9       	ldi	r24, 0x90	; 144
    2f12:	91 e0       	ldi	r25, 0x01	; 1
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e4 58       	subi	r30, 0x84	; 132
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_SendCommand+0x66e>
    2f26:	fe 01       	movw	r30, r28
    2f28:	e4 58       	subi	r30, 0x84	; 132
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	de 01       	movw	r26, r28
    2f32:	a2 58       	subi	r26, 0x82	; 130
    2f34:	bf 4f       	sbci	r27, 0xFF	; 255
    2f36:	fe 01       	movw	r30, r28
    2f38:	e2 58       	subi	r30, 0x82	; 130
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	11 96       	adiw	r26, 0x01	; 1
    2f44:	9c 93       	st	X, r25
    2f46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e2 58       	subi	r30, 0x82	; 130
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	d1 f6       	brne	.-76     	; 0x2f0a <LCD_SendCommand+0x656>
    2f56:	4b c0       	rjmp	.+150    	; 0x2fee <LCD_SendCommand+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	8e 01       	movw	r16, r28
    2f5a:	02 58       	subi	r16, 0x82	; 130
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e0 58       	subi	r30, 0x80	; 128
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	f8 01       	movw	r30, r16
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
    2f7a:	de 01       	movw	r26, r28
    2f7c:	a6 58       	subi	r26, 0x86	; 134
    2f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f80:	fe 01       	movw	r30, r28
    2f82:	e2 58       	subi	r30, 0x82	; 130
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	9c 93       	st	X, r25
    2f8e:	8e 93       	st	-X, r24
    2f90:	fe 01       	movw	r30, r28
    2f92:	e6 58       	subi	r30, 0x86	; 134
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_SendCommand+0x6e6>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e6 58       	subi	r30, 0x86	; 134
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	22 c0       	rjmp	.+68     	; 0x2fee <LCD_SendCommand+0x73a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2faa:	8e 01       	movw	r16, r28
    2fac:	08 57       	subi	r16, 0x78	; 120
    2fae:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e7 57       	subi	r30, 0x77	; 119
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	80 83       	st	Z, r24
    2fca:	de 01       	movw	r26, r28
    2fcc:	a7 58       	subi	r26, 0x87	; 135
    2fce:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e8 57       	subi	r30, 0x78	; 120
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 58       	subi	r30, 0x87	; 135
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8a 95       	dec	r24
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <LCD_SendCommand+0x72e>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e7 58       	subi	r30, 0x87	; 135
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 83       	st	Z, r24
			break;
	}
	_delay_us(1);
	switch(CONTROL_PORT){
    2fee:	80 91 47 02 	lds	r24, 0x0247
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	c6 55       	subi	r28, 0x56	; 86
    2ff8:	df 4f       	sbci	r29, 0xFF	; 255
    2ffa:	39 83       	std	Y+1, r19	; 0x01
    2ffc:	28 83       	st	Y, r18
    2ffe:	ca 5a       	subi	r28, 0xAA	; 170
    3000:	d0 40       	sbci	r29, 0x00	; 0
    3002:	c6 55       	subi	r28, 0x56	; 86
    3004:	df 4f       	sbci	r29, 0xFF	; 255
    3006:	88 81       	ld	r24, Y
    3008:	99 81       	ldd	r25, Y+1	; 0x01
    300a:	ca 5a       	subi	r28, 0xAA	; 170
    300c:	d0 40       	sbci	r29, 0x00	; 0
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	91 05       	cpc	r25, r1
    3012:	09 f4       	brne	.+2      	; 0x3016 <LCD_SendCommand+0x762>
    3014:	7a c1       	rjmp	.+756    	; 0x330a <LCD_SendCommand+0xa56>
    3016:	c6 55       	subi	r28, 0x56	; 86
    3018:	df 4f       	sbci	r29, 0xFF	; 255
    301a:	e8 81       	ld	r30, Y
    301c:	f9 81       	ldd	r31, Y+1	; 0x01
    301e:	ca 5a       	subi	r28, 0xAA	; 170
    3020:	d0 40       	sbci	r29, 0x00	; 0
    3022:	e2 30       	cpi	r30, 0x02	; 2
    3024:	f1 05       	cpc	r31, r1
    3026:	54 f4       	brge	.+20     	; 0x303c <LCD_SendCommand+0x788>
    3028:	c6 55       	subi	r28, 0x56	; 86
    302a:	df 4f       	sbci	r29, 0xFF	; 255
    302c:	28 81       	ld	r18, Y
    302e:	39 81       	ldd	r19, Y+1	; 0x01
    3030:	ca 5a       	subi	r28, 0xAA	; 170
    3032:	d0 40       	sbci	r29, 0x00	; 0
    3034:	21 15       	cp	r18, r1
    3036:	31 05       	cpc	r19, r1
    3038:	b1 f0       	breq	.+44     	; 0x3066 <LCD_SendCommand+0x7b2>
    303a:	a4 c4       	rjmp	.+2376   	; 0x3984 <LCD_SendCommand+0x10d0>
    303c:	c6 55       	subi	r28, 0x56	; 86
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	88 81       	ld	r24, Y
    3042:	99 81       	ldd	r25, Y+1	; 0x01
    3044:	ca 5a       	subi	r28, 0xAA	; 170
    3046:	d0 40       	sbci	r29, 0x00	; 0
    3048:	82 30       	cpi	r24, 0x02	; 2
    304a:	91 05       	cpc	r25, r1
    304c:	09 f4       	brne	.+2      	; 0x3050 <LCD_SendCommand+0x79c>
    304e:	af c2       	rjmp	.+1374   	; 0x35ae <LCD_SendCommand+0xcfa>
    3050:	c6 55       	subi	r28, 0x56	; 86
    3052:	df 4f       	sbci	r29, 0xFF	; 255
    3054:	e8 81       	ld	r30, Y
    3056:	f9 81       	ldd	r31, Y+1	; 0x01
    3058:	ca 5a       	subi	r28, 0xAA	; 170
    305a:	d0 40       	sbci	r29, 0x00	; 0
    305c:	e3 30       	cpi	r30, 0x03	; 3
    305e:	f1 05       	cpc	r31, r1
    3060:	09 f4       	brne	.+2      	; 0x3064 <LCD_SendCommand+0x7b0>
    3062:	ab c3       	rjmp	.+1878   	; 0x37ba <LCD_SendCommand+0xf06>
    3064:	8f c4       	rjmp	.+2334   	; 0x3984 <LCD_SendCommand+0x10d0>
	    case PortA:
	    	SET_BIT(PORTA, EN_PIN);
    3066:	ab e3       	ldi	r26, 0x3B	; 59
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	eb e3       	ldi	r30, 0x3B	; 59
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	48 2f       	mov	r20, r24
    3072:	80 91 4a 02 	lds	r24, 0x024A
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <LCD_SendCommand+0x7d0>
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	2a 95       	dec	r18
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <LCD_SendCommand+0x7cc>
    3088:	84 2b       	or	r24, r20
    308a:	8c 93       	st	X, r24
    308c:	fe 01       	movw	r30, r28
    308e:	eb 58       	subi	r30, 0x8B	; 139
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a0 e8       	ldi	r26, 0x80	; 128
    3098:	bf e3       	ldi	r27, 0x3F	; 63
    309a:	80 83       	st	Z, r24
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	a2 83       	std	Z+2, r26	; 0x02
    30a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30a2:	8e 01       	movw	r16, r28
    30a4:	0f 58       	subi	r16, 0x8F	; 143
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 58       	subi	r30, 0x8B	; 139
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	2b ea       	ldi	r18, 0xAB	; 171
    30b8:	3a ea       	ldi	r19, 0xAA	; 170
    30ba:	4a ea       	ldi	r20, 0xAA	; 170
    30bc:	50 e4       	ldi	r21, 0x40	; 64
    30be:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	f8 01       	movw	r30, r16
    30c8:	80 83       	st	Z, r24
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	a2 83       	std	Z+2, r26	; 0x02
    30ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d0:	fe 01       	movw	r30, r28
    30d2:	ef 58       	subi	r30, 0x8F	; 143
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e8       	ldi	r20, 0x80	; 128
    30e4:	5f e3       	ldi	r21, 0x3F	; 63
    30e6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    30ea:	88 23       	and	r24, r24
    30ec:	34 f4       	brge	.+12     	; 0x30fa <LCD_SendCommand+0x846>
		__ticks = 1;
    30ee:	fe 01       	movw	r30, r28
    30f0:	e0 59       	subi	r30, 0x90	; 144
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	80 83       	st	Z, r24
    30f8:	e0 c0       	rjmp	.+448    	; 0x32ba <LCD_SendCommand+0xa06>
	else if (__tmp > 255)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ef 58       	subi	r30, 0x8F	; 143
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	53 e4       	ldi	r21, 0x43	; 67
    3110:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	0c f0       	brlt	.+2      	; 0x311a <LCD_SendCommand+0x866>
    3118:	c0 c0       	rjmp	.+384    	; 0x329a <LCD_SendCommand+0x9e6>
	{
		_delay_ms(__us / 1000.0);
    311a:	fe 01       	movw	r30, r28
    311c:	eb 58       	subi	r30, 0x8B	; 139
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	54 e4       	ldi	r21, 0x44	; 68
    3130:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	fe 01       	movw	r30, r28
    313a:	e4 59       	subi	r30, 0x94	; 148
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 83       	st	Z, r24
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	a2 83       	std	Z+2, r26	; 0x02
    3144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	8e 01       	movw	r16, r28
    3148:	08 59       	subi	r16, 0x98	; 152
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	fe 01       	movw	r30, r28
    314e:	e4 59       	subi	r30, 0x94	; 148
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	55 e4       	ldi	r21, 0x45	; 69
    3162:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	f8 01       	movw	r30, r16
    316c:	80 83       	st	Z, r24
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	a2 83       	std	Z+2, r26	; 0x02
    3172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3174:	fe 01       	movw	r30, r28
    3176:	e8 59       	subi	r30, 0x98	; 152
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e8       	ldi	r20, 0x80	; 128
    3188:	5f e3       	ldi	r21, 0x3F	; 63
    318a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    318e:	88 23       	and	r24, r24
    3190:	44 f4       	brge	.+16     	; 0x31a2 <LCD_SendCommand+0x8ee>
		__ticks = 1;
    3192:	fe 01       	movw	r30, r28
    3194:	ea 59       	subi	r30, 0x9A	; 154
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
    31a0:	64 c0       	rjmp	.+200    	; 0x326a <LCD_SendCommand+0x9b6>
	else if (__tmp > 65535)
    31a2:	fe 01       	movw	r30, r28
    31a4:	e8 59       	subi	r30, 0x98	; 152
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	3f ef       	ldi	r19, 0xFF	; 255
    31b4:	4f e7       	ldi	r20, 0x7F	; 127
    31b6:	57 e4       	ldi	r21, 0x47	; 71
    31b8:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    31bc:	18 16       	cp	r1, r24
    31be:	0c f0       	brlt	.+2      	; 0x31c2 <LCD_SendCommand+0x90e>
    31c0:	43 c0       	rjmp	.+134    	; 0x3248 <LCD_SendCommand+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	fe 01       	movw	r30, r28
    31c4:	e4 59       	subi	r30, 0x94	; 148
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	60 81       	ld	r22, Z
    31ca:	71 81       	ldd	r23, Z+1	; 0x01
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	8e 01       	movw	r16, r28
    31e2:	0a 59       	subi	r16, 0x9A	; 154
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	f8 01       	movw	r30, r16
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	1f c0       	rjmp	.+62     	; 0x3238 <LCD_SendCommand+0x984>
    31fa:	fe 01       	movw	r30, r28
    31fc:	ec 59       	subi	r30, 0x9C	; 156
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 e9       	ldi	r24, 0x90	; 144
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3208:	fe 01       	movw	r30, r28
    320a:	ec 59       	subi	r30, 0x9C	; 156
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <LCD_SendCommand+0x95e>
    3216:	fe 01       	movw	r30, r28
    3218:	ec 59       	subi	r30, 0x9C	; 156
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3220:	de 01       	movw	r26, r28
    3222:	aa 59       	subi	r26, 0x9A	; 154
    3224:	bf 4f       	sbci	r27, 0xFF	; 255
    3226:	fe 01       	movw	r30, r28
    3228:	ea 59       	subi	r30, 0x9A	; 154
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	9c 93       	st	X, r25
    3236:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3238:	fe 01       	movw	r30, r28
    323a:	ea 59       	subi	r30, 0x9A	; 154
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	d1 f6       	brne	.-76     	; 0x31fa <LCD_SendCommand+0x946>
    3246:	4b c0       	rjmp	.+150    	; 0x32de <LCD_SendCommand+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3248:	8e 01       	movw	r16, r28
    324a:	0a 59       	subi	r16, 0x9A	; 154
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	fe 01       	movw	r30, r28
    3250:	e8 59       	subi	r30, 0x98	; 152
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	f8 01       	movw	r30, r16
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	80 83       	st	Z, r24
    326a:	de 01       	movw	r26, r28
    326c:	ae 59       	subi	r26, 0x9E	; 158
    326e:	bf 4f       	sbci	r27, 0xFF	; 255
    3270:	fe 01       	movw	r30, r28
    3272:	ea 59       	subi	r30, 0x9A	; 154
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	9c 93       	st	X, r25
    327e:	8e 93       	st	-X, r24
    3280:	fe 01       	movw	r30, r28
    3282:	ee 59       	subi	r30, 0x9E	; 158
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <LCD_SendCommand+0x9d6>
    328e:	fe 01       	movw	r30, r28
    3290:	ee 59       	subi	r30, 0x9E	; 158
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	91 83       	std	Z+1, r25	; 0x01
    3296:	80 83       	st	Z, r24
    3298:	22 c0       	rjmp	.+68     	; 0x32de <LCD_SendCommand+0xa2a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    329a:	8e 01       	movw	r16, r28
    329c:	00 59       	subi	r16, 0x90	; 144
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	ef 58       	subi	r30, 0x8F	; 143
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	60 81       	ld	r22, Z
    32a8:	71 81       	ldd	r23, Z+1	; 0x01
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	93 81       	ldd	r25, Z+3	; 0x03
    32ae:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	f8 01       	movw	r30, r16
    32b8:	80 83       	st	Z, r24
    32ba:	de 01       	movw	r26, r28
    32bc:	af 59       	subi	r26, 0x9F	; 159
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	e0 59       	subi	r30, 0x90	; 144
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 59       	subi	r30, 0x9F	; 159
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	8a 95       	dec	r24
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCD_SendCommand+0xa1e>
    32d6:	fe 01       	movw	r30, r28
    32d8:	ef 59       	subi	r30, 0x9F	; 159
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 83       	st	Z, r24
	    	_delay_us(1);
	    	CLEAR_BIT(PORTA, EN_PIN);
    32de:	ab e3       	ldi	r26, 0x3B	; 59
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	eb e3       	ldi	r30, 0x3B	; 59
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	48 2f       	mov	r20, r24
    32ea:	80 91 4a 02 	lds	r24, 0x024A
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	02 2e       	mov	r0, r18
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <LCD_SendCommand+0xa4a>
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	0a 94       	dec	r0
    3300:	e2 f7       	brpl	.-8      	; 0x32fa <LCD_SendCommand+0xa46>
    3302:	80 95       	com	r24
    3304:	84 23       	and	r24, r20
    3306:	8c 93       	st	X, r24
    3308:	3d c3       	rjmp	.+1658   	; 0x3984 <LCD_SendCommand+0x10d0>
	    	break;
	    case PortB:
	    	SET_BIT(PORTB, EN_PIN);
    330a:	a8 e3       	ldi	r26, 0x38	; 56
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e8 e3       	ldi	r30, 0x38	; 56
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	80 91 4a 02 	lds	r24, 0x024A
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <LCD_SendCommand+0xa74>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	2a 95       	dec	r18
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <LCD_SendCommand+0xa70>
    332c:	84 2b       	or	r24, r20
    332e:	8c 93       	st	X, r24
    3330:	fe 01       	movw	r30, r28
    3332:	e3 5a       	subi	r30, 0xA3	; 163
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a0 e8       	ldi	r26, 0x80	; 128
    333c:	bf e3       	ldi	r27, 0x3F	; 63
    333e:	80 83       	st	Z, r24
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	a2 83       	std	Z+2, r26	; 0x02
    3344:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3346:	8e 01       	movw	r16, r28
    3348:	07 5a       	subi	r16, 0xA7	; 167
    334a:	1f 4f       	sbci	r17, 0xFF	; 255
    334c:	fe 01       	movw	r30, r28
    334e:	e3 5a       	subi	r30, 0xA3	; 163
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	2b ea       	ldi	r18, 0xAB	; 171
    335c:	3a ea       	ldi	r19, 0xAA	; 170
    335e:	4a ea       	ldi	r20, 0xAA	; 170
    3360:	50 e4       	ldi	r21, 0x40	; 64
    3362:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	f8 01       	movw	r30, r16
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	a2 83       	std	Z+2, r26	; 0x02
    3372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3374:	fe 01       	movw	r30, r28
    3376:	e7 5a       	subi	r30, 0xA7	; 167
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e8       	ldi	r20, 0x80	; 128
    3388:	5f e3       	ldi	r21, 0x3F	; 63
    338a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    338e:	88 23       	and	r24, r24
    3390:	34 f4       	brge	.+12     	; 0x339e <LCD_SendCommand+0xaea>
		__ticks = 1;
    3392:	fe 01       	movw	r30, r28
    3394:	e8 5a       	subi	r30, 0xA8	; 168
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 83       	st	Z, r24
    339c:	e0 c0       	rjmp	.+448    	; 0x355e <LCD_SendCommand+0xcaa>
	else if (__tmp > 255)
    339e:	fe 01       	movw	r30, r28
    33a0:	e7 5a       	subi	r30, 0xA7	; 167
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	53 e4       	ldi	r21, 0x43	; 67
    33b4:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    33b8:	18 16       	cp	r1, r24
    33ba:	0c f0       	brlt	.+2      	; 0x33be <LCD_SendCommand+0xb0a>
    33bc:	c0 c0       	rjmp	.+384    	; 0x353e <LCD_SendCommand+0xc8a>
	{
		_delay_ms(__us / 1000.0);
    33be:	fe 01       	movw	r30, r28
    33c0:	e3 5a       	subi	r30, 0xA3	; 163
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	4a e7       	ldi	r20, 0x7A	; 122
    33d2:	54 e4       	ldi	r21, 0x44	; 68
    33d4:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	fe 01       	movw	r30, r28
    33de:	ec 5a       	subi	r30, 0xAC	; 172
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 83       	st	Z, r24
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	a2 83       	std	Z+2, r26	; 0x02
    33e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	8e 01       	movw	r16, r28
    33ec:	00 5b       	subi	r16, 0xB0	; 176
    33ee:	1f 4f       	sbci	r17, 0xFF	; 255
    33f0:	fe 01       	movw	r30, r28
    33f2:	ec 5a       	subi	r30, 0xAC	; 172
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a e7       	ldi	r20, 0x7A	; 122
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	f8 01       	movw	r30, r16
    3410:	80 83       	st	Z, r24
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	a2 83       	std	Z+2, r26	; 0x02
    3416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3418:	fe 01       	movw	r30, r28
    341a:	e0 5b       	subi	r30, 0xB0	; 176
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	60 81       	ld	r22, Z
    3420:	71 81       	ldd	r23, Z+1	; 0x01
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	93 81       	ldd	r25, Z+3	; 0x03
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	44 f4       	brge	.+16     	; 0x3446 <LCD_SendCommand+0xb92>
		__ticks = 1;
    3436:	fe 01       	movw	r30, r28
    3438:	e2 5b       	subi	r30, 0xB2	; 178
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	64 c0       	rjmp	.+200    	; 0x350e <LCD_SendCommand+0xc5a>
	else if (__tmp > 65535)
    3446:	fe 01       	movw	r30, r28
    3448:	e0 5b       	subi	r30, 0xB0	; 176
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	0c f0       	brlt	.+2      	; 0x3466 <LCD_SendCommand+0xbb2>
    3464:	43 c0       	rjmp	.+134    	; 0x34ec <LCD_SendCommand+0xc38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	fe 01       	movw	r30, r28
    3468:	ec 5a       	subi	r30, 0xAC	; 172
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e2       	ldi	r20, 0x20	; 32
    347a:	51 e4       	ldi	r21, 0x41	; 65
    347c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	8e 01       	movw	r16, r28
    3486:	02 5b       	subi	r16, 0xB2	; 178
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	f8 01       	movw	r30, r16
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	1f c0       	rjmp	.+62     	; 0x34dc <LCD_SendCommand+0xc28>
    349e:	fe 01       	movw	r30, r28
    34a0:	e4 5b       	subi	r30, 0xB4	; 180
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 e9       	ldi	r24, 0x90	; 144
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34ac:	fe 01       	movw	r30, r28
    34ae:	e4 5b       	subi	r30, 0xB4	; 180
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <LCD_SendCommand+0xc02>
    34ba:	fe 01       	movw	r30, r28
    34bc:	e4 5b       	subi	r30, 0xB4	; 180
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c4:	de 01       	movw	r26, r28
    34c6:	a2 5b       	subi	r26, 0xB2	; 178
    34c8:	bf 4f       	sbci	r27, 0xFF	; 255
    34ca:	fe 01       	movw	r30, r28
    34cc:	e2 5b       	subi	r30, 0xB2	; 178
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	11 96       	adiw	r26, 0x01	; 1
    34d8:	9c 93       	st	X, r25
    34da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34dc:	fe 01       	movw	r30, r28
    34de:	e2 5b       	subi	r30, 0xB2	; 178
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	d1 f6       	brne	.-76     	; 0x349e <LCD_SendCommand+0xbea>
    34ea:	4b c0       	rjmp	.+150    	; 0x3582 <LCD_SendCommand+0xcce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ec:	8e 01       	movw	r16, r28
    34ee:	02 5b       	subi	r16, 0xB2	; 178
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	fe 01       	movw	r30, r28
    34f4:	e0 5b       	subi	r30, 0xB0	; 176
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	60 81       	ld	r22, Z
    34fa:	71 81       	ldd	r23, Z+1	; 0x01
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	93 81       	ldd	r25, Z+3	; 0x03
    3500:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	f8 01       	movw	r30, r16
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	de 01       	movw	r26, r28
    3510:	a6 5b       	subi	r26, 0xB6	; 182
    3512:	bf 4f       	sbci	r27, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	e2 5b       	subi	r30, 0xB2	; 178
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	11 96       	adiw	r26, 0x01	; 1
    3520:	9c 93       	st	X, r25
    3522:	8e 93       	st	-X, r24
    3524:	fe 01       	movw	r30, r28
    3526:	e6 5b       	subi	r30, 0xB6	; 182
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <LCD_SendCommand+0xc7a>
    3532:	fe 01       	movw	r30, r28
    3534:	e6 5b       	subi	r30, 0xB6	; 182
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
    353c:	22 c0       	rjmp	.+68     	; 0x3582 <LCD_SendCommand+0xcce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    353e:	8e 01       	movw	r16, r28
    3540:	08 5a       	subi	r16, 0xA8	; 168
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	fe 01       	movw	r30, r28
    3546:	e7 5a       	subi	r30, 0xA7	; 167
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	f8 01       	movw	r30, r16
    355c:	80 83       	st	Z, r24
    355e:	de 01       	movw	r26, r28
    3560:	a7 5b       	subi	r26, 0xB7	; 183
    3562:	bf 4f       	sbci	r27, 0xFF	; 255
    3564:	fe 01       	movw	r30, r28
    3566:	e8 5a       	subi	r30, 0xA8	; 168
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	80 81       	ld	r24, Z
    356c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    356e:	fe 01       	movw	r30, r28
    3570:	e7 5b       	subi	r30, 0xB7	; 183
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 81       	ld	r24, Z
    3576:	8a 95       	dec	r24
    3578:	f1 f7       	brne	.-4      	; 0x3576 <LCD_SendCommand+0xcc2>
    357a:	fe 01       	movw	r30, r28
    357c:	e7 5b       	subi	r30, 0xB7	; 183
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 83       	st	Z, r24
	    	_delay_us(1);
	    	CLEAR_BIT(PORTB, EN_PIN);
    3582:	a8 e3       	ldi	r26, 0x38	; 56
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e8 e3       	ldi	r30, 0x38	; 56
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	48 2f       	mov	r20, r24
    358e:	80 91 4a 02 	lds	r24, 0x024A
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	02 2e       	mov	r0, r18
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <LCD_SendCommand+0xcee>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	0a 94       	dec	r0
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <LCD_SendCommand+0xcea>
    35a6:	80 95       	com	r24
    35a8:	84 23       	and	r24, r20
    35aa:	8c 93       	st	X, r24
    35ac:	eb c1       	rjmp	.+982    	; 0x3984 <LCD_SendCommand+0x10d0>
	    	break;
	    case PortC:
	    	SET_BIT(PORTC, EN_PIN);
    35ae:	a5 e3       	ldi	r26, 0x35	; 53
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	e5 e3       	ldi	r30, 0x35	; 53
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	48 2f       	mov	r20, r24
    35ba:	80 91 4a 02 	lds	r24, 0x024A
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <LCD_SendCommand+0xd18>
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	2a 95       	dec	r18
    35ce:	e2 f7       	brpl	.-8      	; 0x35c8 <LCD_SendCommand+0xd14>
    35d0:	84 2b       	or	r24, r20
    35d2:	8c 93       	st	X, r24
    35d4:	fe 01       	movw	r30, r28
    35d6:	eb 5b       	subi	r30, 0xBB	; 187
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	a0 e8       	ldi	r26, 0x80	; 128
    35e0:	bf e3       	ldi	r27, 0x3F	; 63
    35e2:	80 83       	st	Z, r24
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	a2 83       	std	Z+2, r26	; 0x02
    35e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35ea:	8e 01       	movw	r16, r28
    35ec:	0f 5b       	subi	r16, 0xBF	; 191
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	fe 01       	movw	r30, r28
    35f2:	eb 5b       	subi	r30, 0xBB	; 187
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	2b ea       	ldi	r18, 0xAB	; 171
    3600:	3a ea       	ldi	r19, 0xAA	; 170
    3602:	4a ea       	ldi	r20, 0xAA	; 170
    3604:	50 e4       	ldi	r21, 0x40	; 64
    3606:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	f8 01       	movw	r30, r16
    3610:	80 83       	st	Z, r24
    3612:	91 83       	std	Z+1, r25	; 0x01
    3614:	a2 83       	std	Z+2, r26	; 0x02
    3616:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3618:	fe 01       	movw	r30, r28
    361a:	ef 5b       	subi	r30, 0xBF	; 191
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e8       	ldi	r20, 0x80	; 128
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3632:	88 23       	and	r24, r24
    3634:	34 f4       	brge	.+12     	; 0x3642 <LCD_SendCommand+0xd8e>
		__ticks = 1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	fe 01       	movw	r30, r28
    363a:	e0 5c       	subi	r30, 0xC0	; 192
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 83       	st	Z, r24
    3640:	9d c0       	rjmp	.+314    	; 0x377c <LCD_SendCommand+0xec8>
	else if (__tmp > 255)
    3642:	fe 01       	movw	r30, r28
    3644:	ef 5b       	subi	r30, 0xBF	; 191
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	53 e4       	ldi	r21, 0x43	; 67
    3658:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	0c f0       	brlt	.+2      	; 0x3662 <LCD_SendCommand+0xdae>
    3660:	7e c0       	rjmp	.+252    	; 0x375e <LCD_SendCommand+0xeaa>
	{
		_delay_ms(__us / 1000.0);
    3662:	fe 01       	movw	r30, r28
    3664:	eb 5b       	subi	r30, 0xBB	; 187
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	60 81       	ld	r22, Z
    366a:	71 81       	ldd	r23, Z+1	; 0x01
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	93 81       	ldd	r25, Z+3	; 0x03
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a e7       	ldi	r20, 0x7A	; 122
    3676:	54 e4       	ldi	r21, 0x44	; 68
    3678:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	8c af       	std	Y+60, r24	; 0x3c
    3682:	9d af       	std	Y+61, r25	; 0x3d
    3684:	ae af       	std	Y+62, r26	; 0x3e
    3686:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3688:	6c ad       	ldd	r22, Y+60	; 0x3c
    368a:	7d ad       	ldd	r23, Y+61	; 0x3d
    368c:	8e ad       	ldd	r24, Y+62	; 0x3e
    368e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	4a e7       	ldi	r20, 0x7A	; 122
    3696:	55 e4       	ldi	r21, 0x45	; 69
    3698:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	88 af       	std	Y+56, r24	; 0x38
    36a2:	99 af       	std	Y+57, r25	; 0x39
    36a4:	aa af       	std	Y+58, r26	; 0x3a
    36a6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    36a8:	68 ad       	ldd	r22, Y+56	; 0x38
    36aa:	79 ad       	ldd	r23, Y+57	; 0x39
    36ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    36ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e8       	ldi	r20, 0x80	; 128
    36b6:	5f e3       	ldi	r21, 0x3F	; 63
    36b8:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    36bc:	88 23       	and	r24, r24
    36be:	2c f4       	brge	.+10     	; 0x36ca <LCD_SendCommand+0xe16>
		__ticks = 1;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	9f ab       	std	Y+55, r25	; 0x37
    36c6:	8e ab       	std	Y+54, r24	; 0x36
    36c8:	3f c0       	rjmp	.+126    	; 0x3748 <LCD_SendCommand+0xe94>
	else if (__tmp > 65535)
    36ca:	68 ad       	ldd	r22, Y+56	; 0x38
    36cc:	79 ad       	ldd	r23, Y+57	; 0x39
    36ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    36d0:	9b ad       	ldd	r25, Y+59	; 0x3b
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	3f ef       	ldi	r19, 0xFF	; 255
    36d6:	4f e7       	ldi	r20, 0x7F	; 127
    36d8:	57 e4       	ldi	r21, 0x47	; 71
    36da:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    36de:	18 16       	cp	r1, r24
    36e0:	4c f5       	brge	.+82     	; 0x3734 <LCD_SendCommand+0xe80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    36e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    36e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    36e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e2       	ldi	r20, 0x20	; 32
    36f0:	51 e4       	ldi	r21, 0x41	; 65
    36f2:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	9f ab       	std	Y+55, r25	; 0x37
    3708:	8e ab       	std	Y+54, r24	; 0x36
    370a:	0f c0       	rjmp	.+30     	; 0x372a <LCD_SendCommand+0xe76>
    370c:	80 e9       	ldi	r24, 0x90	; 144
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	9d ab       	std	Y+53, r25	; 0x35
    3712:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3714:	8c a9       	ldd	r24, Y+52	; 0x34
    3716:	9d a9       	ldd	r25, Y+53	; 0x35
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <LCD_SendCommand+0xe64>
    371c:	9d ab       	std	Y+53, r25	; 0x35
    371e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3720:	8e a9       	ldd	r24, Y+54	; 0x36
    3722:	9f a9       	ldd	r25, Y+55	; 0x37
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	9f ab       	std	Y+55, r25	; 0x37
    3728:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372a:	8e a9       	ldd	r24, Y+54	; 0x36
    372c:	9f a9       	ldd	r25, Y+55	; 0x37
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	69 f7       	brne	.-38     	; 0x370c <LCD_SendCommand+0xe58>
    3732:	2d c0       	rjmp	.+90     	; 0x378e <LCD_SendCommand+0xeda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3734:	68 ad       	ldd	r22, Y+56	; 0x38
    3736:	79 ad       	ldd	r23, Y+57	; 0x39
    3738:	8a ad       	ldd	r24, Y+58	; 0x3a
    373a:	9b ad       	ldd	r25, Y+59	; 0x3b
    373c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	9f ab       	std	Y+55, r25	; 0x37
    3746:	8e ab       	std	Y+54, r24	; 0x36
    3748:	8e a9       	ldd	r24, Y+54	; 0x36
    374a:	9f a9       	ldd	r25, Y+55	; 0x37
    374c:	9b ab       	std	Y+51, r25	; 0x33
    374e:	8a ab       	std	Y+50, r24	; 0x32
    3750:	8a a9       	ldd	r24, Y+50	; 0x32
    3752:	9b a9       	ldd	r25, Y+51	; 0x33
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_SendCommand+0xea0>
    3758:	9b ab       	std	Y+51, r25	; 0x33
    375a:	8a ab       	std	Y+50, r24	; 0x32
    375c:	18 c0       	rjmp	.+48     	; 0x378e <LCD_SendCommand+0xeda>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    375e:	fe 01       	movw	r30, r28
    3760:	ef 5b       	subi	r30, 0xBF	; 191
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	fe 01       	movw	r30, r28
    3776:	e0 5c       	subi	r30, 0xC0	; 192
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 83       	st	Z, r24
    377c:	fe 01       	movw	r30, r28
    377e:	e0 5c       	subi	r30, 0xC0	; 192
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	80 81       	ld	r24, Z
    3784:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3786:	89 a9       	ldd	r24, Y+49	; 0x31
    3788:	8a 95       	dec	r24
    378a:	f1 f7       	brne	.-4      	; 0x3788 <LCD_SendCommand+0xed4>
    378c:	89 ab       	std	Y+49, r24	; 0x31
	    	_delay_us(1);
	    	CLEAR_BIT(PORTC, EN_PIN);
    378e:	a5 e3       	ldi	r26, 0x35	; 53
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	e5 e3       	ldi	r30, 0x35	; 53
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	48 2f       	mov	r20, r24
    379a:	80 91 4a 02 	lds	r24, 0x024A
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	02 2e       	mov	r0, r18
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <LCD_SendCommand+0xefa>
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	0a 94       	dec	r0
    37b0:	e2 f7       	brpl	.-8      	; 0x37aa <LCD_SendCommand+0xef6>
    37b2:	80 95       	com	r24
    37b4:	84 23       	and	r24, r20
    37b6:	8c 93       	st	X, r24
    37b8:	e5 c0       	rjmp	.+458    	; 0x3984 <LCD_SendCommand+0x10d0>
	    	break;
	    case PortD:
	    	SET_BIT(PORTD, EN_PIN);
    37ba:	a2 e3       	ldi	r26, 0x32	; 50
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	e2 e3       	ldi	r30, 0x32	; 50
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	48 2f       	mov	r20, r24
    37c6:	80 91 4a 02 	lds	r24, 0x024A
    37ca:	28 2f       	mov	r18, r24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <LCD_SendCommand+0xf24>
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	2a 95       	dec	r18
    37da:	e2 f7       	brpl	.-8      	; 0x37d4 <LCD_SendCommand+0xf20>
    37dc:	84 2b       	or	r24, r20
    37de:	8c 93       	st	X, r24
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	a0 e8       	ldi	r26, 0x80	; 128
    37e6:	bf e3       	ldi	r27, 0x3F	; 63
    37e8:	8d a7       	std	Y+45, r24	; 0x2d
    37ea:	9e a7       	std	Y+46, r25	; 0x2e
    37ec:	af a7       	std	Y+47, r26	; 0x2f
    37ee:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    37f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    37f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f6:	98 a9       	ldd	r25, Y+48	; 0x30
    37f8:	2b ea       	ldi	r18, 0xAB	; 171
    37fa:	3a ea       	ldi	r19, 0xAA	; 170
    37fc:	4a ea       	ldi	r20, 0xAA	; 170
    37fe:	50 e4       	ldi	r21, 0x40	; 64
    3800:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	89 a7       	std	Y+41, r24	; 0x29
    380a:	9a a7       	std	Y+42, r25	; 0x2a
    380c:	ab a7       	std	Y+43, r26	; 0x2b
    380e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3810:	69 a5       	ldd	r22, Y+41	; 0x29
    3812:	7a a5       	ldd	r23, Y+42	; 0x2a
    3814:	8b a5       	ldd	r24, Y+43	; 0x2b
    3816:	9c a5       	ldd	r25, Y+44	; 0x2c
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	1c f4       	brge	.+6      	; 0x382e <LCD_SendCommand+0xf7a>
		__ticks = 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	88 a7       	std	Y+40, r24	; 0x28
    382c:	91 c0       	rjmp	.+290    	; 0x3950 <LCD_SendCommand+0x109c>
	else if (__tmp > 255)
    382e:	69 a5       	ldd	r22, Y+41	; 0x29
    3830:	7a a5       	ldd	r23, Y+42	; 0x2a
    3832:	8b a5       	ldd	r24, Y+43	; 0x2b
    3834:	9c a5       	ldd	r25, Y+44	; 0x2c
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	4f e7       	ldi	r20, 0x7F	; 127
    383c:	53 e4       	ldi	r21, 0x43	; 67
    383e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3842:	18 16       	cp	r1, r24
    3844:	0c f0       	brlt	.+2      	; 0x3848 <LCD_SendCommand+0xf94>
    3846:	7b c0       	rjmp	.+246    	; 0x393e <LCD_SendCommand+0x108a>
	{
		_delay_ms(__us / 1000.0);
    3848:	6d a5       	ldd	r22, Y+45	; 0x2d
    384a:	7e a5       	ldd	r23, Y+46	; 0x2e
    384c:	8f a5       	ldd	r24, Y+47	; 0x2f
    384e:	98 a9       	ldd	r25, Y+48	; 0x30
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	4a e7       	ldi	r20, 0x7A	; 122
    3856:	54 e4       	ldi	r21, 0x44	; 68
    3858:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8c a3       	std	Y+36, r24	; 0x24
    3862:	9d a3       	std	Y+37, r25	; 0x25
    3864:	ae a3       	std	Y+38, r26	; 0x26
    3866:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3868:	6c a1       	ldd	r22, Y+36	; 0x24
    386a:	7d a1       	ldd	r23, Y+37	; 0x25
    386c:	8e a1       	ldd	r24, Y+38	; 0x26
    386e:	9f a1       	ldd	r25, Y+39	; 0x27
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	4a e7       	ldi	r20, 0x7A	; 122
    3876:	55 e4       	ldi	r21, 0x45	; 69
    3878:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	88 a3       	std	Y+32, r24	; 0x20
    3882:	99 a3       	std	Y+33, r25	; 0x21
    3884:	aa a3       	std	Y+34, r26	; 0x22
    3886:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3888:	68 a1       	ldd	r22, Y+32	; 0x20
    388a:	79 a1       	ldd	r23, Y+33	; 0x21
    388c:	8a a1       	ldd	r24, Y+34	; 0x22
    388e:	9b a1       	ldd	r25, Y+35	; 0x23
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    389c:	88 23       	and	r24, r24
    389e:	2c f4       	brge	.+10     	; 0x38aa <LCD_SendCommand+0xff6>
		__ticks = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9f 8f       	std	Y+31, r25	; 0x1f
    38a6:	8e 8f       	std	Y+30, r24	; 0x1e
    38a8:	3f c0       	rjmp	.+126    	; 0x3928 <LCD_SendCommand+0x1074>
	else if (__tmp > 65535)
    38aa:	68 a1       	ldd	r22, Y+32	; 0x20
    38ac:	79 a1       	ldd	r23, Y+33	; 0x21
    38ae:	8a a1       	ldd	r24, Y+34	; 0x22
    38b0:	9b a1       	ldd	r25, Y+35	; 0x23
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	4c f5       	brge	.+82     	; 0x3914 <LCD_SendCommand+0x1060>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	6c a1       	ldd	r22, Y+36	; 0x24
    38c4:	7d a1       	ldd	r23, Y+37	; 0x25
    38c6:	8e a1       	ldd	r24, Y+38	; 0x26
    38c8:	9f a1       	ldd	r25, Y+39	; 0x27
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9f 8f       	std	Y+31, r25	; 0x1f
    38e8:	8e 8f       	std	Y+30, r24	; 0x1e
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <LCD_SendCommand+0x1056>
    38ec:	80 e9       	ldi	r24, 0x90	; 144
    38ee:	91 e0       	ldi	r25, 0x01	; 1
    38f0:	9d 8f       	std	Y+29, r25	; 0x1d
    38f2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <LCD_SendCommand+0x1044>
    38fc:	9d 8f       	std	Y+29, r25	; 0x1d
    38fe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3902:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9f 8f       	std	Y+31, r25	; 0x1f
    3908:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    390c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	69 f7       	brne	.-38     	; 0x38ec <LCD_SendCommand+0x1038>
    3912:	24 c0       	rjmp	.+72     	; 0x395c <LCD_SendCommand+0x10a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3914:	68 a1       	ldd	r22, Y+32	; 0x20
    3916:	79 a1       	ldd	r23, Y+33	; 0x21
    3918:	8a a1       	ldd	r24, Y+34	; 0x22
    391a:	9b a1       	ldd	r25, Y+35	; 0x23
    391c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9f 8f       	std	Y+31, r25	; 0x1f
    3926:	8e 8f       	std	Y+30, r24	; 0x1e
    3928:	8e 8d       	ldd	r24, Y+30	; 0x1e
    392a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    392c:	9b 8f       	std	Y+27, r25	; 0x1b
    392e:	8a 8f       	std	Y+26, r24	; 0x1a
    3930:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3932:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_SendCommand+0x1080>
    3938:	9b 8f       	std	Y+27, r25	; 0x1b
    393a:	8a 8f       	std	Y+26, r24	; 0x1a
    393c:	0f c0       	rjmp	.+30     	; 0x395c <LCD_SendCommand+0x10a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    393e:	69 a5       	ldd	r22, Y+41	; 0x29
    3940:	7a a5       	ldd	r23, Y+42	; 0x2a
    3942:	8b a5       	ldd	r24, Y+43	; 0x2b
    3944:	9c a5       	ldd	r25, Y+44	; 0x2c
    3946:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	88 a7       	std	Y+40, r24	; 0x28
    3950:	88 a5       	ldd	r24, Y+40	; 0x28
    3952:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3954:	89 8d       	ldd	r24, Y+25	; 0x19
    3956:	8a 95       	dec	r24
    3958:	f1 f7       	brne	.-4      	; 0x3956 <LCD_SendCommand+0x10a2>
    395a:	89 8f       	std	Y+25, r24	; 0x19
	    	_delay_us(1);
	    	CLEAR_BIT(PORTD, EN_PIN);
    395c:	a2 e3       	ldi	r26, 0x32	; 50
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e2 e3       	ldi	r30, 0x32	; 50
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	48 2f       	mov	r20, r24
    3968:	80 91 4a 02 	lds	r24, 0x024A
    396c:	28 2f       	mov	r18, r24
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	02 c0       	rjmp	.+4      	; 0x397a <LCD_SendCommand+0x10c6>
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	2a 95       	dec	r18
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <LCD_SendCommand+0x10c2>
    397e:	80 95       	com	r24
    3980:	84 23       	and	r24, r20
    3982:	8c 93       	st	X, r24
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	a0 e8       	ldi	r26, 0x80	; 128
    398a:	bf e3       	ldi	r27, 0x3F	; 63
    398c:	8d 8b       	std	Y+21, r24	; 0x15
    398e:	9e 8b       	std	Y+22, r25	; 0x16
    3990:	af 8b       	std	Y+23, r26	; 0x17
    3992:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3994:	6d 89       	ldd	r22, Y+21	; 0x15
    3996:	7e 89       	ldd	r23, Y+22	; 0x16
    3998:	8f 89       	ldd	r24, Y+23	; 0x17
    399a:	98 8d       	ldd	r25, Y+24	; 0x18
    399c:	2b ea       	ldi	r18, 0xAB	; 171
    399e:	3a ea       	ldi	r19, 0xAA	; 170
    39a0:	4a ea       	ldi	r20, 0xAA	; 170
    39a2:	50 e4       	ldi	r21, 0x40	; 64
    39a4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	89 8b       	std	Y+17, r24	; 0x11
    39ae:	9a 8b       	std	Y+18, r25	; 0x12
    39b0:	ab 8b       	std	Y+19, r26	; 0x13
    39b2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39b4:	69 89       	ldd	r22, Y+17	; 0x11
    39b6:	7a 89       	ldd	r23, Y+18	; 0x12
    39b8:	8b 89       	ldd	r24, Y+19	; 0x13
    39ba:	9c 89       	ldd	r25, Y+20	; 0x14
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    39c8:	88 23       	and	r24, r24
    39ca:	1c f4       	brge	.+6      	; 0x39d2 <LCD_SendCommand+0x111e>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	88 8b       	std	Y+16, r24	; 0x10
    39d0:	91 c0       	rjmp	.+290    	; 0x3af4 <LCD_SendCommand+0x1240>
	else if (__tmp > 255)
    39d2:	69 89       	ldd	r22, Y+17	; 0x11
    39d4:	7a 89       	ldd	r23, Y+18	; 0x12
    39d6:	8b 89       	ldd	r24, Y+19	; 0x13
    39d8:	9c 89       	ldd	r25, Y+20	; 0x14
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4f e7       	ldi	r20, 0x7F	; 127
    39e0:	53 e4       	ldi	r21, 0x43	; 67
    39e2:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    39e6:	18 16       	cp	r1, r24
    39e8:	0c f0       	brlt	.+2      	; 0x39ec <LCD_SendCommand+0x1138>
    39ea:	7b c0       	rjmp	.+246    	; 0x3ae2 <LCD_SendCommand+0x122e>
	{
		_delay_ms(__us / 1000.0);
    39ec:	6d 89       	ldd	r22, Y+21	; 0x15
    39ee:	7e 89       	ldd	r23, Y+22	; 0x16
    39f0:	8f 89       	ldd	r24, Y+23	; 0x17
    39f2:	98 8d       	ldd	r25, Y+24	; 0x18
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	4a e7       	ldi	r20, 0x7A	; 122
    39fa:	54 e4       	ldi	r21, 0x44	; 68
    39fc:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	8c 87       	std	Y+12, r24	; 0x0c
    3a06:	9d 87       	std	Y+13, r25	; 0x0d
    3a08:	ae 87       	std	Y+14, r26	; 0x0e
    3a0a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a10:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a12:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	4a e7       	ldi	r20, 0x7A	; 122
    3a1a:	55 e4       	ldi	r21, 0x45	; 69
    3a1c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	88 87       	std	Y+8, r24	; 0x08
    3a26:	99 87       	std	Y+9, r25	; 0x09
    3a28:	aa 87       	std	Y+10, r26	; 0x0a
    3a2a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a2c:	68 85       	ldd	r22, Y+8	; 0x08
    3a2e:	79 85       	ldd	r23, Y+9	; 0x09
    3a30:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a32:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e8       	ldi	r20, 0x80	; 128
    3a3a:	5f e3       	ldi	r21, 0x3F	; 63
    3a3c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3a40:	88 23       	and	r24, r24
    3a42:	2c f4       	brge	.+10     	; 0x3a4e <LCD_SendCommand+0x119a>
		__ticks = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	9f 83       	std	Y+7, r25	; 0x07
    3a4a:	8e 83       	std	Y+6, r24	; 0x06
    3a4c:	3f c0       	rjmp	.+126    	; 0x3acc <LCD_SendCommand+0x1218>
	else if (__tmp > 65535)
    3a4e:	68 85       	ldd	r22, Y+8	; 0x08
    3a50:	79 85       	ldd	r23, Y+9	; 0x09
    3a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	4c f5       	brge	.+82     	; 0x3ab8 <LCD_SendCommand+0x1204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a66:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a68:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e2       	ldi	r20, 0x20	; 32
    3a74:	51 e4       	ldi	r21, 0x41	; 65
    3a76:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	9f 83       	std	Y+7, r25	; 0x07
    3a8c:	8e 83       	std	Y+6, r24	; 0x06
    3a8e:	0f c0       	rjmp	.+30     	; 0x3aae <LCD_SendCommand+0x11fa>
    3a90:	80 e9       	ldi	r24, 0x90	; 144
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	9d 83       	std	Y+5, r25	; 0x05
    3a96:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a98:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <LCD_SendCommand+0x11e8>
    3aa0:	9d 83       	std	Y+5, r25	; 0x05
    3aa2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    3aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	9f 83       	std	Y+7, r25	; 0x07
    3aac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aae:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	69 f7       	brne	.-38     	; 0x3a90 <LCD_SendCommand+0x11dc>
    3ab6:	24 c0       	rjmp	.+72     	; 0x3b00 <LCD_SendCommand+0x124c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab8:	68 85       	ldd	r22, Y+8	; 0x08
    3aba:	79 85       	ldd	r23, Y+9	; 0x09
    3abc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3abe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ac0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9f 83       	std	Y+7, r25	; 0x07
    3aca:	8e 83       	std	Y+6, r24	; 0x06
    3acc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ace:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad0:	9b 83       	std	Y+3, r25	; 0x03
    3ad2:	8a 83       	std	Y+2, r24	; 0x02
    3ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <LCD_SendCommand+0x1224>
    3adc:	9b 83       	std	Y+3, r25	; 0x03
    3ade:	8a 83       	std	Y+2, r24	; 0x02
    3ae0:	0f c0       	rjmp	.+30     	; 0x3b00 <LCD_SendCommand+0x124c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ae2:	69 89       	ldd	r22, Y+17	; 0x11
    3ae4:	7a 89       	ldd	r23, Y+18	; 0x12
    3ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aea:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	88 8b       	std	Y+16, r24	; 0x10
    3af4:	88 89       	ldd	r24, Y+16	; 0x10
    3af6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	8a 95       	dec	r24
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <LCD_SendCommand+0x1246>
    3afe:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}
	_delay_us(1);
}
    3b00:	c1 55       	subi	r28, 0x51	; 81
    3b02:	df 4f       	sbci	r29, 0xFF	; 255
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	de bf       	out	0x3e, r29	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	cd bf       	out	0x3d, r28	; 61
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16
    3b16:	08 95       	ret

00003b18 <LCD_PrintCharacter>:

void LCD_PrintCharacter(const uint8 Character){
    3b18:	0f 93       	push	r16
    3b1a:	1f 93       	push	r17
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	cf 5a       	subi	r28, 0xAF	; 175
    3b26:	d0 40       	sbci	r29, 0x00	; 0
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	f8 94       	cli
    3b2c:	de bf       	out	0x3e, r29	; 62
    3b2e:	0f be       	out	0x3f, r0	; 63
    3b30:	cd bf       	out	0x3d, r28	; 61
    3b32:	fe 01       	movw	r30, r28
    3b34:	e7 55       	subi	r30, 0x57	; 87
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	80 83       	st	Z, r24
	switch(CONTROL_PORT){
    3b3a:	80 91 47 02 	lds	r24, 0x0247
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	c2 55       	subi	r28, 0x52	; 82
    3b44:	df 4f       	sbci	r29, 0xFF	; 255
    3b46:	39 83       	std	Y+1, r19	; 0x01
    3b48:	28 83       	st	Y, r18
    3b4a:	ce 5a       	subi	r28, 0xAE	; 174
    3b4c:	d0 40       	sbci	r29, 0x00	; 0
    3b4e:	c2 55       	subi	r28, 0x52	; 82
    3b50:	df 4f       	sbci	r29, 0xFF	; 255
    3b52:	88 81       	ld	r24, Y
    3b54:	99 81       	ldd	r25, Y+1	; 0x01
    3b56:	ce 5a       	subi	r28, 0xAE	; 174
    3b58:	d0 40       	sbci	r29, 0x00	; 0
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <LCD_PrintCharacter+0x4a>
    3b60:	51 c0       	rjmp	.+162    	; 0x3c04 <LCD_PrintCharacter+0xec>
    3b62:	c2 55       	subi	r28, 0x52	; 82
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	e8 81       	ld	r30, Y
    3b68:	f9 81       	ldd	r31, Y+1	; 0x01
    3b6a:	ce 5a       	subi	r28, 0xAE	; 174
    3b6c:	d0 40       	sbci	r29, 0x00	; 0
    3b6e:	e2 30       	cpi	r30, 0x02	; 2
    3b70:	f1 05       	cpc	r31, r1
    3b72:	54 f4       	brge	.+20     	; 0x3b88 <LCD_PrintCharacter+0x70>
    3b74:	c2 55       	subi	r28, 0x52	; 82
    3b76:	df 4f       	sbci	r29, 0xFF	; 255
    3b78:	28 81       	ld	r18, Y
    3b7a:	39 81       	ldd	r19, Y+1	; 0x01
    3b7c:	ce 5a       	subi	r28, 0xAE	; 174
    3b7e:	d0 40       	sbci	r29, 0x00	; 0
    3b80:	21 15       	cp	r18, r1
    3b82:	31 05       	cpc	r19, r1
    3b84:	b1 f0       	breq	.+44     	; 0x3bb2 <LCD_PrintCharacter+0x9a>
    3b86:	b7 c0       	rjmp	.+366    	; 0x3cf6 <LCD_PrintCharacter+0x1de>
    3b88:	c2 55       	subi	r28, 0x52	; 82
    3b8a:	df 4f       	sbci	r29, 0xFF	; 255
    3b8c:	88 81       	ld	r24, Y
    3b8e:	99 81       	ldd	r25, Y+1	; 0x01
    3b90:	ce 5a       	subi	r28, 0xAE	; 174
    3b92:	d0 40       	sbci	r29, 0x00	; 0
    3b94:	82 30       	cpi	r24, 0x02	; 2
    3b96:	91 05       	cpc	r25, r1
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <LCD_PrintCharacter+0x84>
    3b9a:	5d c0       	rjmp	.+186    	; 0x3c56 <LCD_PrintCharacter+0x13e>
    3b9c:	c2 55       	subi	r28, 0x52	; 82
    3b9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ba0:	e8 81       	ld	r30, Y
    3ba2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ba4:	ce 5a       	subi	r28, 0xAE	; 174
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	e3 30       	cpi	r30, 0x03	; 3
    3baa:	f1 05       	cpc	r31, r1
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <LCD_PrintCharacter+0x98>
    3bae:	7c c0       	rjmp	.+248    	; 0x3ca8 <LCD_PrintCharacter+0x190>
    3bb0:	a2 c0       	rjmp	.+324    	; 0x3cf6 <LCD_PrintCharacter+0x1de>
		case PortA:
			SET_BIT(PORTA, RS_PIN);
    3bb2:	ab e3       	ldi	r26, 0x3B	; 59
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	eb e3       	ldi	r30, 0x3B	; 59
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	48 2f       	mov	r20, r24
    3bbe:	80 91 48 02 	lds	r24, 0x0248
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <LCD_PrintCharacter+0xb8>
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	2a 95       	dec	r18
    3bd2:	e2 f7       	brpl	.-8      	; 0x3bcc <LCD_PrintCharacter+0xb4>
    3bd4:	84 2b       	or	r24, r20
    3bd6:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA, RW_PIN);
    3bd8:	ab e3       	ldi	r26, 0x3B	; 59
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	eb e3       	ldi	r30, 0x3B	; 59
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	48 2f       	mov	r20, r24
    3be4:	80 91 49 02 	lds	r24, 0x0249
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	02 2e       	mov	r0, r18
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <LCD_PrintCharacter+0xe0>
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	0a 94       	dec	r0
    3bfa:	e2 f7       	brpl	.-8      	; 0x3bf4 <LCD_PrintCharacter+0xdc>
    3bfc:	80 95       	com	r24
    3bfe:	84 23       	and	r24, r20
    3c00:	8c 93       	st	X, r24
    3c02:	79 c0       	rjmp	.+242    	; 0x3cf6 <LCD_PrintCharacter+0x1de>
			break;
		case PortB:
			SET_BIT(PORTB, RS_PIN);
    3c04:	a8 e3       	ldi	r26, 0x38	; 56
    3c06:	b0 e0       	ldi	r27, 0x00	; 0
    3c08:	e8 e3       	ldi	r30, 0x38	; 56
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	80 81       	ld	r24, Z
    3c0e:	48 2f       	mov	r20, r24
    3c10:	80 91 48 02 	lds	r24, 0x0248
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <LCD_PrintCharacter+0x10a>
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	2a 95       	dec	r18
    3c24:	e2 f7       	brpl	.-8      	; 0x3c1e <LCD_PrintCharacter+0x106>
    3c26:	84 2b       	or	r24, r20
    3c28:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB, RW_PIN);
    3c2a:	a8 e3       	ldi	r26, 0x38	; 56
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	e8 e3       	ldi	r30, 0x38	; 56
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	48 2f       	mov	r20, r24
    3c36:	80 91 49 02 	lds	r24, 0x0249
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	02 2e       	mov	r0, r18
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <LCD_PrintCharacter+0x132>
    3c46:	88 0f       	add	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	0a 94       	dec	r0
    3c4c:	e2 f7       	brpl	.-8      	; 0x3c46 <LCD_PrintCharacter+0x12e>
    3c4e:	80 95       	com	r24
    3c50:	84 23       	and	r24, r20
    3c52:	8c 93       	st	X, r24
    3c54:	50 c0       	rjmp	.+160    	; 0x3cf6 <LCD_PrintCharacter+0x1de>
			break;
		case PortC:
			SET_BIT(PORTC, RS_PIN);
    3c56:	a5 e3       	ldi	r26, 0x35	; 53
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	e5 e3       	ldi	r30, 0x35	; 53
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	48 2f       	mov	r20, r24
    3c62:	80 91 48 02 	lds	r24, 0x0248
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <LCD_PrintCharacter+0x15c>
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	2a 95       	dec	r18
    3c76:	e2 f7       	brpl	.-8      	; 0x3c70 <LCD_PrintCharacter+0x158>
    3c78:	84 2b       	or	r24, r20
    3c7a:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC, RW_PIN);
    3c7c:	a5 e3       	ldi	r26, 0x35	; 53
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	e5 e3       	ldi	r30, 0x35	; 53
    3c82:	f0 e0       	ldi	r31, 0x00	; 0
    3c84:	80 81       	ld	r24, Z
    3c86:	48 2f       	mov	r20, r24
    3c88:	80 91 49 02 	lds	r24, 0x0249
    3c8c:	28 2f       	mov	r18, r24
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	02 2e       	mov	r0, r18
    3c96:	02 c0       	rjmp	.+4      	; 0x3c9c <LCD_PrintCharacter+0x184>
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	0a 94       	dec	r0
    3c9e:	e2 f7       	brpl	.-8      	; 0x3c98 <LCD_PrintCharacter+0x180>
    3ca0:	80 95       	com	r24
    3ca2:	84 23       	and	r24, r20
    3ca4:	8c 93       	st	X, r24
    3ca6:	27 c0       	rjmp	.+78     	; 0x3cf6 <LCD_PrintCharacter+0x1de>
			break;
		case PortD:
			SET_BIT(PORTD, RS_PIN);
    3ca8:	a2 e3       	ldi	r26, 0x32	; 50
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	e2 e3       	ldi	r30, 0x32	; 50
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	48 2f       	mov	r20, r24
    3cb4:	80 91 48 02 	lds	r24, 0x0248
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <LCD_PrintCharacter+0x1ae>
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	2a 95       	dec	r18
    3cc8:	e2 f7       	brpl	.-8      	; 0x3cc2 <LCD_PrintCharacter+0x1aa>
    3cca:	84 2b       	or	r24, r20
    3ccc:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD, RW_PIN);
    3cce:	a2 e3       	ldi	r26, 0x32	; 50
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	e2 e3       	ldi	r30, 0x32	; 50
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 81       	ld	r24, Z
    3cd8:	48 2f       	mov	r20, r24
    3cda:	80 91 49 02 	lds	r24, 0x0249
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <LCD_PrintCharacter+0x1d4>
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	2a 95       	dec	r18
    3cee:	e2 f7       	brpl	.-8      	; 0x3ce8 <LCD_PrintCharacter+0x1d0>
    3cf0:	80 95       	com	r24
    3cf2:	84 23       	and	r24, r20
    3cf4:	8c 93       	st	X, r24
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	eb 55       	subi	r30, 0x5B	; 91
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	a0 e8       	ldi	r26, 0x80	; 128
    3d02:	bf e3       	ldi	r27, 0x3F	; 63
    3d04:	80 83       	st	Z, r24
    3d06:	91 83       	std	Z+1, r25	; 0x01
    3d08:	a2 83       	std	Z+2, r26	; 0x02
    3d0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d0c:	8e 01       	movw	r16, r28
    3d0e:	0f 55       	subi	r16, 0x5F	; 95
    3d10:	1f 4f       	sbci	r17, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	eb 55       	subi	r30, 0x5B	; 91
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	2b ea       	ldi	r18, 0xAB	; 171
    3d22:	3a ea       	ldi	r19, 0xAA	; 170
    3d24:	4a ea       	ldi	r20, 0xAA	; 170
    3d26:	50 e4       	ldi	r21, 0x40	; 64
    3d28:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	f8 01       	movw	r30, r16
    3d32:	80 83       	st	Z, r24
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	a2 83       	std	Z+2, r26	; 0x02
    3d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ef 55       	subi	r30, 0x5F	; 95
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e8       	ldi	r20, 0x80	; 128
    3d4e:	5f e3       	ldi	r21, 0x3F	; 63
    3d50:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3d54:	88 23       	and	r24, r24
    3d56:	34 f4       	brge	.+12     	; 0x3d64 <LCD_PrintCharacter+0x24c>
		__ticks = 1;
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e0 56       	subi	r30, 0x60	; 96
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	80 83       	st	Z, r24
    3d62:	e0 c0       	rjmp	.+448    	; 0x3f24 <LCD_PrintCharacter+0x40c>
	else if (__tmp > 255)
    3d64:	fe 01       	movw	r30, r28
    3d66:	ef 55       	subi	r30, 0x5F	; 95
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	4f e7       	ldi	r20, 0x7F	; 127
    3d78:	53 e4       	ldi	r21, 0x43	; 67
    3d7a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3d7e:	18 16       	cp	r1, r24
    3d80:	0c f0       	brlt	.+2      	; 0x3d84 <LCD_PrintCharacter+0x26c>
    3d82:	c0 c0       	rjmp	.+384    	; 0x3f04 <LCD_PrintCharacter+0x3ec>
	{
		_delay_ms(__us / 1000.0);
    3d84:	fe 01       	movw	r30, r28
    3d86:	eb 55       	subi	r30, 0x5B	; 91
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	60 81       	ld	r22, Z
    3d8c:	71 81       	ldd	r23, Z+1	; 0x01
    3d8e:	82 81       	ldd	r24, Z+2	; 0x02
    3d90:	93 81       	ldd	r25, Z+3	; 0x03
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4a e7       	ldi	r20, 0x7A	; 122
    3d98:	54 e4       	ldi	r21, 0x44	; 68
    3d9a:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	fe 01       	movw	r30, r28
    3da4:	e4 56       	subi	r30, 0x64	; 100
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 83       	st	Z, r24
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	a2 83       	std	Z+2, r26	; 0x02
    3dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db0:	8e 01       	movw	r16, r28
    3db2:	08 56       	subi	r16, 0x68	; 104
    3db4:	1f 4f       	sbci	r17, 0xFF	; 255
    3db6:	fe 01       	movw	r30, r28
    3db8:	e4 56       	subi	r30, 0x64	; 100
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	60 81       	ld	r22, Z
    3dbe:	71 81       	ldd	r23, Z+1	; 0x01
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	4a e7       	ldi	r20, 0x7A	; 122
    3dca:	55 e4       	ldi	r21, 0x45	; 69
    3dcc:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	80 83       	st	Z, r24
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	a2 83       	std	Z+2, r26	; 0x02
    3ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dde:	fe 01       	movw	r30, r28
    3de0:	e8 56       	subi	r30, 0x68	; 104
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e8       	ldi	r20, 0x80	; 128
    3df2:	5f e3       	ldi	r21, 0x3F	; 63
    3df4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    3df8:	88 23       	and	r24, r24
    3dfa:	44 f4       	brge	.+16     	; 0x3e0c <LCD_PrintCharacter+0x2f4>
		__ticks = 1;
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	ea 56       	subi	r30, 0x6A	; 106
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
    3e0a:	64 c0       	rjmp	.+200    	; 0x3ed4 <LCD_PrintCharacter+0x3bc>
	else if (__tmp > 65535)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e8 56       	subi	r30, 0x68	; 104
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	60 81       	ld	r22, Z
    3e14:	71 81       	ldd	r23, Z+1	; 0x01
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	93 81       	ldd	r25, Z+3	; 0x03
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	3f ef       	ldi	r19, 0xFF	; 255
    3e1e:	4f e7       	ldi	r20, 0x7F	; 127
    3e20:	57 e4       	ldi	r21, 0x47	; 71
    3e22:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    3e26:	18 16       	cp	r1, r24
    3e28:	0c f0       	brlt	.+2      	; 0x3e2c <LCD_PrintCharacter+0x314>
    3e2a:	43 c0       	rjmp	.+134    	; 0x3eb2 <LCD_PrintCharacter+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e4 56       	subi	r30, 0x64	; 100
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	60 81       	ld	r22, Z
    3e34:	71 81       	ldd	r23, Z+1	; 0x01
    3e36:	82 81       	ldd	r24, Z+2	; 0x02
    3e38:	93 81       	ldd	r25, Z+3	; 0x03
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e2       	ldi	r20, 0x20	; 32
    3e40:	51 e4       	ldi	r21, 0x41	; 65
    3e42:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	8e 01       	movw	r16, r28
    3e4c:	0a 56       	subi	r16, 0x6A	; 106
    3e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	80 83       	st	Z, r24
    3e62:	1f c0       	rjmp	.+62     	; 0x3ea2 <LCD_PrintCharacter+0x38a>
    3e64:	fe 01       	movw	r30, r28
    3e66:	ec 56       	subi	r30, 0x6C	; 108
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 e9       	ldi	r24, 0x90	; 144
    3e6c:	91 e0       	ldi	r25, 0x01	; 1
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e72:	fe 01       	movw	r30, r28
    3e74:	ec 56       	subi	r30, 0x6C	; 108
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	80 81       	ld	r24, Z
    3e7a:	91 81       	ldd	r25, Z+1	; 0x01
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <LCD_PrintCharacter+0x364>
    3e80:	fe 01       	movw	r30, r28
    3e82:	ec 56       	subi	r30, 0x6C	; 108
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8a:	de 01       	movw	r26, r28
    3e8c:	aa 56       	subi	r26, 0x6A	; 106
    3e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e90:	fe 01       	movw	r30, r28
    3e92:	ea 56       	subi	r30, 0x6A	; 106
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 81       	ld	r24, Z
    3e98:	91 81       	ldd	r25, Z+1	; 0x01
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	11 96       	adiw	r26, 0x01	; 1
    3e9e:	9c 93       	st	X, r25
    3ea0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	ea 56       	subi	r30, 0x6A	; 106
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	80 81       	ld	r24, Z
    3eaa:	91 81       	ldd	r25, Z+1	; 0x01
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	d1 f6       	brne	.-76     	; 0x3e64 <LCD_PrintCharacter+0x34c>
    3eb0:	4b c0       	rjmp	.+150    	; 0x3f48 <LCD_PrintCharacter+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb2:	8e 01       	movw	r16, r28
    3eb4:	0a 56       	subi	r16, 0x6A	; 106
    3eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e8 56       	subi	r30, 0x68	; 104
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	f8 01       	movw	r30, r16
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
    3ed4:	de 01       	movw	r26, r28
    3ed6:	ae 56       	subi	r26, 0x6E	; 110
    3ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    3eda:	fe 01       	movw	r30, r28
    3edc:	ea 56       	subi	r30, 0x6A	; 106
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	11 96       	adiw	r26, 0x01	; 1
    3ee6:	9c 93       	st	X, r25
    3ee8:	8e 93       	st	-X, r24
    3eea:	fe 01       	movw	r30, r28
    3eec:	ee 56       	subi	r30, 0x6E	; 110
    3eee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef0:	80 81       	ld	r24, Z
    3ef2:	91 81       	ldd	r25, Z+1	; 0x01
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <LCD_PrintCharacter+0x3dc>
    3ef8:	fe 01       	movw	r30, r28
    3efa:	ee 56       	subi	r30, 0x6E	; 110
    3efc:	ff 4f       	sbci	r31, 0xFF	; 255
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	22 c0       	rjmp	.+68     	; 0x3f48 <LCD_PrintCharacter+0x430>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f04:	8e 01       	movw	r16, r28
    3f06:	00 56       	subi	r16, 0x60	; 96
    3f08:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	ef 55       	subi	r30, 0x5F	; 95
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	f8 01       	movw	r30, r16
    3f22:	80 83       	st	Z, r24
    3f24:	de 01       	movw	r26, r28
    3f26:	af 56       	subi	r26, 0x6F	; 111
    3f28:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e0 56       	subi	r30, 0x60	; 96
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 81       	ld	r24, Z
    3f32:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f34:	fe 01       	movw	r30, r28
    3f36:	ef 56       	subi	r30, 0x6F	; 111
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	80 81       	ld	r24, Z
    3f3c:	8a 95       	dec	r24
    3f3e:	f1 f7       	brne	.-4      	; 0x3f3c <LCD_PrintCharacter+0x424>
    3f40:	fe 01       	movw	r30, r28
    3f42:	ef 56       	subi	r30, 0x6F	; 111
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 83       	st	Z, r24
			break;
	}
	_delay_us(1);
	switch(LCD_PORT){
    3f48:	80 91 46 02 	lds	r24, 0x0246
    3f4c:	28 2f       	mov	r18, r24
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	c4 55       	subi	r28, 0x54	; 84
    3f52:	df 4f       	sbci	r29, 0xFF	; 255
    3f54:	39 83       	std	Y+1, r19	; 0x01
    3f56:	28 83       	st	Y, r18
    3f58:	cc 5a       	subi	r28, 0xAC	; 172
    3f5a:	d0 40       	sbci	r29, 0x00	; 0
    3f5c:	c4 55       	subi	r28, 0x54	; 84
    3f5e:	df 4f       	sbci	r29, 0xFF	; 255
    3f60:	88 81       	ld	r24, Y
    3f62:	99 81       	ldd	r25, Y+1	; 0x01
    3f64:	cc 5a       	subi	r28, 0xAC	; 172
    3f66:	d0 40       	sbci	r29, 0x00	; 0
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	91 05       	cpc	r25, r1
    3f6c:	71 f1       	breq	.+92     	; 0x3fca <LCD_PrintCharacter+0x4b2>
    3f6e:	c4 55       	subi	r28, 0x54	; 84
    3f70:	df 4f       	sbci	r29, 0xFF	; 255
    3f72:	e8 81       	ld	r30, Y
    3f74:	f9 81       	ldd	r31, Y+1	; 0x01
    3f76:	cc 5a       	subi	r28, 0xAC	; 172
    3f78:	d0 40       	sbci	r29, 0x00	; 0
    3f7a:	e2 30       	cpi	r30, 0x02	; 2
    3f7c:	f1 05       	cpc	r31, r1
    3f7e:	54 f4       	brge	.+20     	; 0x3f94 <LCD_PrintCharacter+0x47c>
    3f80:	c4 55       	subi	r28, 0x54	; 84
    3f82:	df 4f       	sbci	r29, 0xFF	; 255
    3f84:	28 81       	ld	r18, Y
    3f86:	39 81       	ldd	r19, Y+1	; 0x01
    3f88:	cc 5a       	subi	r28, 0xAC	; 172
    3f8a:	d0 40       	sbci	r29, 0x00	; 0
    3f8c:	21 15       	cp	r18, r1
    3f8e:	31 05       	cpc	r19, r1
    3f90:	a1 f0       	breq	.+40     	; 0x3fba <LCD_PrintCharacter+0x4a2>
    3f92:	32 c0       	rjmp	.+100    	; 0x3ff8 <LCD_PrintCharacter+0x4e0>
    3f94:	c4 55       	subi	r28, 0x54	; 84
    3f96:	df 4f       	sbci	r29, 0xFF	; 255
    3f98:	88 81       	ld	r24, Y
    3f9a:	99 81       	ldd	r25, Y+1	; 0x01
    3f9c:	cc 5a       	subi	r28, 0xAC	; 172
    3f9e:	d0 40       	sbci	r29, 0x00	; 0
    3fa0:	82 30       	cpi	r24, 0x02	; 2
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	d1 f0       	breq	.+52     	; 0x3fda <LCD_PrintCharacter+0x4c2>
    3fa6:	c4 55       	subi	r28, 0x54	; 84
    3fa8:	df 4f       	sbci	r29, 0xFF	; 255
    3faa:	e8 81       	ld	r30, Y
    3fac:	f9 81       	ldd	r31, Y+1	; 0x01
    3fae:	cc 5a       	subi	r28, 0xAC	; 172
    3fb0:	d0 40       	sbci	r29, 0x00	; 0
    3fb2:	e3 30       	cpi	r30, 0x03	; 3
    3fb4:	f1 05       	cpc	r31, r1
    3fb6:	c9 f0       	breq	.+50     	; 0x3fea <LCD_PrintCharacter+0x4d2>
    3fb8:	1f c0       	rjmp	.+62     	; 0x3ff8 <LCD_PrintCharacter+0x4e0>
		case PortA:
			PORTA = Character;
    3fba:	eb e3       	ldi	r30, 0x3B	; 59
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	de 01       	movw	r26, r28
    3fc0:	a7 55       	subi	r26, 0x57	; 87
    3fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc4:	8c 91       	ld	r24, X
    3fc6:	80 83       	st	Z, r24
    3fc8:	17 c0       	rjmp	.+46     	; 0x3ff8 <LCD_PrintCharacter+0x4e0>
			break;
		case PortB:
			PORTB = Character;
    3fca:	e8 e3       	ldi	r30, 0x38	; 56
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	de 01       	movw	r26, r28
    3fd0:	a7 55       	subi	r26, 0x57	; 87
    3fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd4:	8c 91       	ld	r24, X
    3fd6:	80 83       	st	Z, r24
    3fd8:	0f c0       	rjmp	.+30     	; 0x3ff8 <LCD_PrintCharacter+0x4e0>
			break;
		case PortC:
			PORTC = Character;
    3fda:	e5 e3       	ldi	r30, 0x35	; 53
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	de 01       	movw	r26, r28
    3fe0:	a7 55       	subi	r26, 0x57	; 87
    3fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe4:	8c 91       	ld	r24, X
    3fe6:	80 83       	st	Z, r24
    3fe8:	07 c0       	rjmp	.+14     	; 0x3ff8 <LCD_PrintCharacter+0x4e0>
			break;
		case PortD:
			PORTD = Character;
    3fea:	e2 e3       	ldi	r30, 0x32	; 50
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	de 01       	movw	r26, r28
    3ff0:	a7 55       	subi	r26, 0x57	; 87
    3ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff4:	8c 91       	ld	r24, X
    3ff6:	80 83       	st	Z, r24
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e3 57       	subi	r30, 0x73	; 115
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	a0 e8       	ldi	r26, 0x80	; 128
    4004:	bf e3       	ldi	r27, 0x3F	; 63
    4006:	80 83       	st	Z, r24
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	a2 83       	std	Z+2, r26	; 0x02
    400c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    400e:	8e 01       	movw	r16, r28
    4010:	07 57       	subi	r16, 0x77	; 119
    4012:	1f 4f       	sbci	r17, 0xFF	; 255
    4014:	fe 01       	movw	r30, r28
    4016:	e3 57       	subi	r30, 0x73	; 115
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	2b ea       	ldi	r18, 0xAB	; 171
    4024:	3a ea       	ldi	r19, 0xAA	; 170
    4026:	4a ea       	ldi	r20, 0xAA	; 170
    4028:	50 e4       	ldi	r21, 0x40	; 64
    402a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	f8 01       	movw	r30, r16
    4034:	80 83       	st	Z, r24
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	a2 83       	std	Z+2, r26	; 0x02
    403a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    403c:	fe 01       	movw	r30, r28
    403e:	e7 57       	subi	r30, 0x77	; 119
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	60 81       	ld	r22, Z
    4044:	71 81       	ldd	r23, Z+1	; 0x01
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e8       	ldi	r20, 0x80	; 128
    4050:	5f e3       	ldi	r21, 0x3F	; 63
    4052:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4056:	88 23       	and	r24, r24
    4058:	34 f4       	brge	.+12     	; 0x4066 <LCD_PrintCharacter+0x54e>
		__ticks = 1;
    405a:	fe 01       	movw	r30, r28
    405c:	e8 57       	subi	r30, 0x78	; 120
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	80 83       	st	Z, r24
    4064:	e0 c0       	rjmp	.+448    	; 0x4226 <LCD_PrintCharacter+0x70e>
	else if (__tmp > 255)
    4066:	fe 01       	movw	r30, r28
    4068:	e7 57       	subi	r30, 0x77	; 119
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	60 81       	ld	r22, Z
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	4f e7       	ldi	r20, 0x7F	; 127
    407a:	53 e4       	ldi	r21, 0x43	; 67
    407c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4080:	18 16       	cp	r1, r24
    4082:	0c f0       	brlt	.+2      	; 0x4086 <LCD_PrintCharacter+0x56e>
    4084:	c0 c0       	rjmp	.+384    	; 0x4206 <LCD_PrintCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    4086:	fe 01       	movw	r30, r28
    4088:	e3 57       	subi	r30, 0x73	; 115
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	60 81       	ld	r22, Z
    408e:	71 81       	ldd	r23, Z+1	; 0x01
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	93 81       	ldd	r25, Z+3	; 0x03
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	4a e7       	ldi	r20, 0x7A	; 122
    409a:	54 e4       	ldi	r21, 0x44	; 68
    409c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	fe 01       	movw	r30, r28
    40a6:	ec 57       	subi	r30, 0x7C	; 124
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 83       	st	Z, r24
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	a2 83       	std	Z+2, r26	; 0x02
    40b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b2:	8e 01       	movw	r16, r28
    40b4:	00 58       	subi	r16, 0x80	; 128
    40b6:	1f 4f       	sbci	r17, 0xFF	; 255
    40b8:	fe 01       	movw	r30, r28
    40ba:	ec 57       	subi	r30, 0x7C	; 124
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	4a e7       	ldi	r20, 0x7A	; 122
    40cc:	55 e4       	ldi	r21, 0x45	; 69
    40ce:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	f8 01       	movw	r30, r16
    40d8:	80 83       	st	Z, r24
    40da:	91 83       	std	Z+1, r25	; 0x01
    40dc:	a2 83       	std	Z+2, r26	; 0x02
    40de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40e0:	fe 01       	movw	r30, r28
    40e2:	e0 58       	subi	r30, 0x80	; 128
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	60 81       	ld	r22, Z
    40e8:	71 81       	ldd	r23, Z+1	; 0x01
    40ea:	82 81       	ldd	r24, Z+2	; 0x02
    40ec:	93 81       	ldd	r25, Z+3	; 0x03
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	5f e3       	ldi	r21, 0x3F	; 63
    40f6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    40fa:	88 23       	and	r24, r24
    40fc:	44 f4       	brge	.+16     	; 0x410e <LCD_PrintCharacter+0x5f6>
		__ticks = 1;
    40fe:	fe 01       	movw	r30, r28
    4100:	e2 58       	subi	r30, 0x82	; 130
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	80 83       	st	Z, r24
    410c:	64 c0       	rjmp	.+200    	; 0x41d6 <LCD_PrintCharacter+0x6be>
	else if (__tmp > 65535)
    410e:	fe 01       	movw	r30, r28
    4110:	e0 58       	subi	r30, 0x80	; 128
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	60 81       	ld	r22, Z
    4116:	71 81       	ldd	r23, Z+1	; 0x01
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	3f ef       	ldi	r19, 0xFF	; 255
    4120:	4f e7       	ldi	r20, 0x7F	; 127
    4122:	57 e4       	ldi	r21, 0x47	; 71
    4124:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4128:	18 16       	cp	r1, r24
    412a:	0c f0       	brlt	.+2      	; 0x412e <LCD_PrintCharacter+0x616>
    412c:	43 c0       	rjmp	.+134    	; 0x41b4 <LCD_PrintCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412e:	fe 01       	movw	r30, r28
    4130:	ec 57       	subi	r30, 0x7C	; 124
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	60 81       	ld	r22, Z
    4136:	71 81       	ldd	r23, Z+1	; 0x01
    4138:	82 81       	ldd	r24, Z+2	; 0x02
    413a:	93 81       	ldd	r25, Z+3	; 0x03
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e2       	ldi	r20, 0x20	; 32
    4142:	51 e4       	ldi	r21, 0x41	; 65
    4144:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	8e 01       	movw	r16, r28
    414e:	02 58       	subi	r16, 0x82	; 130
    4150:	1f 4f       	sbci	r17, 0xFF	; 255
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	f8 01       	movw	r30, r16
    4160:	91 83       	std	Z+1, r25	; 0x01
    4162:	80 83       	st	Z, r24
    4164:	1f c0       	rjmp	.+62     	; 0x41a4 <LCD_PrintCharacter+0x68c>
    4166:	fe 01       	movw	r30, r28
    4168:	e4 58       	subi	r30, 0x84	; 132
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 e9       	ldi	r24, 0x90	; 144
    416e:	91 e0       	ldi	r25, 0x01	; 1
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4174:	fe 01       	movw	r30, r28
    4176:	e4 58       	subi	r30, 0x84	; 132
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <LCD_PrintCharacter+0x666>
    4182:	fe 01       	movw	r30, r28
    4184:	e4 58       	subi	r30, 0x84	; 132
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418c:	de 01       	movw	r26, r28
    418e:	a2 58       	subi	r26, 0x82	; 130
    4190:	bf 4f       	sbci	r27, 0xFF	; 255
    4192:	fe 01       	movw	r30, r28
    4194:	e2 58       	subi	r30, 0x82	; 130
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	80 81       	ld	r24, Z
    419a:	91 81       	ldd	r25, Z+1	; 0x01
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	11 96       	adiw	r26, 0x01	; 1
    41a0:	9c 93       	st	X, r25
    41a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a4:	fe 01       	movw	r30, r28
    41a6:	e2 58       	subi	r30, 0x82	; 130
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	80 81       	ld	r24, Z
    41ac:	91 81       	ldd	r25, Z+1	; 0x01
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	d1 f6       	brne	.-76     	; 0x4166 <LCD_PrintCharacter+0x64e>
    41b2:	4b c0       	rjmp	.+150    	; 0x424a <LCD_PrintCharacter+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b4:	8e 01       	movw	r16, r28
    41b6:	02 58       	subi	r16, 0x82	; 130
    41b8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ba:	fe 01       	movw	r30, r28
    41bc:	e0 58       	subi	r30, 0x80	; 128
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	60 81       	ld	r22, Z
    41c2:	71 81       	ldd	r23, Z+1	; 0x01
    41c4:	82 81       	ldd	r24, Z+2	; 0x02
    41c6:	93 81       	ldd	r25, Z+3	; 0x03
    41c8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	f8 01       	movw	r30, r16
    41d2:	91 83       	std	Z+1, r25	; 0x01
    41d4:	80 83       	st	Z, r24
    41d6:	de 01       	movw	r26, r28
    41d8:	a6 58       	subi	r26, 0x86	; 134
    41da:	bf 4f       	sbci	r27, 0xFF	; 255
    41dc:	fe 01       	movw	r30, r28
    41de:	e2 58       	subi	r30, 0x82	; 130
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	80 81       	ld	r24, Z
    41e4:	91 81       	ldd	r25, Z+1	; 0x01
    41e6:	11 96       	adiw	r26, 0x01	; 1
    41e8:	9c 93       	st	X, r25
    41ea:	8e 93       	st	-X, r24
    41ec:	fe 01       	movw	r30, r28
    41ee:	e6 58       	subi	r30, 0x86	; 134
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <LCD_PrintCharacter+0x6de>
    41fa:	fe 01       	movw	r30, r28
    41fc:	e6 58       	subi	r30, 0x86	; 134
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	80 83       	st	Z, r24
    4204:	22 c0       	rjmp	.+68     	; 0x424a <LCD_PrintCharacter+0x732>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4206:	8e 01       	movw	r16, r28
    4208:	08 57       	subi	r16, 0x78	; 120
    420a:	1f 4f       	sbci	r17, 0xFF	; 255
    420c:	fe 01       	movw	r30, r28
    420e:	e7 57       	subi	r30, 0x77	; 119
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	60 81       	ld	r22, Z
    4214:	71 81       	ldd	r23, Z+1	; 0x01
    4216:	82 81       	ldd	r24, Z+2	; 0x02
    4218:	93 81       	ldd	r25, Z+3	; 0x03
    421a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	f8 01       	movw	r30, r16
    4224:	80 83       	st	Z, r24
    4226:	de 01       	movw	r26, r28
    4228:	a7 58       	subi	r26, 0x87	; 135
    422a:	bf 4f       	sbci	r27, 0xFF	; 255
    422c:	fe 01       	movw	r30, r28
    422e:	e8 57       	subi	r30, 0x78	; 120
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	80 81       	ld	r24, Z
    4234:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4236:	fe 01       	movw	r30, r28
    4238:	e7 58       	subi	r30, 0x87	; 135
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	80 81       	ld	r24, Z
    423e:	8a 95       	dec	r24
    4240:	f1 f7       	brne	.-4      	; 0x423e <LCD_PrintCharacter+0x726>
    4242:	fe 01       	movw	r30, r28
    4244:	e7 58       	subi	r30, 0x87	; 135
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 83       	st	Z, r24
			break;
	}
	_delay_us(1);
	switch(CONTROL_PORT){
    424a:	80 91 47 02 	lds	r24, 0x0247
    424e:	28 2f       	mov	r18, r24
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	c6 55       	subi	r28, 0x56	; 86
    4254:	df 4f       	sbci	r29, 0xFF	; 255
    4256:	39 83       	std	Y+1, r19	; 0x01
    4258:	28 83       	st	Y, r18
    425a:	ca 5a       	subi	r28, 0xAA	; 170
    425c:	d0 40       	sbci	r29, 0x00	; 0
    425e:	c6 55       	subi	r28, 0x56	; 86
    4260:	df 4f       	sbci	r29, 0xFF	; 255
    4262:	88 81       	ld	r24, Y
    4264:	99 81       	ldd	r25, Y+1	; 0x01
    4266:	ca 5a       	subi	r28, 0xAA	; 170
    4268:	d0 40       	sbci	r29, 0x00	; 0
    426a:	81 30       	cpi	r24, 0x01	; 1
    426c:	91 05       	cpc	r25, r1
    426e:	09 f4       	brne	.+2      	; 0x4272 <LCD_PrintCharacter+0x75a>
    4270:	7a c1       	rjmp	.+756    	; 0x4566 <LCD_PrintCharacter+0xa4e>
    4272:	c6 55       	subi	r28, 0x56	; 86
    4274:	df 4f       	sbci	r29, 0xFF	; 255
    4276:	e8 81       	ld	r30, Y
    4278:	f9 81       	ldd	r31, Y+1	; 0x01
    427a:	ca 5a       	subi	r28, 0xAA	; 170
    427c:	d0 40       	sbci	r29, 0x00	; 0
    427e:	e2 30       	cpi	r30, 0x02	; 2
    4280:	f1 05       	cpc	r31, r1
    4282:	54 f4       	brge	.+20     	; 0x4298 <LCD_PrintCharacter+0x780>
    4284:	c6 55       	subi	r28, 0x56	; 86
    4286:	df 4f       	sbci	r29, 0xFF	; 255
    4288:	28 81       	ld	r18, Y
    428a:	39 81       	ldd	r19, Y+1	; 0x01
    428c:	ca 5a       	subi	r28, 0xAA	; 170
    428e:	d0 40       	sbci	r29, 0x00	; 0
    4290:	21 15       	cp	r18, r1
    4292:	31 05       	cpc	r19, r1
    4294:	b1 f0       	breq	.+44     	; 0x42c2 <LCD_PrintCharacter+0x7aa>
    4296:	a4 c4       	rjmp	.+2376   	; 0x4be0 <LCD_PrintCharacter+0x10c8>
    4298:	c6 55       	subi	r28, 0x56	; 86
    429a:	df 4f       	sbci	r29, 0xFF	; 255
    429c:	88 81       	ld	r24, Y
    429e:	99 81       	ldd	r25, Y+1	; 0x01
    42a0:	ca 5a       	subi	r28, 0xAA	; 170
    42a2:	d0 40       	sbci	r29, 0x00	; 0
    42a4:	82 30       	cpi	r24, 0x02	; 2
    42a6:	91 05       	cpc	r25, r1
    42a8:	09 f4       	brne	.+2      	; 0x42ac <LCD_PrintCharacter+0x794>
    42aa:	af c2       	rjmp	.+1374   	; 0x480a <LCD_PrintCharacter+0xcf2>
    42ac:	c6 55       	subi	r28, 0x56	; 86
    42ae:	df 4f       	sbci	r29, 0xFF	; 255
    42b0:	e8 81       	ld	r30, Y
    42b2:	f9 81       	ldd	r31, Y+1	; 0x01
    42b4:	ca 5a       	subi	r28, 0xAA	; 170
    42b6:	d0 40       	sbci	r29, 0x00	; 0
    42b8:	e3 30       	cpi	r30, 0x03	; 3
    42ba:	f1 05       	cpc	r31, r1
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <LCD_PrintCharacter+0x7a8>
    42be:	ab c3       	rjmp	.+1878   	; 0x4a16 <LCD_PrintCharacter+0xefe>
    42c0:	8f c4       	rjmp	.+2334   	; 0x4be0 <LCD_PrintCharacter+0x10c8>
	    case PortA:
	    	SET_BIT(PORTA, EN_PIN);
    42c2:	ab e3       	ldi	r26, 0x3B	; 59
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	eb e3       	ldi	r30, 0x3B	; 59
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	48 2f       	mov	r20, r24
    42ce:	80 91 4a 02 	lds	r24, 0x024A
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	02 c0       	rjmp	.+4      	; 0x42e0 <LCD_PrintCharacter+0x7c8>
    42dc:	88 0f       	add	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	2a 95       	dec	r18
    42e2:	e2 f7       	brpl	.-8      	; 0x42dc <LCD_PrintCharacter+0x7c4>
    42e4:	84 2b       	or	r24, r20
    42e6:	8c 93       	st	X, r24
    42e8:	fe 01       	movw	r30, r28
    42ea:	eb 58       	subi	r30, 0x8B	; 139
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	a0 e8       	ldi	r26, 0x80	; 128
    42f4:	bf e3       	ldi	r27, 0x3F	; 63
    42f6:	80 83       	st	Z, r24
    42f8:	91 83       	std	Z+1, r25	; 0x01
    42fa:	a2 83       	std	Z+2, r26	; 0x02
    42fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42fe:	8e 01       	movw	r16, r28
    4300:	0f 58       	subi	r16, 0x8F	; 143
    4302:	1f 4f       	sbci	r17, 0xFF	; 255
    4304:	fe 01       	movw	r30, r28
    4306:	eb 58       	subi	r30, 0x8B	; 139
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	60 81       	ld	r22, Z
    430c:	71 81       	ldd	r23, Z+1	; 0x01
    430e:	82 81       	ldd	r24, Z+2	; 0x02
    4310:	93 81       	ldd	r25, Z+3	; 0x03
    4312:	2b ea       	ldi	r18, 0xAB	; 171
    4314:	3a ea       	ldi	r19, 0xAA	; 170
    4316:	4a ea       	ldi	r20, 0xAA	; 170
    4318:	50 e4       	ldi	r21, 0x40	; 64
    431a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	f8 01       	movw	r30, r16
    4324:	80 83       	st	Z, r24
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	a2 83       	std	Z+2, r26	; 0x02
    432a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    432c:	fe 01       	movw	r30, r28
    432e:	ef 58       	subi	r30, 0x8F	; 143
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4346:	88 23       	and	r24, r24
    4348:	34 f4       	brge	.+12     	; 0x4356 <LCD_PrintCharacter+0x83e>
		__ticks = 1;
    434a:	fe 01       	movw	r30, r28
    434c:	e0 59       	subi	r30, 0x90	; 144
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	80 83       	st	Z, r24
    4354:	e0 c0       	rjmp	.+448    	; 0x4516 <LCD_PrintCharacter+0x9fe>
	else if (__tmp > 255)
    4356:	fe 01       	movw	r30, r28
    4358:	ef 58       	subi	r30, 0x8F	; 143
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	60 81       	ld	r22, Z
    435e:	71 81       	ldd	r23, Z+1	; 0x01
    4360:	82 81       	ldd	r24, Z+2	; 0x02
    4362:	93 81       	ldd	r25, Z+3	; 0x03
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	53 e4       	ldi	r21, 0x43	; 67
    436c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	0c f0       	brlt	.+2      	; 0x4376 <LCD_PrintCharacter+0x85e>
    4374:	c0 c0       	rjmp	.+384    	; 0x44f6 <LCD_PrintCharacter+0x9de>
	{
		_delay_ms(__us / 1000.0);
    4376:	fe 01       	movw	r30, r28
    4378:	eb 58       	subi	r30, 0x8B	; 139
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	4a e7       	ldi	r20, 0x7A	; 122
    438a:	54 e4       	ldi	r21, 0x44	; 68
    438c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	fe 01       	movw	r30, r28
    4396:	e4 59       	subi	r30, 0x94	; 148
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	80 83       	st	Z, r24
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	a2 83       	std	Z+2, r26	; 0x02
    43a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a2:	8e 01       	movw	r16, r28
    43a4:	08 59       	subi	r16, 0x98	; 152
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	fe 01       	movw	r30, r28
    43aa:	e4 59       	subi	r30, 0x94	; 148
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	60 81       	ld	r22, Z
    43b0:	71 81       	ldd	r23, Z+1	; 0x01
    43b2:	82 81       	ldd	r24, Z+2	; 0x02
    43b4:	93 81       	ldd	r25, Z+3	; 0x03
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4a e7       	ldi	r20, 0x7A	; 122
    43bc:	55 e4       	ldi	r21, 0x45	; 69
    43be:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	f8 01       	movw	r30, r16
    43c8:	80 83       	st	Z, r24
    43ca:	91 83       	std	Z+1, r25	; 0x01
    43cc:	a2 83       	std	Z+2, r26	; 0x02
    43ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43d0:	fe 01       	movw	r30, r28
    43d2:	e8 59       	subi	r30, 0x98	; 152
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	60 81       	ld	r22, Z
    43d8:	71 81       	ldd	r23, Z+1	; 0x01
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	40 e8       	ldi	r20, 0x80	; 128
    43e4:	5f e3       	ldi	r21, 0x3F	; 63
    43e6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    43ea:	88 23       	and	r24, r24
    43ec:	44 f4       	brge	.+16     	; 0x43fe <LCD_PrintCharacter+0x8e6>
		__ticks = 1;
    43ee:	fe 01       	movw	r30, r28
    43f0:	ea 59       	subi	r30, 0x9A	; 154
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	91 83       	std	Z+1, r25	; 0x01
    43fa:	80 83       	st	Z, r24
    43fc:	64 c0       	rjmp	.+200    	; 0x44c6 <LCD_PrintCharacter+0x9ae>
	else if (__tmp > 65535)
    43fe:	fe 01       	movw	r30, r28
    4400:	e8 59       	subi	r30, 0x98	; 152
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	60 81       	ld	r22, Z
    4406:	71 81       	ldd	r23, Z+1	; 0x01
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	93 81       	ldd	r25, Z+3	; 0x03
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	3f ef       	ldi	r19, 0xFF	; 255
    4410:	4f e7       	ldi	r20, 0x7F	; 127
    4412:	57 e4       	ldi	r21, 0x47	; 71
    4414:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4418:	18 16       	cp	r1, r24
    441a:	0c f0       	brlt	.+2      	; 0x441e <LCD_PrintCharacter+0x906>
    441c:	43 c0       	rjmp	.+134    	; 0x44a4 <LCD_PrintCharacter+0x98c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    441e:	fe 01       	movw	r30, r28
    4420:	e4 59       	subi	r30, 0x94	; 148
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	60 81       	ld	r22, Z
    4426:	71 81       	ldd	r23, Z+1	; 0x01
    4428:	82 81       	ldd	r24, Z+2	; 0x02
    442a:	93 81       	ldd	r25, Z+3	; 0x03
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e2       	ldi	r20, 0x20	; 32
    4432:	51 e4       	ldi	r21, 0x41	; 65
    4434:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	8e 01       	movw	r16, r28
    443e:	0a 59       	subi	r16, 0x9A	; 154
    4440:	1f 4f       	sbci	r17, 0xFF	; 255
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	f8 01       	movw	r30, r16
    4450:	91 83       	std	Z+1, r25	; 0x01
    4452:	80 83       	st	Z, r24
    4454:	1f c0       	rjmp	.+62     	; 0x4494 <LCD_PrintCharacter+0x97c>
    4456:	fe 01       	movw	r30, r28
    4458:	ec 59       	subi	r30, 0x9C	; 156
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	80 e9       	ldi	r24, 0x90	; 144
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4464:	fe 01       	movw	r30, r28
    4466:	ec 59       	subi	r30, 0x9C	; 156
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	80 81       	ld	r24, Z
    446c:	91 81       	ldd	r25, Z+1	; 0x01
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <LCD_PrintCharacter+0x956>
    4472:	fe 01       	movw	r30, r28
    4474:	ec 59       	subi	r30, 0x9C	; 156
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447c:	de 01       	movw	r26, r28
    447e:	aa 59       	subi	r26, 0x9A	; 154
    4480:	bf 4f       	sbci	r27, 0xFF	; 255
    4482:	fe 01       	movw	r30, r28
    4484:	ea 59       	subi	r30, 0x9A	; 154
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	80 81       	ld	r24, Z
    448a:	91 81       	ldd	r25, Z+1	; 0x01
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	11 96       	adiw	r26, 0x01	; 1
    4490:	9c 93       	st	X, r25
    4492:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4494:	fe 01       	movw	r30, r28
    4496:	ea 59       	subi	r30, 0x9A	; 154
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	80 81       	ld	r24, Z
    449c:	91 81       	ldd	r25, Z+1	; 0x01
    449e:	00 97       	sbiw	r24, 0x00	; 0
    44a0:	d1 f6       	brne	.-76     	; 0x4456 <LCD_PrintCharacter+0x93e>
    44a2:	4b c0       	rjmp	.+150    	; 0x453a <LCD_PrintCharacter+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a4:	8e 01       	movw	r16, r28
    44a6:	0a 59       	subi	r16, 0x9A	; 154
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	fe 01       	movw	r30, r28
    44ac:	e8 59       	subi	r30, 0x98	; 152
    44ae:	ff 4f       	sbci	r31, 0xFF	; 255
    44b0:	60 81       	ld	r22, Z
    44b2:	71 81       	ldd	r23, Z+1	; 0x01
    44b4:	82 81       	ldd	r24, Z+2	; 0x02
    44b6:	93 81       	ldd	r25, Z+3	; 0x03
    44b8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	f8 01       	movw	r30, r16
    44c2:	91 83       	std	Z+1, r25	; 0x01
    44c4:	80 83       	st	Z, r24
    44c6:	de 01       	movw	r26, r28
    44c8:	ae 59       	subi	r26, 0x9E	; 158
    44ca:	bf 4f       	sbci	r27, 0xFF	; 255
    44cc:	fe 01       	movw	r30, r28
    44ce:	ea 59       	subi	r30, 0x9A	; 154
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	11 96       	adiw	r26, 0x01	; 1
    44d8:	9c 93       	st	X, r25
    44da:	8e 93       	st	-X, r24
    44dc:	fe 01       	movw	r30, r28
    44de:	ee 59       	subi	r30, 0x9E	; 158
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <LCD_PrintCharacter+0x9ce>
    44ea:	fe 01       	movw	r30, r28
    44ec:	ee 59       	subi	r30, 0x9E	; 158
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	80 83       	st	Z, r24
    44f4:	22 c0       	rjmp	.+68     	; 0x453a <LCD_PrintCharacter+0xa22>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44f6:	8e 01       	movw	r16, r28
    44f8:	00 59       	subi	r16, 0x90	; 144
    44fa:	1f 4f       	sbci	r17, 0xFF	; 255
    44fc:	fe 01       	movw	r30, r28
    44fe:	ef 58       	subi	r30, 0x8F	; 143
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	60 81       	ld	r22, Z
    4504:	71 81       	ldd	r23, Z+1	; 0x01
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	f8 01       	movw	r30, r16
    4514:	80 83       	st	Z, r24
    4516:	de 01       	movw	r26, r28
    4518:	af 59       	subi	r26, 0x9F	; 159
    451a:	bf 4f       	sbci	r27, 0xFF	; 255
    451c:	fe 01       	movw	r30, r28
    451e:	e0 59       	subi	r30, 0x90	; 144
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	80 81       	ld	r24, Z
    4524:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4526:	fe 01       	movw	r30, r28
    4528:	ef 59       	subi	r30, 0x9F	; 159
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 81       	ld	r24, Z
    452e:	8a 95       	dec	r24
    4530:	f1 f7       	brne	.-4      	; 0x452e <LCD_PrintCharacter+0xa16>
    4532:	fe 01       	movw	r30, r28
    4534:	ef 59       	subi	r30, 0x9F	; 159
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	80 83       	st	Z, r24
	    	_delay_us(1);
	    	CLEAR_BIT(PORTA, EN_PIN);
    453a:	ab e3       	ldi	r26, 0x3B	; 59
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	eb e3       	ldi	r30, 0x3B	; 59
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	48 2f       	mov	r20, r24
    4546:	80 91 4a 02 	lds	r24, 0x024A
    454a:	28 2f       	mov	r18, r24
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	02 2e       	mov	r0, r18
    4554:	02 c0       	rjmp	.+4      	; 0x455a <LCD_PrintCharacter+0xa42>
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	0a 94       	dec	r0
    455c:	e2 f7       	brpl	.-8      	; 0x4556 <LCD_PrintCharacter+0xa3e>
    455e:	80 95       	com	r24
    4560:	84 23       	and	r24, r20
    4562:	8c 93       	st	X, r24
    4564:	3d c3       	rjmp	.+1658   	; 0x4be0 <LCD_PrintCharacter+0x10c8>
	    	break;
	    case PortB:
	    	SET_BIT(PORTB, EN_PIN);
    4566:	a8 e3       	ldi	r26, 0x38	; 56
    4568:	b0 e0       	ldi	r27, 0x00	; 0
    456a:	e8 e3       	ldi	r30, 0x38	; 56
    456c:	f0 e0       	ldi	r31, 0x00	; 0
    456e:	80 81       	ld	r24, Z
    4570:	48 2f       	mov	r20, r24
    4572:	80 91 4a 02 	lds	r24, 0x024A
    4576:	28 2f       	mov	r18, r24
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <LCD_PrintCharacter+0xa6c>
    4580:	88 0f       	add	r24, r24
    4582:	99 1f       	adc	r25, r25
    4584:	2a 95       	dec	r18
    4586:	e2 f7       	brpl	.-8      	; 0x4580 <LCD_PrintCharacter+0xa68>
    4588:	84 2b       	or	r24, r20
    458a:	8c 93       	st	X, r24
    458c:	fe 01       	movw	r30, r28
    458e:	e3 5a       	subi	r30, 0xA3	; 163
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	a0 e8       	ldi	r26, 0x80	; 128
    4598:	bf e3       	ldi	r27, 0x3F	; 63
    459a:	80 83       	st	Z, r24
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	a2 83       	std	Z+2, r26	; 0x02
    45a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    45a2:	8e 01       	movw	r16, r28
    45a4:	07 5a       	subi	r16, 0xA7	; 167
    45a6:	1f 4f       	sbci	r17, 0xFF	; 255
    45a8:	fe 01       	movw	r30, r28
    45aa:	e3 5a       	subi	r30, 0xA3	; 163
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	60 81       	ld	r22, Z
    45b0:	71 81       	ldd	r23, Z+1	; 0x01
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	2b ea       	ldi	r18, 0xAB	; 171
    45b8:	3a ea       	ldi	r19, 0xAA	; 170
    45ba:	4a ea       	ldi	r20, 0xAA	; 170
    45bc:	50 e4       	ldi	r21, 0x40	; 64
    45be:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	f8 01       	movw	r30, r16
    45c8:	80 83       	st	Z, r24
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	a2 83       	std	Z+2, r26	; 0x02
    45ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45d0:	fe 01       	movw	r30, r28
    45d2:	e7 5a       	subi	r30, 0xA7	; 167
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	82 81       	ldd	r24, Z+2	; 0x02
    45dc:	93 81       	ldd	r25, Z+3	; 0x03
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	40 e8       	ldi	r20, 0x80	; 128
    45e4:	5f e3       	ldi	r21, 0x3F	; 63
    45e6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    45ea:	88 23       	and	r24, r24
    45ec:	34 f4       	brge	.+12     	; 0x45fa <LCD_PrintCharacter+0xae2>
		__ticks = 1;
    45ee:	fe 01       	movw	r30, r28
    45f0:	e8 5a       	subi	r30, 0xA8	; 168
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 83       	st	Z, r24
    45f8:	e0 c0       	rjmp	.+448    	; 0x47ba <LCD_PrintCharacter+0xca2>
	else if (__tmp > 255)
    45fa:	fe 01       	movw	r30, r28
    45fc:	e7 5a       	subi	r30, 0xA7	; 167
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	4f e7       	ldi	r20, 0x7F	; 127
    460e:	53 e4       	ldi	r21, 0x43	; 67
    4610:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4614:	18 16       	cp	r1, r24
    4616:	0c f0       	brlt	.+2      	; 0x461a <LCD_PrintCharacter+0xb02>
    4618:	c0 c0       	rjmp	.+384    	; 0x479a <LCD_PrintCharacter+0xc82>
	{
		_delay_ms(__us / 1000.0);
    461a:	fe 01       	movw	r30, r28
    461c:	e3 5a       	subi	r30, 0xA3	; 163
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	82 81       	ldd	r24, Z+2	; 0x02
    4626:	93 81       	ldd	r25, Z+3	; 0x03
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	4a e7       	ldi	r20, 0x7A	; 122
    462e:	54 e4       	ldi	r21, 0x44	; 68
    4630:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	fe 01       	movw	r30, r28
    463a:	ec 5a       	subi	r30, 0xAC	; 172
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	80 83       	st	Z, r24
    4640:	91 83       	std	Z+1, r25	; 0x01
    4642:	a2 83       	std	Z+2, r26	; 0x02
    4644:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4646:	8e 01       	movw	r16, r28
    4648:	00 5b       	subi	r16, 0xB0	; 176
    464a:	1f 4f       	sbci	r17, 0xFF	; 255
    464c:	fe 01       	movw	r30, r28
    464e:	ec 5a       	subi	r30, 0xAC	; 172
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	60 81       	ld	r22, Z
    4654:	71 81       	ldd	r23, Z+1	; 0x01
    4656:	82 81       	ldd	r24, Z+2	; 0x02
    4658:	93 81       	ldd	r25, Z+3	; 0x03
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	4a e7       	ldi	r20, 0x7A	; 122
    4660:	55 e4       	ldi	r21, 0x45	; 69
    4662:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	f8 01       	movw	r30, r16
    466c:	80 83       	st	Z, r24
    466e:	91 83       	std	Z+1, r25	; 0x01
    4670:	a2 83       	std	Z+2, r26	; 0x02
    4672:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4674:	fe 01       	movw	r30, r28
    4676:	e0 5b       	subi	r30, 0xB0	; 176
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	60 81       	ld	r22, Z
    467c:	71 81       	ldd	r23, Z+1	; 0x01
    467e:	82 81       	ldd	r24, Z+2	; 0x02
    4680:	93 81       	ldd	r25, Z+3	; 0x03
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e8       	ldi	r20, 0x80	; 128
    4688:	5f e3       	ldi	r21, 0x3F	; 63
    468a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    468e:	88 23       	and	r24, r24
    4690:	44 f4       	brge	.+16     	; 0x46a2 <LCD_PrintCharacter+0xb8a>
		__ticks = 1;
    4692:	fe 01       	movw	r30, r28
    4694:	e2 5b       	subi	r30, 0xB2	; 178
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
    46a0:	64 c0       	rjmp	.+200    	; 0x476a <LCD_PrintCharacter+0xc52>
	else if (__tmp > 65535)
    46a2:	fe 01       	movw	r30, r28
    46a4:	e0 5b       	subi	r30, 0xB0	; 176
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	60 81       	ld	r22, Z
    46aa:	71 81       	ldd	r23, Z+1	; 0x01
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	93 81       	ldd	r25, Z+3	; 0x03
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	3f ef       	ldi	r19, 0xFF	; 255
    46b4:	4f e7       	ldi	r20, 0x7F	; 127
    46b6:	57 e4       	ldi	r21, 0x47	; 71
    46b8:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    46bc:	18 16       	cp	r1, r24
    46be:	0c f0       	brlt	.+2      	; 0x46c2 <LCD_PrintCharacter+0xbaa>
    46c0:	43 c0       	rjmp	.+134    	; 0x4748 <LCD_PrintCharacter+0xc30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c2:	fe 01       	movw	r30, r28
    46c4:	ec 5a       	subi	r30, 0xAC	; 172
    46c6:	ff 4f       	sbci	r31, 0xFF	; 255
    46c8:	60 81       	ld	r22, Z
    46ca:	71 81       	ldd	r23, Z+1	; 0x01
    46cc:	82 81       	ldd	r24, Z+2	; 0x02
    46ce:	93 81       	ldd	r25, Z+3	; 0x03
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	40 e2       	ldi	r20, 0x20	; 32
    46d6:	51 e4       	ldi	r21, 0x41	; 65
    46d8:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	8e 01       	movw	r16, r28
    46e2:	02 5b       	subi	r16, 0xB2	; 178
    46e4:	1f 4f       	sbci	r17, 0xFF	; 255
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	f8 01       	movw	r30, r16
    46f4:	91 83       	std	Z+1, r25	; 0x01
    46f6:	80 83       	st	Z, r24
    46f8:	1f c0       	rjmp	.+62     	; 0x4738 <LCD_PrintCharacter+0xc20>
    46fa:	fe 01       	movw	r30, r28
    46fc:	e4 5b       	subi	r30, 0xB4	; 180
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	80 e9       	ldi	r24, 0x90	; 144
    4702:	91 e0       	ldi	r25, 0x01	; 1
    4704:	91 83       	std	Z+1, r25	; 0x01
    4706:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4708:	fe 01       	movw	r30, r28
    470a:	e4 5b       	subi	r30, 0xB4	; 180
    470c:	ff 4f       	sbci	r31, 0xFF	; 255
    470e:	80 81       	ld	r24, Z
    4710:	91 81       	ldd	r25, Z+1	; 0x01
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	f1 f7       	brne	.-4      	; 0x4712 <LCD_PrintCharacter+0xbfa>
    4716:	fe 01       	movw	r30, r28
    4718:	e4 5b       	subi	r30, 0xB4	; 180
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4720:	de 01       	movw	r26, r28
    4722:	a2 5b       	subi	r26, 0xB2	; 178
    4724:	bf 4f       	sbci	r27, 0xFF	; 255
    4726:	fe 01       	movw	r30, r28
    4728:	e2 5b       	subi	r30, 0xB2	; 178
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	80 81       	ld	r24, Z
    472e:	91 81       	ldd	r25, Z+1	; 0x01
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	11 96       	adiw	r26, 0x01	; 1
    4734:	9c 93       	st	X, r25
    4736:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4738:	fe 01       	movw	r30, r28
    473a:	e2 5b       	subi	r30, 0xB2	; 178
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	80 81       	ld	r24, Z
    4740:	91 81       	ldd	r25, Z+1	; 0x01
    4742:	00 97       	sbiw	r24, 0x00	; 0
    4744:	d1 f6       	brne	.-76     	; 0x46fa <LCD_PrintCharacter+0xbe2>
    4746:	4b c0       	rjmp	.+150    	; 0x47de <LCD_PrintCharacter+0xcc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4748:	8e 01       	movw	r16, r28
    474a:	02 5b       	subi	r16, 0xB2	; 178
    474c:	1f 4f       	sbci	r17, 0xFF	; 255
    474e:	fe 01       	movw	r30, r28
    4750:	e0 5b       	subi	r30, 0xB0	; 176
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	f8 01       	movw	r30, r16
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	80 83       	st	Z, r24
    476a:	de 01       	movw	r26, r28
    476c:	a6 5b       	subi	r26, 0xB6	; 182
    476e:	bf 4f       	sbci	r27, 0xFF	; 255
    4770:	fe 01       	movw	r30, r28
    4772:	e2 5b       	subi	r30, 0xB2	; 178
    4774:	ff 4f       	sbci	r31, 0xFF	; 255
    4776:	80 81       	ld	r24, Z
    4778:	91 81       	ldd	r25, Z+1	; 0x01
    477a:	11 96       	adiw	r26, 0x01	; 1
    477c:	9c 93       	st	X, r25
    477e:	8e 93       	st	-X, r24
    4780:	fe 01       	movw	r30, r28
    4782:	e6 5b       	subi	r30, 0xB6	; 182
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <LCD_PrintCharacter+0xc72>
    478e:	fe 01       	movw	r30, r28
    4790:	e6 5b       	subi	r30, 0xB6	; 182
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	80 83       	st	Z, r24
    4798:	22 c0       	rjmp	.+68     	; 0x47de <LCD_PrintCharacter+0xcc6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    479a:	8e 01       	movw	r16, r28
    479c:	08 5a       	subi	r16, 0xA8	; 168
    479e:	1f 4f       	sbci	r17, 0xFF	; 255
    47a0:	fe 01       	movw	r30, r28
    47a2:	e7 5a       	subi	r30, 0xA7	; 167
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	60 81       	ld	r22, Z
    47a8:	71 81       	ldd	r23, Z+1	; 0x01
    47aa:	82 81       	ldd	r24, Z+2	; 0x02
    47ac:	93 81       	ldd	r25, Z+3	; 0x03
    47ae:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	f8 01       	movw	r30, r16
    47b8:	80 83       	st	Z, r24
    47ba:	de 01       	movw	r26, r28
    47bc:	a7 5b       	subi	r26, 0xB7	; 183
    47be:	bf 4f       	sbci	r27, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	e8 5a       	subi	r30, 0xA8	; 168
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    47ca:	fe 01       	movw	r30, r28
    47cc:	e7 5b       	subi	r30, 0xB7	; 183
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 81       	ld	r24, Z
    47d2:	8a 95       	dec	r24
    47d4:	f1 f7       	brne	.-4      	; 0x47d2 <LCD_PrintCharacter+0xcba>
    47d6:	fe 01       	movw	r30, r28
    47d8:	e7 5b       	subi	r30, 0xB7	; 183
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	80 83       	st	Z, r24
	    	_delay_us(1);
	    	CLEAR_BIT(PORTB, EN_PIN);
    47de:	a8 e3       	ldi	r26, 0x38	; 56
    47e0:	b0 e0       	ldi	r27, 0x00	; 0
    47e2:	e8 e3       	ldi	r30, 0x38	; 56
    47e4:	f0 e0       	ldi	r31, 0x00	; 0
    47e6:	80 81       	ld	r24, Z
    47e8:	48 2f       	mov	r20, r24
    47ea:	80 91 4a 02 	lds	r24, 0x024A
    47ee:	28 2f       	mov	r18, r24
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	02 2e       	mov	r0, r18
    47f8:	02 c0       	rjmp	.+4      	; 0x47fe <LCD_PrintCharacter+0xce6>
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	0a 94       	dec	r0
    4800:	e2 f7       	brpl	.-8      	; 0x47fa <LCD_PrintCharacter+0xce2>
    4802:	80 95       	com	r24
    4804:	84 23       	and	r24, r20
    4806:	8c 93       	st	X, r24
    4808:	eb c1       	rjmp	.+982    	; 0x4be0 <LCD_PrintCharacter+0x10c8>
	    	break;
	    case PortC:
	    	SET_BIT(PORTC, EN_PIN);
    480a:	a5 e3       	ldi	r26, 0x35	; 53
    480c:	b0 e0       	ldi	r27, 0x00	; 0
    480e:	e5 e3       	ldi	r30, 0x35	; 53
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	48 2f       	mov	r20, r24
    4816:	80 91 4a 02 	lds	r24, 0x024A
    481a:	28 2f       	mov	r18, r24
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	02 c0       	rjmp	.+4      	; 0x4828 <LCD_PrintCharacter+0xd10>
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	2a 95       	dec	r18
    482a:	e2 f7       	brpl	.-8      	; 0x4824 <LCD_PrintCharacter+0xd0c>
    482c:	84 2b       	or	r24, r20
    482e:	8c 93       	st	X, r24
    4830:	fe 01       	movw	r30, r28
    4832:	eb 5b       	subi	r30, 0xBB	; 187
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	a0 e8       	ldi	r26, 0x80	; 128
    483c:	bf e3       	ldi	r27, 0x3F	; 63
    483e:	80 83       	st	Z, r24
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	a2 83       	std	Z+2, r26	; 0x02
    4844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4846:	8e 01       	movw	r16, r28
    4848:	0f 5b       	subi	r16, 0xBF	; 191
    484a:	1f 4f       	sbci	r17, 0xFF	; 255
    484c:	fe 01       	movw	r30, r28
    484e:	eb 5b       	subi	r30, 0xBB	; 187
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	60 81       	ld	r22, Z
    4854:	71 81       	ldd	r23, Z+1	; 0x01
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	2b ea       	ldi	r18, 0xAB	; 171
    485c:	3a ea       	ldi	r19, 0xAA	; 170
    485e:	4a ea       	ldi	r20, 0xAA	; 170
    4860:	50 e4       	ldi	r21, 0x40	; 64
    4862:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4866:	dc 01       	movw	r26, r24
    4868:	cb 01       	movw	r24, r22
    486a:	f8 01       	movw	r30, r16
    486c:	80 83       	st	Z, r24
    486e:	91 83       	std	Z+1, r25	; 0x01
    4870:	a2 83       	std	Z+2, r26	; 0x02
    4872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4874:	fe 01       	movw	r30, r28
    4876:	ef 5b       	subi	r30, 0xBF	; 191
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	40 e8       	ldi	r20, 0x80	; 128
    4888:	5f e3       	ldi	r21, 0x3F	; 63
    488a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    488e:	88 23       	and	r24, r24
    4890:	34 f4       	brge	.+12     	; 0x489e <LCD_PrintCharacter+0xd86>
		__ticks = 1;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	fe 01       	movw	r30, r28
    4896:	e0 5c       	subi	r30, 0xC0	; 192
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 83       	st	Z, r24
    489c:	9d c0       	rjmp	.+314    	; 0x49d8 <LCD_PrintCharacter+0xec0>
	else if (__tmp > 255)
    489e:	fe 01       	movw	r30, r28
    48a0:	ef 5b       	subi	r30, 0xBF	; 191
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	60 81       	ld	r22, Z
    48a6:	71 81       	ldd	r23, Z+1	; 0x01
    48a8:	82 81       	ldd	r24, Z+2	; 0x02
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	4f e7       	ldi	r20, 0x7F	; 127
    48b2:	53 e4       	ldi	r21, 0x43	; 67
    48b4:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    48b8:	18 16       	cp	r1, r24
    48ba:	0c f0       	brlt	.+2      	; 0x48be <LCD_PrintCharacter+0xda6>
    48bc:	7e c0       	rjmp	.+252    	; 0x49ba <LCD_PrintCharacter+0xea2>
	{
		_delay_ms(__us / 1000.0);
    48be:	fe 01       	movw	r30, r28
    48c0:	eb 5b       	subi	r30, 0xBB	; 187
    48c2:	ff 4f       	sbci	r31, 0xFF	; 255
    48c4:	60 81       	ld	r22, Z
    48c6:	71 81       	ldd	r23, Z+1	; 0x01
    48c8:	82 81       	ldd	r24, Z+2	; 0x02
    48ca:	93 81       	ldd	r25, Z+3	; 0x03
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	4a e7       	ldi	r20, 0x7A	; 122
    48d2:	54 e4       	ldi	r21, 0x44	; 68
    48d4:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    48d8:	dc 01       	movw	r26, r24
    48da:	cb 01       	movw	r24, r22
    48dc:	8c af       	std	Y+60, r24	; 0x3c
    48de:	9d af       	std	Y+61, r25	; 0x3d
    48e0:	ae af       	std	Y+62, r26	; 0x3e
    48e2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    48e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    48e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    48ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	4a e7       	ldi	r20, 0x7A	; 122
    48f2:	55 e4       	ldi	r21, 0x45	; 69
    48f4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	88 af       	std	Y+56, r24	; 0x38
    48fe:	99 af       	std	Y+57, r25	; 0x39
    4900:	aa af       	std	Y+58, r26	; 0x3a
    4902:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4904:	68 ad       	ldd	r22, Y+56	; 0x38
    4906:	79 ad       	ldd	r23, Y+57	; 0x39
    4908:	8a ad       	ldd	r24, Y+58	; 0x3a
    490a:	9b ad       	ldd	r25, Y+59	; 0x3b
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	40 e8       	ldi	r20, 0x80	; 128
    4912:	5f e3       	ldi	r21, 0x3F	; 63
    4914:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4918:	88 23       	and	r24, r24
    491a:	2c f4       	brge	.+10     	; 0x4926 <LCD_PrintCharacter+0xe0e>
		__ticks = 1;
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	9f ab       	std	Y+55, r25	; 0x37
    4922:	8e ab       	std	Y+54, r24	; 0x36
    4924:	3f c0       	rjmp	.+126    	; 0x49a4 <LCD_PrintCharacter+0xe8c>
	else if (__tmp > 65535)
    4926:	68 ad       	ldd	r22, Y+56	; 0x38
    4928:	79 ad       	ldd	r23, Y+57	; 0x39
    492a:	8a ad       	ldd	r24, Y+58	; 0x3a
    492c:	9b ad       	ldd	r25, Y+59	; 0x3b
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	3f ef       	ldi	r19, 0xFF	; 255
    4932:	4f e7       	ldi	r20, 0x7F	; 127
    4934:	57 e4       	ldi	r21, 0x47	; 71
    4936:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    493a:	18 16       	cp	r1, r24
    493c:	4c f5       	brge	.+82     	; 0x4990 <LCD_PrintCharacter+0xe78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4940:	7d ad       	ldd	r23, Y+61	; 0x3d
    4942:	8e ad       	ldd	r24, Y+62	; 0x3e
    4944:	9f ad       	ldd	r25, Y+63	; 0x3f
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	40 e2       	ldi	r20, 0x20	; 32
    494c:	51 e4       	ldi	r21, 0x41	; 65
    494e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	bc 01       	movw	r22, r24
    4958:	cd 01       	movw	r24, r26
    495a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	9f ab       	std	Y+55, r25	; 0x37
    4964:	8e ab       	std	Y+54, r24	; 0x36
    4966:	0f c0       	rjmp	.+30     	; 0x4986 <LCD_PrintCharacter+0xe6e>
    4968:	80 e9       	ldi	r24, 0x90	; 144
    496a:	91 e0       	ldi	r25, 0x01	; 1
    496c:	9d ab       	std	Y+53, r25	; 0x35
    496e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4970:	8c a9       	ldd	r24, Y+52	; 0x34
    4972:	9d a9       	ldd	r25, Y+53	; 0x35
    4974:	01 97       	sbiw	r24, 0x01	; 1
    4976:	f1 f7       	brne	.-4      	; 0x4974 <LCD_PrintCharacter+0xe5c>
    4978:	9d ab       	std	Y+53, r25	; 0x35
    497a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    497c:	8e a9       	ldd	r24, Y+54	; 0x36
    497e:	9f a9       	ldd	r25, Y+55	; 0x37
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	9f ab       	std	Y+55, r25	; 0x37
    4984:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4986:	8e a9       	ldd	r24, Y+54	; 0x36
    4988:	9f a9       	ldd	r25, Y+55	; 0x37
    498a:	00 97       	sbiw	r24, 0x00	; 0
    498c:	69 f7       	brne	.-38     	; 0x4968 <LCD_PrintCharacter+0xe50>
    498e:	2d c0       	rjmp	.+90     	; 0x49ea <LCD_PrintCharacter+0xed2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4990:	68 ad       	ldd	r22, Y+56	; 0x38
    4992:	79 ad       	ldd	r23, Y+57	; 0x39
    4994:	8a ad       	ldd	r24, Y+58	; 0x3a
    4996:	9b ad       	ldd	r25, Y+59	; 0x3b
    4998:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	9f ab       	std	Y+55, r25	; 0x37
    49a2:	8e ab       	std	Y+54, r24	; 0x36
    49a4:	8e a9       	ldd	r24, Y+54	; 0x36
    49a6:	9f a9       	ldd	r25, Y+55	; 0x37
    49a8:	9b ab       	std	Y+51, r25	; 0x33
    49aa:	8a ab       	std	Y+50, r24	; 0x32
    49ac:	8a a9       	ldd	r24, Y+50	; 0x32
    49ae:	9b a9       	ldd	r25, Y+51	; 0x33
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <LCD_PrintCharacter+0xe98>
    49b4:	9b ab       	std	Y+51, r25	; 0x33
    49b6:	8a ab       	std	Y+50, r24	; 0x32
    49b8:	18 c0       	rjmp	.+48     	; 0x49ea <LCD_PrintCharacter+0xed2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    49ba:	fe 01       	movw	r30, r28
    49bc:	ef 5b       	subi	r30, 0xBF	; 191
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	60 81       	ld	r22, Z
    49c2:	71 81       	ldd	r23, Z+1	; 0x01
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	fe 01       	movw	r30, r28
    49d2:	e0 5c       	subi	r30, 0xC0	; 192
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	80 83       	st	Z, r24
    49d8:	fe 01       	movw	r30, r28
    49da:	e0 5c       	subi	r30, 0xC0	; 192
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	80 81       	ld	r24, Z
    49e0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    49e2:	89 a9       	ldd	r24, Y+49	; 0x31
    49e4:	8a 95       	dec	r24
    49e6:	f1 f7       	brne	.-4      	; 0x49e4 <LCD_PrintCharacter+0xecc>
    49e8:	89 ab       	std	Y+49, r24	; 0x31
	    	_delay_us(1);
	    	CLEAR_BIT(PORTC, EN_PIN);
    49ea:	a5 e3       	ldi	r26, 0x35	; 53
    49ec:	b0 e0       	ldi	r27, 0x00	; 0
    49ee:	e5 e3       	ldi	r30, 0x35	; 53
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	48 2f       	mov	r20, r24
    49f6:	80 91 4a 02 	lds	r24, 0x024A
    49fa:	28 2f       	mov	r18, r24
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	02 2e       	mov	r0, r18
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <LCD_PrintCharacter+0xef2>
    4a06:	88 0f       	add	r24, r24
    4a08:	99 1f       	adc	r25, r25
    4a0a:	0a 94       	dec	r0
    4a0c:	e2 f7       	brpl	.-8      	; 0x4a06 <LCD_PrintCharacter+0xeee>
    4a0e:	80 95       	com	r24
    4a10:	84 23       	and	r24, r20
    4a12:	8c 93       	st	X, r24
    4a14:	e5 c0       	rjmp	.+458    	; 0x4be0 <LCD_PrintCharacter+0x10c8>
	    	break;
	    case PortD:
	    	SET_BIT(PORTD, EN_PIN);
    4a16:	a2 e3       	ldi	r26, 0x32	; 50
    4a18:	b0 e0       	ldi	r27, 0x00	; 0
    4a1a:	e2 e3       	ldi	r30, 0x32	; 50
    4a1c:	f0 e0       	ldi	r31, 0x00	; 0
    4a1e:	80 81       	ld	r24, Z
    4a20:	48 2f       	mov	r20, r24
    4a22:	80 91 4a 02 	lds	r24, 0x024A
    4a26:	28 2f       	mov	r18, r24
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <LCD_PrintCharacter+0xf1c>
    4a30:	88 0f       	add	r24, r24
    4a32:	99 1f       	adc	r25, r25
    4a34:	2a 95       	dec	r18
    4a36:	e2 f7       	brpl	.-8      	; 0x4a30 <LCD_PrintCharacter+0xf18>
    4a38:	84 2b       	or	r24, r20
    4a3a:	8c 93       	st	X, r24
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	a0 e8       	ldi	r26, 0x80	; 128
    4a42:	bf e3       	ldi	r27, 0x3F	; 63
    4a44:	8d a7       	std	Y+45, r24	; 0x2d
    4a46:	9e a7       	std	Y+46, r25	; 0x2e
    4a48:	af a7       	std	Y+47, r26	; 0x2f
    4a4a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a4c:	6d a5       	ldd	r22, Y+45	; 0x2d
    4a4e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a52:	98 a9       	ldd	r25, Y+48	; 0x30
    4a54:	2b ea       	ldi	r18, 0xAB	; 171
    4a56:	3a ea       	ldi	r19, 0xAA	; 170
    4a58:	4a ea       	ldi	r20, 0xAA	; 170
    4a5a:	50 e4       	ldi	r21, 0x40	; 64
    4a5c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	89 a7       	std	Y+41, r24	; 0x29
    4a66:	9a a7       	std	Y+42, r25	; 0x2a
    4a68:	ab a7       	std	Y+43, r26	; 0x2b
    4a6a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4a6c:	69 a5       	ldd	r22, Y+41	; 0x29
    4a6e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a70:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a72:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a74:	20 e0       	ldi	r18, 0x00	; 0
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	40 e8       	ldi	r20, 0x80	; 128
    4a7a:	5f e3       	ldi	r21, 0x3F	; 63
    4a7c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4a80:	88 23       	and	r24, r24
    4a82:	1c f4       	brge	.+6      	; 0x4a8a <LCD_PrintCharacter+0xf72>
		__ticks = 1;
    4a84:	81 e0       	ldi	r24, 0x01	; 1
    4a86:	88 a7       	std	Y+40, r24	; 0x28
    4a88:	91 c0       	rjmp	.+290    	; 0x4bac <LCD_PrintCharacter+0x1094>
	else if (__tmp > 255)
    4a8a:	69 a5       	ldd	r22, Y+41	; 0x29
    4a8c:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a90:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	53 e4       	ldi	r21, 0x43	; 67
    4a9a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	0c f0       	brlt	.+2      	; 0x4aa4 <LCD_PrintCharacter+0xf8c>
    4aa2:	7b c0       	rjmp	.+246    	; 0x4b9a <LCD_PrintCharacter+0x1082>
	{
		_delay_ms(__us / 1000.0);
    4aa4:	6d a5       	ldd	r22, Y+45	; 0x2d
    4aa6:	7e a5       	ldd	r23, Y+46	; 0x2e
    4aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	4a e7       	ldi	r20, 0x7A	; 122
    4ab2:	54 e4       	ldi	r21, 0x44	; 68
    4ab4:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	8c a3       	std	Y+36, r24	; 0x24
    4abe:	9d a3       	std	Y+37, r25	; 0x25
    4ac0:	ae a3       	std	Y+38, r26	; 0x26
    4ac2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac4:	6c a1       	ldd	r22, Y+36	; 0x24
    4ac6:	7d a1       	ldd	r23, Y+37	; 0x25
    4ac8:	8e a1       	ldd	r24, Y+38	; 0x26
    4aca:	9f a1       	ldd	r25, Y+39	; 0x27
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	4a e7       	ldi	r20, 0x7A	; 122
    4ad2:	55 e4       	ldi	r21, 0x45	; 69
    4ad4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	88 a3       	std	Y+32, r24	; 0x20
    4ade:	99 a3       	std	Y+33, r25	; 0x21
    4ae0:	aa a3       	std	Y+34, r26	; 0x22
    4ae2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4ae4:	68 a1       	ldd	r22, Y+32	; 0x20
    4ae6:	79 a1       	ldd	r23, Y+33	; 0x21
    4ae8:	8a a1       	ldd	r24, Y+34	; 0x22
    4aea:	9b a1       	ldd	r25, Y+35	; 0x23
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	40 e8       	ldi	r20, 0x80	; 128
    4af2:	5f e3       	ldi	r21, 0x3F	; 63
    4af4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4af8:	88 23       	and	r24, r24
    4afa:	2c f4       	brge	.+10     	; 0x4b06 <LCD_PrintCharacter+0xfee>
		__ticks = 1;
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	9f 8f       	std	Y+31, r25	; 0x1f
    4b02:	8e 8f       	std	Y+30, r24	; 0x1e
    4b04:	3f c0       	rjmp	.+126    	; 0x4b84 <LCD_PrintCharacter+0x106c>
	else if (__tmp > 65535)
    4b06:	68 a1       	ldd	r22, Y+32	; 0x20
    4b08:	79 a1       	ldd	r23, Y+33	; 0x21
    4b0a:	8a a1       	ldd	r24, Y+34	; 0x22
    4b0c:	9b a1       	ldd	r25, Y+35	; 0x23
    4b0e:	20 e0       	ldi	r18, 0x00	; 0
    4b10:	3f ef       	ldi	r19, 0xFF	; 255
    4b12:	4f e7       	ldi	r20, 0x7F	; 127
    4b14:	57 e4       	ldi	r21, 0x47	; 71
    4b16:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4b1a:	18 16       	cp	r1, r24
    4b1c:	4c f5       	brge	.+82     	; 0x4b70 <LCD_PrintCharacter+0x1058>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b1e:	6c a1       	ldd	r22, Y+36	; 0x24
    4b20:	7d a1       	ldd	r23, Y+37	; 0x25
    4b22:	8e a1       	ldd	r24, Y+38	; 0x26
    4b24:	9f a1       	ldd	r25, Y+39	; 0x27
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e2       	ldi	r20, 0x20	; 32
    4b2c:	51 e4       	ldi	r21, 0x41	; 65
    4b2e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	9f 8f       	std	Y+31, r25	; 0x1f
    4b44:	8e 8f       	std	Y+30, r24	; 0x1e
    4b46:	0f c0       	rjmp	.+30     	; 0x4b66 <LCD_PrintCharacter+0x104e>
    4b48:	80 e9       	ldi	r24, 0x90	; 144
    4b4a:	91 e0       	ldi	r25, 0x01	; 1
    4b4c:	9d 8f       	std	Y+29, r25	; 0x1d
    4b4e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4b52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <LCD_PrintCharacter+0x103c>
    4b58:	9d 8f       	std	Y+29, r25	; 0x1d
    4b5a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b60:	01 97       	sbiw	r24, 0x01	; 1
    4b62:	9f 8f       	std	Y+31, r25	; 0x1f
    4b64:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b68:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	69 f7       	brne	.-38     	; 0x4b48 <LCD_PrintCharacter+0x1030>
    4b6e:	24 c0       	rjmp	.+72     	; 0x4bb8 <LCD_PrintCharacter+0x10a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b70:	68 a1       	ldd	r22, Y+32	; 0x20
    4b72:	79 a1       	ldd	r23, Y+33	; 0x21
    4b74:	8a a1       	ldd	r24, Y+34	; 0x22
    4b76:	9b a1       	ldd	r25, Y+35	; 0x23
    4b78:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	9f 8f       	std	Y+31, r25	; 0x1f
    4b82:	8e 8f       	std	Y+30, r24	; 0x1e
    4b84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b88:	9b 8f       	std	Y+27, r25	; 0x1b
    4b8a:	8a 8f       	std	Y+26, r24	; 0x1a
    4b8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b90:	01 97       	sbiw	r24, 0x01	; 1
    4b92:	f1 f7       	brne	.-4      	; 0x4b90 <LCD_PrintCharacter+0x1078>
    4b94:	9b 8f       	std	Y+27, r25	; 0x1b
    4b96:	8a 8f       	std	Y+26, r24	; 0x1a
    4b98:	0f c0       	rjmp	.+30     	; 0x4bb8 <LCD_PrintCharacter+0x10a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b9a:	69 a5       	ldd	r22, Y+41	; 0x29
    4b9c:	7a a5       	ldd	r23, Y+42	; 0x2a
    4b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba2:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	88 a7       	std	Y+40, r24	; 0x28
    4bac:	88 a5       	ldd	r24, Y+40	; 0x28
    4bae:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bb0:	89 8d       	ldd	r24, Y+25	; 0x19
    4bb2:	8a 95       	dec	r24
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <LCD_PrintCharacter+0x109a>
    4bb6:	89 8f       	std	Y+25, r24	; 0x19
	    	_delay_us(1);
	    	CLEAR_BIT(PORTD, EN_PIN);
    4bb8:	a2 e3       	ldi	r26, 0x32	; 50
    4bba:	b0 e0       	ldi	r27, 0x00	; 0
    4bbc:	e2 e3       	ldi	r30, 0x32	; 50
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	48 2f       	mov	r20, r24
    4bc4:	80 91 4a 02 	lds	r24, 0x024A
    4bc8:	28 2f       	mov	r18, r24
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	02 c0       	rjmp	.+4      	; 0x4bd6 <LCD_PrintCharacter+0x10be>
    4bd2:	88 0f       	add	r24, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	2a 95       	dec	r18
    4bd8:	e2 f7       	brpl	.-8      	; 0x4bd2 <LCD_PrintCharacter+0x10ba>
    4bda:	80 95       	com	r24
    4bdc:	84 23       	and	r24, r20
    4bde:	8c 93       	st	X, r24
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	a0 e8       	ldi	r26, 0x80	; 128
    4be6:	bf e3       	ldi	r27, 0x3F	; 63
    4be8:	8d 8b       	std	Y+21, r24	; 0x15
    4bea:	9e 8b       	std	Y+22, r25	; 0x16
    4bec:	af 8b       	std	Y+23, r26	; 0x17
    4bee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bf8:	2b ea       	ldi	r18, 0xAB	; 171
    4bfa:	3a ea       	ldi	r19, 0xAA	; 170
    4bfc:	4a ea       	ldi	r20, 0xAA	; 170
    4bfe:	50 e4       	ldi	r21, 0x40	; 64
    4c00:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	89 8b       	std	Y+17, r24	; 0x11
    4c0a:	9a 8b       	std	Y+18, r25	; 0x12
    4c0c:	ab 8b       	std	Y+19, r26	; 0x13
    4c0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c10:	69 89       	ldd	r22, Y+17	; 0x11
    4c12:	7a 89       	ldd	r23, Y+18	; 0x12
    4c14:	8b 89       	ldd	r24, Y+19	; 0x13
    4c16:	9c 89       	ldd	r25, Y+20	; 0x14
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	40 e8       	ldi	r20, 0x80	; 128
    4c1e:	5f e3       	ldi	r21, 0x3F	; 63
    4c20:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4c24:	88 23       	and	r24, r24
    4c26:	1c f4       	brge	.+6      	; 0x4c2e <LCD_PrintCharacter+0x1116>
		__ticks = 1;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	88 8b       	std	Y+16, r24	; 0x10
    4c2c:	91 c0       	rjmp	.+290    	; 0x4d50 <LCD_PrintCharacter+0x1238>
	else if (__tmp > 255)
    4c2e:	69 89       	ldd	r22, Y+17	; 0x11
    4c30:	7a 89       	ldd	r23, Y+18	; 0x12
    4c32:	8b 89       	ldd	r24, Y+19	; 0x13
    4c34:	9c 89       	ldd	r25, Y+20	; 0x14
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	4f e7       	ldi	r20, 0x7F	; 127
    4c3c:	53 e4       	ldi	r21, 0x43	; 67
    4c3e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4c42:	18 16       	cp	r1, r24
    4c44:	0c f0       	brlt	.+2      	; 0x4c48 <LCD_PrintCharacter+0x1130>
    4c46:	7b c0       	rjmp	.+246    	; 0x4d3e <LCD_PrintCharacter+0x1226>
	{
		_delay_ms(__us / 1000.0);
    4c48:	6d 89       	ldd	r22, Y+21	; 0x15
    4c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	4a e7       	ldi	r20, 0x7A	; 122
    4c56:	54 e4       	ldi	r21, 0x44	; 68
    4c58:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	8c 87       	std	Y+12, r24	; 0x0c
    4c62:	9d 87       	std	Y+13, r25	; 0x0d
    4c64:	ae 87       	std	Y+14, r26	; 0x0e
    4c66:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c68:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	4a e7       	ldi	r20, 0x7A	; 122
    4c76:	55 e4       	ldi	r21, 0x45	; 69
    4c78:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	88 87       	std	Y+8, r24	; 0x08
    4c82:	99 87       	std	Y+9, r25	; 0x09
    4c84:	aa 87       	std	Y+10, r26	; 0x0a
    4c86:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c88:	68 85       	ldd	r22, Y+8	; 0x08
    4c8a:	79 85       	ldd	r23, Y+9	; 0x09
    4c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e8       	ldi	r20, 0x80	; 128
    4c96:	5f e3       	ldi	r21, 0x3F	; 63
    4c98:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4c9c:	88 23       	and	r24, r24
    4c9e:	2c f4       	brge	.+10     	; 0x4caa <LCD_PrintCharacter+0x1192>
		__ticks = 1;
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	9f 83       	std	Y+7, r25	; 0x07
    4ca6:	8e 83       	std	Y+6, r24	; 0x06
    4ca8:	3f c0       	rjmp	.+126    	; 0x4d28 <LCD_PrintCharacter+0x1210>
	else if (__tmp > 65535)
    4caa:	68 85       	ldd	r22, Y+8	; 0x08
    4cac:	79 85       	ldd	r23, Y+9	; 0x09
    4cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	3f ef       	ldi	r19, 0xFF	; 255
    4cb6:	4f e7       	ldi	r20, 0x7F	; 127
    4cb8:	57 e4       	ldi	r21, 0x47	; 71
    4cba:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4cbe:	18 16       	cp	r1, r24
    4cc0:	4c f5       	brge	.+82     	; 0x4d14 <LCD_PrintCharacter+0x11fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4cc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e2       	ldi	r20, 0x20	; 32
    4cd0:	51 e4       	ldi	r21, 0x41	; 65
    4cd2:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4cd6:	dc 01       	movw	r26, r24
    4cd8:	cb 01       	movw	r24, r22
    4cda:	bc 01       	movw	r22, r24
    4cdc:	cd 01       	movw	r24, r26
    4cde:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	9f 83       	std	Y+7, r25	; 0x07
    4ce8:	8e 83       	std	Y+6, r24	; 0x06
    4cea:	0f c0       	rjmp	.+30     	; 0x4d0a <LCD_PrintCharacter+0x11f2>
    4cec:	80 e9       	ldi	r24, 0x90	; 144
    4cee:	91 e0       	ldi	r25, 0x01	; 1
    4cf0:	9d 83       	std	Y+5, r25	; 0x05
    4cf2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <LCD_PrintCharacter+0x11e0>
    4cfc:	9d 83       	std	Y+5, r25	; 0x05
    4cfe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d00:	8e 81       	ldd	r24, Y+6	; 0x06
    4d02:	9f 81       	ldd	r25, Y+7	; 0x07
    4d04:	01 97       	sbiw	r24, 0x01	; 1
    4d06:	9f 83       	std	Y+7, r25	; 0x07
    4d08:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4d0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4d0e:	00 97       	sbiw	r24, 0x00	; 0
    4d10:	69 f7       	brne	.-38     	; 0x4cec <LCD_PrintCharacter+0x11d4>
    4d12:	24 c0       	rjmp	.+72     	; 0x4d5c <LCD_PrintCharacter+0x1244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d14:	68 85       	ldd	r22, Y+8	; 0x08
    4d16:	79 85       	ldd	r23, Y+9	; 0x09
    4d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d1c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	9f 83       	std	Y+7, r25	; 0x07
    4d26:	8e 83       	std	Y+6, r24	; 0x06
    4d28:	8e 81       	ldd	r24, Y+6	; 0x06
    4d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d2c:	9b 83       	std	Y+3, r25	; 0x03
    4d2e:	8a 83       	std	Y+2, r24	; 0x02
    4d30:	8a 81       	ldd	r24, Y+2	; 0x02
    4d32:	9b 81       	ldd	r25, Y+3	; 0x03
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	f1 f7       	brne	.-4      	; 0x4d34 <LCD_PrintCharacter+0x121c>
    4d38:	9b 83       	std	Y+3, r25	; 0x03
    4d3a:	8a 83       	std	Y+2, r24	; 0x02
    4d3c:	0f c0       	rjmp	.+30     	; 0x4d5c <LCD_PrintCharacter+0x1244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d3e:	69 89       	ldd	r22, Y+17	; 0x11
    4d40:	7a 89       	ldd	r23, Y+18	; 0x12
    4d42:	8b 89       	ldd	r24, Y+19	; 0x13
    4d44:	9c 89       	ldd	r25, Y+20	; 0x14
    4d46:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	cb 01       	movw	r24, r22
    4d4e:	88 8b       	std	Y+16, r24	; 0x10
    4d50:	88 89       	ldd	r24, Y+16	; 0x10
    4d52:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d54:	89 81       	ldd	r24, Y+1	; 0x01
    4d56:	8a 95       	dec	r24
    4d58:	f1 f7       	brne	.-4      	; 0x4d56 <LCD_PrintCharacter+0x123e>
    4d5a:	89 83       	std	Y+1, r24	; 0x01
	    	break;
	}
	_delay_us(1);
}
    4d5c:	c1 55       	subi	r28, 0x51	; 81
    4d5e:	df 4f       	sbci	r29, 0xFF	; 255
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	de bf       	out	0x3e, r29	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	cd bf       	out	0x3d, r28	; 61
    4d6a:	cf 91       	pop	r28
    4d6c:	df 91       	pop	r29
    4d6e:	1f 91       	pop	r17
    4d70:	0f 91       	pop	r16
    4d72:	08 95       	ret

00004d74 <LCD_PrintString>:

void LCD_PrintString(const uint8* String){
    4d74:	df 93       	push	r29
    4d76:	cf 93       	push	r28
    4d78:	cd b7       	in	r28, 0x3d	; 61
    4d7a:	de b7       	in	r29, 0x3e	; 62
    4d7c:	61 97       	sbiw	r28, 0x11	; 17
    4d7e:	0f b6       	in	r0, 0x3f	; 63
    4d80:	f8 94       	cli
    4d82:	de bf       	out	0x3e, r29	; 62
    4d84:	0f be       	out	0x3f, r0	; 63
    4d86:	cd bf       	out	0x3d, r28	; 61
    4d88:	99 8b       	std	Y+17, r25	; 0x11
    4d8a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    4d8c:	1f 86       	std	Y+15, r1	; 0x0f
    4d8e:	80 c0       	rjmp	.+256    	; 0x4e90 <LCD_PrintString+0x11c>
	while(String[i] != '\0'){
		LCD_PrintCharacter(String[i]);
    4d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d92:	28 2f       	mov	r18, r24
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	88 89       	ldd	r24, Y+16	; 0x10
    4d98:	99 89       	ldd	r25, Y+17	; 0x11
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	e2 0f       	add	r30, r18
    4d9e:	f3 1f       	adc	r31, r19
    4da0:	80 81       	ld	r24, Z
    4da2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD_PrintCharacter>
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	a8 ec       	ldi	r26, 0xC8	; 200
    4dac:	b2 e4       	ldi	r27, 0x42	; 66
    4dae:	8b 87       	std	Y+11, r24	; 0x0b
    4db0:	9c 87       	std	Y+12, r25	; 0x0c
    4db2:	ad 87       	std	Y+13, r26	; 0x0d
    4db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	4a e7       	ldi	r20, 0x7A	; 122
    4dc4:	55 e4       	ldi	r21, 0x45	; 69
    4dc6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4dca:	dc 01       	movw	r26, r24
    4dcc:	cb 01       	movw	r24, r22
    4dce:	8f 83       	std	Y+7, r24	; 0x07
    4dd0:	98 87       	std	Y+8, r25	; 0x08
    4dd2:	a9 87       	std	Y+9, r26	; 0x09
    4dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    4dd8:	78 85       	ldd	r23, Y+8	; 0x08
    4dda:	89 85       	ldd	r24, Y+9	; 0x09
    4ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	40 e8       	ldi	r20, 0x80	; 128
    4de4:	5f e3       	ldi	r21, 0x3F	; 63
    4de6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    4dea:	88 23       	and	r24, r24
    4dec:	2c f4       	brge	.+10     	; 0x4df8 <LCD_PrintString+0x84>
		__ticks = 1;
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	9e 83       	std	Y+6, r25	; 0x06
    4df4:	8d 83       	std	Y+5, r24	; 0x05
    4df6:	3f c0       	rjmp	.+126    	; 0x4e76 <LCD_PrintString+0x102>
	else if (__tmp > 65535)
    4df8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dfa:	78 85       	ldd	r23, Y+8	; 0x08
    4dfc:	89 85       	ldd	r24, Y+9	; 0x09
    4dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	3f ef       	ldi	r19, 0xFF	; 255
    4e04:	4f e7       	ldi	r20, 0x7F	; 127
    4e06:	57 e4       	ldi	r21, 0x47	; 71
    4e08:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    4e0c:	18 16       	cp	r1, r24
    4e0e:	4c f5       	brge	.+82     	; 0x4e62 <LCD_PrintString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e18:	20 e0       	ldi	r18, 0x00	; 0
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	40 e2       	ldi	r20, 0x20	; 32
    4e1e:	51 e4       	ldi	r21, 0x41	; 65
    4e20:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	bc 01       	movw	r22, r24
    4e2a:	cd 01       	movw	r24, r26
    4e2c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	9e 83       	std	Y+6, r25	; 0x06
    4e36:	8d 83       	std	Y+5, r24	; 0x05
    4e38:	0f c0       	rjmp	.+30     	; 0x4e58 <LCD_PrintString+0xe4>
    4e3a:	80 e9       	ldi	r24, 0x90	; 144
    4e3c:	91 e0       	ldi	r25, 0x01	; 1
    4e3e:	9c 83       	std	Y+4, r25	; 0x04
    4e40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e42:	8b 81       	ldd	r24, Y+3	; 0x03
    4e44:	9c 81       	ldd	r25, Y+4	; 0x04
    4e46:	01 97       	sbiw	r24, 0x01	; 1
    4e48:	f1 f7       	brne	.-4      	; 0x4e46 <LCD_PrintString+0xd2>
    4e4a:	9c 83       	std	Y+4, r25	; 0x04
    4e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e50:	9e 81       	ldd	r25, Y+6	; 0x06
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e58:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5c:	00 97       	sbiw	r24, 0x00	; 0
    4e5e:	69 f7       	brne	.-38     	; 0x4e3a <LCD_PrintString+0xc6>
    4e60:	14 c0       	rjmp	.+40     	; 0x4e8a <LCD_PrintString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e62:	6f 81       	ldd	r22, Y+7	; 0x07
    4e64:	78 85       	ldd	r23, Y+8	; 0x08
    4e66:	89 85       	ldd	r24, Y+9	; 0x09
    4e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e6a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	9e 83       	std	Y+6, r25	; 0x06
    4e74:	8d 83       	std	Y+5, r24	; 0x05
    4e76:	8d 81       	ldd	r24, Y+5	; 0x05
    4e78:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7a:	9a 83       	std	Y+2, r25	; 0x02
    4e7c:	89 83       	std	Y+1, r24	; 0x01
    4e7e:	89 81       	ldd	r24, Y+1	; 0x01
    4e80:	9a 81       	ldd	r25, Y+2	; 0x02
    4e82:	01 97       	sbiw	r24, 0x01	; 1
    4e84:	f1 f7       	brne	.-4      	; 0x4e82 <LCD_PrintString+0x10e>
    4e86:	9a 83       	std	Y+2, r25	; 0x02
    4e88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		i++;
    4e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e8c:	8f 5f       	subi	r24, 0xFF	; 255
    4e8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
}

void LCD_PrintString(const uint8* String){
	uint8 i = 0;
	while(String[i] != '\0'){
    4e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e92:	28 2f       	mov	r18, r24
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	88 89       	ldd	r24, Y+16	; 0x10
    4e98:	99 89       	ldd	r25, Y+17	; 0x11
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	e2 0f       	add	r30, r18
    4e9e:	f3 1f       	adc	r31, r19
    4ea0:	80 81       	ld	r24, Z
    4ea2:	88 23       	and	r24, r24
    4ea4:	09 f0       	breq	.+2      	; 0x4ea8 <LCD_PrintString+0x134>
    4ea6:	74 cf       	rjmp	.-280    	; 0x4d90 <LCD_PrintString+0x1c>
		LCD_PrintCharacter(String[i]);
		_delay_ms(100);
		i++;
	}
}
    4ea8:	61 96       	adiw	r28, 0x11	; 17
    4eaa:	0f b6       	in	r0, 0x3f	; 63
    4eac:	f8 94       	cli
    4eae:	de bf       	out	0x3e, r29	; 62
    4eb0:	0f be       	out	0x3f, r0	; 63
    4eb2:	cd bf       	out	0x3d, r28	; 61
    4eb4:	cf 91       	pop	r28
    4eb6:	df 91       	pop	r29
    4eb8:	08 95       	ret

00004eba <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    4eba:	df 93       	push	r29
    4ebc:	cf 93       	push	r28
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
    4ec2:	62 97       	sbiw	r28, 0x12	; 18
    4ec4:	0f b6       	in	r0, 0x3f	; 63
    4ec6:	f8 94       	cli
    4ec8:	de bf       	out	0x3e, r29	; 62
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	cd bf       	out	0x3d, r28	; 61
    4ece:	9a 8b       	std	Y+18, r25	; 0x12
    4ed0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data,buff,10);
    4ed2:	89 89       	ldd	r24, Y+17	; 0x11
    4ed4:	9a 89       	ldd	r25, Y+18	; 0x12
    4ed6:	9e 01       	movw	r18, r28
    4ed8:	2f 5f       	subi	r18, 0xFF	; 255
    4eda:	3f 4f       	sbci	r19, 0xFF	; 255
    4edc:	b9 01       	movw	r22, r18
    4ede:	4a e0       	ldi	r20, 0x0A	; 10
    4ee0:	50 e0       	ldi	r21, 0x00	; 0
    4ee2:	0e 94 df 4f 	call	0x9fbe	; 0x9fbe <itoa>
   LCD_PrintString(buff);
    4ee6:	ce 01       	movw	r24, r28
    4ee8:	01 96       	adiw	r24, 0x01	; 1
    4eea:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
}
    4eee:	62 96       	adiw	r28, 0x12	; 18
    4ef0:	0f b6       	in	r0, 0x3f	; 63
    4ef2:	f8 94       	cli
    4ef4:	de bf       	out	0x3e, r29	; 62
    4ef6:	0f be       	out	0x3f, r0	; 63
    4ef8:	cd bf       	out	0x3d, r28	; 61
    4efa:	cf 91       	pop	r28
    4efc:	df 91       	pop	r29
    4efe:	08 95       	ret

00004f00 <LDR_readint>:

uint8 HI[11] = "Lights on.";
uint8 LO[12] = "Lights off.";

uint16 LDR_readint(void)
{
    4f00:	2f 92       	push	r2
    4f02:	3f 92       	push	r3
    4f04:	4f 92       	push	r4
    4f06:	5f 92       	push	r5
    4f08:	6f 92       	push	r6
    4f0a:	7f 92       	push	r7
    4f0c:	8f 92       	push	r8
    4f0e:	9f 92       	push	r9
    4f10:	af 92       	push	r10
    4f12:	bf 92       	push	r11
    4f14:	cf 92       	push	r12
    4f16:	df 92       	push	r13
    4f18:	ef 92       	push	r14
    4f1a:	ff 92       	push	r15
    4f1c:	0f 93       	push	r16
    4f1e:	1f 93       	push	r17
    4f20:	df 93       	push	r29
    4f22:	cf 93       	push	r28
    4f24:	00 d0       	rcall	.+0      	; 0x4f26 <LDR_readint+0x26>
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <LDR_readint+0x28>
    4f28:	cd b7       	in	r28, 0x3d	; 61
    4f2a:	de b7       	in	r29, 0x3e	; 62
	uint16 int_value = 0;
    4f2c:	1c 82       	std	Y+4, r1	; 0x04
    4f2e:	1b 82       	std	Y+3, r1	; 0x03
    uint16 adc_value = 0;
    4f30:	1a 82       	std	Y+2, r1	; 0x02
    4f32:	19 82       	std	Y+1, r1	; 0x01
    adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ADC_readChannel>
    4f3a:	9a 83       	std	Y+2, r25	; 0x02
    4f3c:	89 83       	std	Y+1, r24	; 0x01
	int_value = (uint16)(((uint64)adc_value*SENSOR_MAX_INTENSITY*ADC_V_REF)/(MAX_VALUE_ADC_REP*SENSOR_MAX_VOLT_VALUE));
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	9a 81       	ldd	r25, Y+2	; 0x02
    4f42:	5c 01       	movw	r10, r24
    4f44:	cc 24       	eor	r12, r12
    4f46:	dd 24       	eor	r13, r13
    4f48:	ee 24       	eor	r14, r14
    4f4a:	ff 24       	eor	r15, r15
    4f4c:	87 01       	movw	r16, r14
    4f4e:	2a 2d       	mov	r18, r10
    4f50:	3b 2d       	mov	r19, r11
    4f52:	4c 2d       	mov	r20, r12
    4f54:	5d 2d       	mov	r21, r13
    4f56:	6e 2d       	mov	r22, r14
    4f58:	7f 2d       	mov	r23, r15
    4f5a:	80 2f       	mov	r24, r16
    4f5c:	91 2f       	mov	r25, r17
    4f5e:	0f 2e       	mov	r0, r31
    4f60:	f8 e8       	ldi	r31, 0x88	; 136
    4f62:	af 2e       	mov	r10, r31
    4f64:	f0 2d       	mov	r31, r0
    4f66:	0f 2e       	mov	r0, r31
    4f68:	f3 e1       	ldi	r31, 0x13	; 19
    4f6a:	bf 2e       	mov	r11, r31
    4f6c:	f0 2d       	mov	r31, r0
    4f6e:	cc 24       	eor	r12, r12
    4f70:	dd 24       	eor	r13, r13
    4f72:	ee 24       	eor	r14, r14
    4f74:	ff 24       	eor	r15, r15
    4f76:	00 e0       	ldi	r16, 0x00	; 0
    4f78:	10 e0       	ldi	r17, 0x00	; 0
    4f7a:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    4f7e:	22 2e       	mov	r2, r18
    4f80:	33 2e       	mov	r3, r19
    4f82:	44 2e       	mov	r4, r20
    4f84:	55 2e       	mov	r5, r21
    4f86:	66 2e       	mov	r6, r22
    4f88:	77 2e       	mov	r7, r23
    4f8a:	88 2e       	mov	r8, r24
    4f8c:	99 2e       	mov	r9, r25
    4f8e:	a2 2c       	mov	r10, r2
    4f90:	b3 2c       	mov	r11, r3
    4f92:	c4 2c       	mov	r12, r4
    4f94:	d5 2c       	mov	r13, r5
    4f96:	e6 2c       	mov	r14, r6
    4f98:	f7 2c       	mov	r15, r7
    4f9a:	08 2d       	mov	r16, r8
    4f9c:	19 2d       	mov	r17, r9
    4f9e:	2a 2d       	mov	r18, r10
    4fa0:	3b 2d       	mov	r19, r11
    4fa2:	4c 2d       	mov	r20, r12
    4fa4:	5d 2d       	mov	r21, r13
    4fa6:	6e 2d       	mov	r22, r14
    4fa8:	7f 2d       	mov	r23, r15
    4faa:	80 2f       	mov	r24, r16
    4fac:	91 2f       	mov	r25, r17
    4fae:	0f 2e       	mov	r0, r31
    4fb0:	fb ef       	ldi	r31, 0xFB	; 251
    4fb2:	af 2e       	mov	r10, r31
    4fb4:	f0 2d       	mov	r31, r0
    4fb6:	0f 2e       	mov	r0, r31
    4fb8:	f3 e1       	ldi	r31, 0x13	; 19
    4fba:	bf 2e       	mov	r11, r31
    4fbc:	f0 2d       	mov	r31, r0
    4fbe:	cc 24       	eor	r12, r12
    4fc0:	dd 24       	eor	r13, r13
    4fc2:	ee 24       	eor	r14, r14
    4fc4:	ff 24       	eor	r15, r15
    4fc6:	00 e0       	ldi	r16, 0x00	; 0
    4fc8:	10 e0       	ldi	r17, 0x00	; 0
    4fca:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__udivdi3>
    4fce:	a2 2e       	mov	r10, r18
    4fd0:	b3 2e       	mov	r11, r19
    4fd2:	c4 2e       	mov	r12, r20
    4fd4:	d5 2e       	mov	r13, r21
    4fd6:	e6 2e       	mov	r14, r22
    4fd8:	f7 2e       	mov	r15, r23
    4fda:	08 2f       	mov	r16, r24
    4fdc:	19 2f       	mov	r17, r25
    4fde:	2a 2d       	mov	r18, r10
    4fe0:	3b 2d       	mov	r19, r11
    4fe2:	4c 2d       	mov	r20, r12
    4fe4:	5d 2d       	mov	r21, r13
    4fe6:	6e 2d       	mov	r22, r14
    4fe8:	7f 2d       	mov	r23, r15
    4fea:	80 2f       	mov	r24, r16
    4fec:	91 2f       	mov	r25, r17
    4fee:	3c 83       	std	Y+4, r19	; 0x04
    4ff0:	2b 83       	std	Y+3, r18	; 0x03
	return int_value;
    4ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4ff6:	0f 90       	pop	r0
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0
    4ffe:	cf 91       	pop	r28
    5000:	df 91       	pop	r29
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	ef 90       	pop	r14
    500a:	df 90       	pop	r13
    500c:	cf 90       	pop	r12
    500e:	bf 90       	pop	r11
    5010:	af 90       	pop	r10
    5012:	9f 90       	pop	r9
    5014:	8f 90       	pop	r8
    5016:	7f 90       	pop	r7
    5018:	6f 90       	pop	r6
    501a:	5f 90       	pop	r5
    501c:	4f 90       	pop	r4
    501e:	3f 90       	pop	r3
    5020:	2f 90       	pop	r2
    5022:	08 95       	ret

00005024 <LDR_check>:

void LDR_check()
{
    5024:	0f 93       	push	r16
    5026:	1f 93       	push	r17
    5028:	df 93       	push	r29
    502a:	cf 93       	push	r28
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
    5030:	c0 57       	subi	r28, 0x70	; 112
    5032:	d0 40       	sbci	r29, 0x00	; 0
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
	/* if it less than 400 lights on */
	if(LDR_readint() <= 400)
    503e:	0e 94 80 27 	call	0x4f00	; 0x4f00 <LDR_readint>
    5042:	21 e0       	ldi	r18, 0x01	; 1
    5044:	81 39       	cpi	r24, 0x91	; 145
    5046:	92 07       	cpc	r25, r18
    5048:	08 f0       	brcs	.+2      	; 0x504c <LDR_check+0x28>
    504a:	c2 c2       	rjmp	.+1412   	; 0x55d0 <LDR_check+0x5ac>
	{
		SET_BIT(PORTA,7);
    504c:	ab e3       	ldi	r26, 0x3B	; 59
    504e:	b0 e0       	ldi	r27, 0x00	; 0
    5050:	eb e3       	ldi	r30, 0x3B	; 59
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	80 81       	ld	r24, Z
    5056:	80 68       	ori	r24, 0x80	; 128
    5058:	8c 93       	st	X, r24
		SET_BIT(PORTA,6);
    505a:	ab e3       	ldi	r26, 0x3B	; 59
    505c:	b0 e0       	ldi	r27, 0x00	; 0
    505e:	eb e3       	ldi	r30, 0x3B	; 59
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	80 81       	ld	r24, Z
    5064:	80 64       	ori	r24, 0x40	; 64
    5066:	8c 93       	st	X, r24
		SET_BIT(PORTA,5);
    5068:	ab e3       	ldi	r26, 0x3B	; 59
    506a:	b0 e0       	ldi	r27, 0x00	; 0
    506c:	eb e3       	ldi	r30, 0x3B	; 59
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	80 81       	ld	r24, Z
    5072:	80 62       	ori	r24, 0x20	; 32
    5074:	8c 93       	st	X, r24

		LCD_SendCommand(DISPLAY_CLEAR);
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    507c:	fe 01       	movw	r30, r28
    507e:	e3 59       	subi	r30, 0x93	; 147
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	a0 ea       	ldi	r26, 0xA0	; 160
    5088:	b1 e4       	ldi	r27, 0x41	; 65
    508a:	80 83       	st	Z, r24
    508c:	91 83       	std	Z+1, r25	; 0x01
    508e:	a2 83       	std	Z+2, r26	; 0x02
    5090:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5092:	8e 01       	movw	r16, r28
    5094:	07 59       	subi	r16, 0x97	; 151
    5096:	1f 4f       	sbci	r17, 0xFF	; 255
    5098:	fe 01       	movw	r30, r28
    509a:	e3 59       	subi	r30, 0x93	; 147
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	60 81       	ld	r22, Z
    50a0:	71 81       	ldd	r23, Z+1	; 0x01
    50a2:	82 81       	ldd	r24, Z+2	; 0x02
    50a4:	93 81       	ldd	r25, Z+3	; 0x03
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	4a e7       	ldi	r20, 0x7A	; 122
    50ac:	55 e4       	ldi	r21, 0x45	; 69
    50ae:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    50b2:	dc 01       	movw	r26, r24
    50b4:	cb 01       	movw	r24, r22
    50b6:	f8 01       	movw	r30, r16
    50b8:	80 83       	st	Z, r24
    50ba:	91 83       	std	Z+1, r25	; 0x01
    50bc:	a2 83       	std	Z+2, r26	; 0x02
    50be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50c0:	fe 01       	movw	r30, r28
    50c2:	e7 59       	subi	r30, 0x97	; 151
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	60 81       	ld	r22, Z
    50c8:	71 81       	ldd	r23, Z+1	; 0x01
    50ca:	82 81       	ldd	r24, Z+2	; 0x02
    50cc:	93 81       	ldd	r25, Z+3	; 0x03
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	40 e8       	ldi	r20, 0x80	; 128
    50d4:	5f e3       	ldi	r21, 0x3F	; 63
    50d6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    50da:	88 23       	and	r24, r24
    50dc:	44 f4       	brge	.+16     	; 0x50ee <LDR_check+0xca>
		__ticks = 1;
    50de:	fe 01       	movw	r30, r28
    50e0:	e9 59       	subi	r30, 0x99	; 153
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	81 e0       	ldi	r24, 0x01	; 1
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	91 83       	std	Z+1, r25	; 0x01
    50ea:	80 83       	st	Z, r24
    50ec:	64 c0       	rjmp	.+200    	; 0x51b6 <LDR_check+0x192>
	else if (__tmp > 65535)
    50ee:	fe 01       	movw	r30, r28
    50f0:	e7 59       	subi	r30, 0x97	; 151
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	60 81       	ld	r22, Z
    50f6:	71 81       	ldd	r23, Z+1	; 0x01
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	93 81       	ldd	r25, Z+3	; 0x03
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	3f ef       	ldi	r19, 0xFF	; 255
    5100:	4f e7       	ldi	r20, 0x7F	; 127
    5102:	57 e4       	ldi	r21, 0x47	; 71
    5104:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5108:	18 16       	cp	r1, r24
    510a:	0c f0       	brlt	.+2      	; 0x510e <LDR_check+0xea>
    510c:	43 c0       	rjmp	.+134    	; 0x5194 <LDR_check+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    510e:	fe 01       	movw	r30, r28
    5110:	e3 59       	subi	r30, 0x93	; 147
    5112:	ff 4f       	sbci	r31, 0xFF	; 255
    5114:	60 81       	ld	r22, Z
    5116:	71 81       	ldd	r23, Z+1	; 0x01
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e2       	ldi	r20, 0x20	; 32
    5122:	51 e4       	ldi	r21, 0x41	; 65
    5124:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	8e 01       	movw	r16, r28
    512e:	09 59       	subi	r16, 0x99	; 153
    5130:	1f 4f       	sbci	r17, 0xFF	; 255
    5132:	bc 01       	movw	r22, r24
    5134:	cd 01       	movw	r24, r26
    5136:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	f8 01       	movw	r30, r16
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	80 83       	st	Z, r24
    5144:	1f c0       	rjmp	.+62     	; 0x5184 <LDR_check+0x160>
    5146:	fe 01       	movw	r30, r28
    5148:	eb 59       	subi	r30, 0x9B	; 155
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	80 e9       	ldi	r24, 0x90	; 144
    514e:	91 e0       	ldi	r25, 0x01	; 1
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
    5154:	fe 01       	movw	r30, r28
    5156:	eb 59       	subi	r30, 0x9B	; 155
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	91 81       	ldd	r25, Z+1	; 0x01
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	f1 f7       	brne	.-4      	; 0x515e <LDR_check+0x13a>
    5162:	fe 01       	movw	r30, r28
    5164:	eb 59       	subi	r30, 0x9B	; 155
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	91 83       	std	Z+1, r25	; 0x01
    516a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    516c:	de 01       	movw	r26, r28
    516e:	a9 59       	subi	r26, 0x99	; 153
    5170:	bf 4f       	sbci	r27, 0xFF	; 255
    5172:	fe 01       	movw	r30, r28
    5174:	e9 59       	subi	r30, 0x99	; 153
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	91 81       	ldd	r25, Z+1	; 0x01
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	11 96       	adiw	r26, 0x01	; 1
    5180:	9c 93       	st	X, r25
    5182:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5184:	fe 01       	movw	r30, r28
    5186:	e9 59       	subi	r30, 0x99	; 153
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	00 97       	sbiw	r24, 0x00	; 0
    5190:	d1 f6       	brne	.-76     	; 0x5146 <LDR_check+0x122>
    5192:	27 c0       	rjmp	.+78     	; 0x51e2 <LDR_check+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5194:	8e 01       	movw	r16, r28
    5196:	09 59       	subi	r16, 0x99	; 153
    5198:	1f 4f       	sbci	r17, 0xFF	; 255
    519a:	fe 01       	movw	r30, r28
    519c:	e7 59       	subi	r30, 0x97	; 151
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	60 81       	ld	r22, Z
    51a2:	71 81       	ldd	r23, Z+1	; 0x01
    51a4:	82 81       	ldd	r24, Z+2	; 0x02
    51a6:	93 81       	ldd	r25, Z+3	; 0x03
    51a8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    51ac:	dc 01       	movw	r26, r24
    51ae:	cb 01       	movw	r24, r22
    51b0:	f8 01       	movw	r30, r16
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
    51b6:	de 01       	movw	r26, r28
    51b8:	ad 59       	subi	r26, 0x9D	; 157
    51ba:	bf 4f       	sbci	r27, 0xFF	; 255
    51bc:	fe 01       	movw	r30, r28
    51be:	e9 59       	subi	r30, 0x99	; 153
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	8d 93       	st	X+, r24
    51c8:	9c 93       	st	X, r25
    51ca:	fe 01       	movw	r30, r28
    51cc:	ed 59       	subi	r30, 0x9D	; 157
    51ce:	ff 4f       	sbci	r31, 0xFF	; 255
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	f1 f7       	brne	.-4      	; 0x51d4 <LDR_check+0x1b0>
    51d8:	fe 01       	movw	r30, r28
    51da:	ed 59       	subi	r30, 0x9D	; 157
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24
		_delay_ms(20);
		LCD_PrintString(HI);
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	92 e0       	ldi	r25, 0x02	; 2
    51e6:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    51ea:	fe 01       	movw	r30, r28
    51ec:	e1 5a       	subi	r30, 0xA1	; 161
    51ee:	ff 4f       	sbci	r31, 0xFF	; 255
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	a0 ea       	ldi	r26, 0xA0	; 160
    51f6:	b1 e4       	ldi	r27, 0x41	; 65
    51f8:	80 83       	st	Z, r24
    51fa:	91 83       	std	Z+1, r25	; 0x01
    51fc:	a2 83       	std	Z+2, r26	; 0x02
    51fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5200:	8e 01       	movw	r16, r28
    5202:	05 5a       	subi	r16, 0xA5	; 165
    5204:	1f 4f       	sbci	r17, 0xFF	; 255
    5206:	fe 01       	movw	r30, r28
    5208:	e1 5a       	subi	r30, 0xA1	; 161
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	60 81       	ld	r22, Z
    520e:	71 81       	ldd	r23, Z+1	; 0x01
    5210:	82 81       	ldd	r24, Z+2	; 0x02
    5212:	93 81       	ldd	r25, Z+3	; 0x03
    5214:	20 e0       	ldi	r18, 0x00	; 0
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	4a e7       	ldi	r20, 0x7A	; 122
    521a:	55 e4       	ldi	r21, 0x45	; 69
    521c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5220:	dc 01       	movw	r26, r24
    5222:	cb 01       	movw	r24, r22
    5224:	f8 01       	movw	r30, r16
    5226:	80 83       	st	Z, r24
    5228:	91 83       	std	Z+1, r25	; 0x01
    522a:	a2 83       	std	Z+2, r26	; 0x02
    522c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    522e:	fe 01       	movw	r30, r28
    5230:	e5 5a       	subi	r30, 0xA5	; 165
    5232:	ff 4f       	sbci	r31, 0xFF	; 255
    5234:	60 81       	ld	r22, Z
    5236:	71 81       	ldd	r23, Z+1	; 0x01
    5238:	82 81       	ldd	r24, Z+2	; 0x02
    523a:	93 81       	ldd	r25, Z+3	; 0x03
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e8       	ldi	r20, 0x80	; 128
    5242:	5f e3       	ldi	r21, 0x3F	; 63
    5244:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5248:	88 23       	and	r24, r24
    524a:	44 f4       	brge	.+16     	; 0x525c <LDR_check+0x238>
		__ticks = 1;
    524c:	fe 01       	movw	r30, r28
    524e:	e7 5a       	subi	r30, 0xA7	; 167
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	80 83       	st	Z, r24
    525a:	64 c0       	rjmp	.+200    	; 0x5324 <LDR_check+0x300>
	else if (__tmp > 65535)
    525c:	fe 01       	movw	r30, r28
    525e:	e5 5a       	subi	r30, 0xA5	; 165
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	60 81       	ld	r22, Z
    5264:	71 81       	ldd	r23, Z+1	; 0x01
    5266:	82 81       	ldd	r24, Z+2	; 0x02
    5268:	93 81       	ldd	r25, Z+3	; 0x03
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	3f ef       	ldi	r19, 0xFF	; 255
    526e:	4f e7       	ldi	r20, 0x7F	; 127
    5270:	57 e4       	ldi	r21, 0x47	; 71
    5272:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5276:	18 16       	cp	r1, r24
    5278:	0c f0       	brlt	.+2      	; 0x527c <LDR_check+0x258>
    527a:	43 c0       	rjmp	.+134    	; 0x5302 <LDR_check+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527c:	fe 01       	movw	r30, r28
    527e:	e1 5a       	subi	r30, 0xA1	; 161
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	40 e2       	ldi	r20, 0x20	; 32
    5290:	51 e4       	ldi	r21, 0x41	; 65
    5292:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	8e 01       	movw	r16, r28
    529c:	07 5a       	subi	r16, 0xA7	; 167
    529e:	1f 4f       	sbci	r17, 0xFF	; 255
    52a0:	bc 01       	movw	r22, r24
    52a2:	cd 01       	movw	r24, r26
    52a4:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	f8 01       	movw	r30, r16
    52ae:	91 83       	std	Z+1, r25	; 0x01
    52b0:	80 83       	st	Z, r24
    52b2:	1f c0       	rjmp	.+62     	; 0x52f2 <LDR_check+0x2ce>
    52b4:	fe 01       	movw	r30, r28
    52b6:	e9 5a       	subi	r30, 0xA9	; 169
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	80 e9       	ldi	r24, 0x90	; 144
    52bc:	91 e0       	ldi	r25, 0x01	; 1
    52be:	91 83       	std	Z+1, r25	; 0x01
    52c0:	80 83       	st	Z, r24
    52c2:	fe 01       	movw	r30, r28
    52c4:	e9 5a       	subi	r30, 0xA9	; 169
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <LDR_check+0x2a8>
    52d0:	fe 01       	movw	r30, r28
    52d2:	e9 5a       	subi	r30, 0xA9	; 169
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52da:	de 01       	movw	r26, r28
    52dc:	a7 5a       	subi	r26, 0xA7	; 167
    52de:	bf 4f       	sbci	r27, 0xFF	; 255
    52e0:	fe 01       	movw	r30, r28
    52e2:	e7 5a       	subi	r30, 0xA7	; 167
    52e4:	ff 4f       	sbci	r31, 0xFF	; 255
    52e6:	80 81       	ld	r24, Z
    52e8:	91 81       	ldd	r25, Z+1	; 0x01
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	11 96       	adiw	r26, 0x01	; 1
    52ee:	9c 93       	st	X, r25
    52f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52f2:	fe 01       	movw	r30, r28
    52f4:	e7 5a       	subi	r30, 0xA7	; 167
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	80 81       	ld	r24, Z
    52fa:	91 81       	ldd	r25, Z+1	; 0x01
    52fc:	00 97       	sbiw	r24, 0x00	; 0
    52fe:	d1 f6       	brne	.-76     	; 0x52b4 <LDR_check+0x290>
    5300:	27 c0       	rjmp	.+78     	; 0x5350 <LDR_check+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5302:	8e 01       	movw	r16, r28
    5304:	07 5a       	subi	r16, 0xA7	; 167
    5306:	1f 4f       	sbci	r17, 0xFF	; 255
    5308:	fe 01       	movw	r30, r28
    530a:	e5 5a       	subi	r30, 0xA5	; 165
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	60 81       	ld	r22, Z
    5310:	71 81       	ldd	r23, Z+1	; 0x01
    5312:	82 81       	ldd	r24, Z+2	; 0x02
    5314:	93 81       	ldd	r25, Z+3	; 0x03
    5316:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    531a:	dc 01       	movw	r26, r24
    531c:	cb 01       	movw	r24, r22
    531e:	f8 01       	movw	r30, r16
    5320:	91 83       	std	Z+1, r25	; 0x01
    5322:	80 83       	st	Z, r24
    5324:	de 01       	movw	r26, r28
    5326:	ab 5a       	subi	r26, 0xAB	; 171
    5328:	bf 4f       	sbci	r27, 0xFF	; 255
    532a:	fe 01       	movw	r30, r28
    532c:	e7 5a       	subi	r30, 0xA7	; 167
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	80 81       	ld	r24, Z
    5332:	91 81       	ldd	r25, Z+1	; 0x01
    5334:	8d 93       	st	X+, r24
    5336:	9c 93       	st	X, r25
    5338:	fe 01       	movw	r30, r28
    533a:	eb 5a       	subi	r30, 0xAB	; 171
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	80 81       	ld	r24, Z
    5340:	91 81       	ldd	r25, Z+1	; 0x01
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <LDR_check+0x31e>
    5346:	fe 01       	movw	r30, r28
    5348:	eb 5a       	subi	r30, 0xAB	; 171
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	91 83       	std	Z+1, r25	; 0x01
    534e:	80 83       	st	Z, r24
		_delay_ms(20);
		LCD_SendCommand(NEXT_LINE);
    5350:	80 ec       	ldi	r24, 0xC0	; 192
    5352:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    5356:	fe 01       	movw	r30, r28
    5358:	ef 5a       	subi	r30, 0xAF	; 175
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	a0 ea       	ldi	r26, 0xA0	; 160
    5362:	b1 e4       	ldi	r27, 0x41	; 65
    5364:	80 83       	st	Z, r24
    5366:	91 83       	std	Z+1, r25	; 0x01
    5368:	a2 83       	std	Z+2, r26	; 0x02
    536a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    536c:	8e 01       	movw	r16, r28
    536e:	03 5b       	subi	r16, 0xB3	; 179
    5370:	1f 4f       	sbci	r17, 0xFF	; 255
    5372:	fe 01       	movw	r30, r28
    5374:	ef 5a       	subi	r30, 0xAF	; 175
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	60 81       	ld	r22, Z
    537a:	71 81       	ldd	r23, Z+1	; 0x01
    537c:	82 81       	ldd	r24, Z+2	; 0x02
    537e:	93 81       	ldd	r25, Z+3	; 0x03
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	4a e7       	ldi	r20, 0x7A	; 122
    5386:	55 e4       	ldi	r21, 0x45	; 69
    5388:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    538c:	dc 01       	movw	r26, r24
    538e:	cb 01       	movw	r24, r22
    5390:	f8 01       	movw	r30, r16
    5392:	80 83       	st	Z, r24
    5394:	91 83       	std	Z+1, r25	; 0x01
    5396:	a2 83       	std	Z+2, r26	; 0x02
    5398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    539a:	fe 01       	movw	r30, r28
    539c:	e3 5b       	subi	r30, 0xB3	; 179
    539e:	ff 4f       	sbci	r31, 0xFF	; 255
    53a0:	60 81       	ld	r22, Z
    53a2:	71 81       	ldd	r23, Z+1	; 0x01
    53a4:	82 81       	ldd	r24, Z+2	; 0x02
    53a6:	93 81       	ldd	r25, Z+3	; 0x03
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	40 e8       	ldi	r20, 0x80	; 128
    53ae:	5f e3       	ldi	r21, 0x3F	; 63
    53b0:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    53b4:	88 23       	and	r24, r24
    53b6:	44 f4       	brge	.+16     	; 0x53c8 <LDR_check+0x3a4>
		__ticks = 1;
    53b8:	fe 01       	movw	r30, r28
    53ba:	e5 5b       	subi	r30, 0xB5	; 181
    53bc:	ff 4f       	sbci	r31, 0xFF	; 255
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	91 83       	std	Z+1, r25	; 0x01
    53c4:	80 83       	st	Z, r24
    53c6:	64 c0       	rjmp	.+200    	; 0x5490 <LDR_check+0x46c>
	else if (__tmp > 65535)
    53c8:	fe 01       	movw	r30, r28
    53ca:	e3 5b       	subi	r30, 0xB3	; 179
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	60 81       	ld	r22, Z
    53d0:	71 81       	ldd	r23, Z+1	; 0x01
    53d2:	82 81       	ldd	r24, Z+2	; 0x02
    53d4:	93 81       	ldd	r25, Z+3	; 0x03
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	3f ef       	ldi	r19, 0xFF	; 255
    53da:	4f e7       	ldi	r20, 0x7F	; 127
    53dc:	57 e4       	ldi	r21, 0x47	; 71
    53de:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    53e2:	18 16       	cp	r1, r24
    53e4:	0c f0       	brlt	.+2      	; 0x53e8 <LDR_check+0x3c4>
    53e6:	43 c0       	rjmp	.+134    	; 0x546e <LDR_check+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e8:	fe 01       	movw	r30, r28
    53ea:	ef 5a       	subi	r30, 0xAF	; 175
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	60 81       	ld	r22, Z
    53f0:	71 81       	ldd	r23, Z+1	; 0x01
    53f2:	82 81       	ldd	r24, Z+2	; 0x02
    53f4:	93 81       	ldd	r25, Z+3	; 0x03
    53f6:	20 e0       	ldi	r18, 0x00	; 0
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	40 e2       	ldi	r20, 0x20	; 32
    53fc:	51 e4       	ldi	r21, 0x41	; 65
    53fe:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5402:	dc 01       	movw	r26, r24
    5404:	cb 01       	movw	r24, r22
    5406:	8e 01       	movw	r16, r28
    5408:	05 5b       	subi	r16, 0xB5	; 181
    540a:	1f 4f       	sbci	r17, 0xFF	; 255
    540c:	bc 01       	movw	r22, r24
    540e:	cd 01       	movw	r24, r26
    5410:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	f8 01       	movw	r30, r16
    541a:	91 83       	std	Z+1, r25	; 0x01
    541c:	80 83       	st	Z, r24
    541e:	1f c0       	rjmp	.+62     	; 0x545e <LDR_check+0x43a>
    5420:	fe 01       	movw	r30, r28
    5422:	e7 5b       	subi	r30, 0xB7	; 183
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	80 e9       	ldi	r24, 0x90	; 144
    5428:	91 e0       	ldi	r25, 0x01	; 1
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	80 83       	st	Z, r24
    542e:	fe 01       	movw	r30, r28
    5430:	e7 5b       	subi	r30, 0xB7	; 183
    5432:	ff 4f       	sbci	r31, 0xFF	; 255
    5434:	80 81       	ld	r24, Z
    5436:	91 81       	ldd	r25, Z+1	; 0x01
    5438:	01 97       	sbiw	r24, 0x01	; 1
    543a:	f1 f7       	brne	.-4      	; 0x5438 <LDR_check+0x414>
    543c:	fe 01       	movw	r30, r28
    543e:	e7 5b       	subi	r30, 0xB7	; 183
    5440:	ff 4f       	sbci	r31, 0xFF	; 255
    5442:	91 83       	std	Z+1, r25	; 0x01
    5444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5446:	de 01       	movw	r26, r28
    5448:	a5 5b       	subi	r26, 0xB5	; 181
    544a:	bf 4f       	sbci	r27, 0xFF	; 255
    544c:	fe 01       	movw	r30, r28
    544e:	e5 5b       	subi	r30, 0xB5	; 181
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	80 81       	ld	r24, Z
    5454:	91 81       	ldd	r25, Z+1	; 0x01
    5456:	01 97       	sbiw	r24, 0x01	; 1
    5458:	11 96       	adiw	r26, 0x01	; 1
    545a:	9c 93       	st	X, r25
    545c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545e:	fe 01       	movw	r30, r28
    5460:	e5 5b       	subi	r30, 0xB5	; 181
    5462:	ff 4f       	sbci	r31, 0xFF	; 255
    5464:	80 81       	ld	r24, Z
    5466:	91 81       	ldd	r25, Z+1	; 0x01
    5468:	00 97       	sbiw	r24, 0x00	; 0
    546a:	d1 f6       	brne	.-76     	; 0x5420 <LDR_check+0x3fc>
    546c:	27 c0       	rjmp	.+78     	; 0x54bc <LDR_check+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    546e:	8e 01       	movw	r16, r28
    5470:	05 5b       	subi	r16, 0xB5	; 181
    5472:	1f 4f       	sbci	r17, 0xFF	; 255
    5474:	fe 01       	movw	r30, r28
    5476:	e3 5b       	subi	r30, 0xB3	; 179
    5478:	ff 4f       	sbci	r31, 0xFF	; 255
    547a:	60 81       	ld	r22, Z
    547c:	71 81       	ldd	r23, Z+1	; 0x01
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	93 81       	ldd	r25, Z+3	; 0x03
    5482:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	f8 01       	movw	r30, r16
    548c:	91 83       	std	Z+1, r25	; 0x01
    548e:	80 83       	st	Z, r24
    5490:	de 01       	movw	r26, r28
    5492:	a9 5b       	subi	r26, 0xB9	; 185
    5494:	bf 4f       	sbci	r27, 0xFF	; 255
    5496:	fe 01       	movw	r30, r28
    5498:	e5 5b       	subi	r30, 0xB5	; 181
    549a:	ff 4f       	sbci	r31, 0xFF	; 255
    549c:	80 81       	ld	r24, Z
    549e:	91 81       	ldd	r25, Z+1	; 0x01
    54a0:	8d 93       	st	X+, r24
    54a2:	9c 93       	st	X, r25
    54a4:	fe 01       	movw	r30, r28
    54a6:	e9 5b       	subi	r30, 0xB9	; 185
    54a8:	ff 4f       	sbci	r31, 0xFF	; 255
    54aa:	80 81       	ld	r24, Z
    54ac:	91 81       	ldd	r25, Z+1	; 0x01
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	f1 f7       	brne	.-4      	; 0x54ae <LDR_check+0x48a>
    54b2:	fe 01       	movw	r30, r28
    54b4:	e9 5b       	subi	r30, 0xB9	; 185
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	80 83       	st	Z, r24
		_delay_ms(20);
		LCD_intgerToString(LDR_readint());
    54bc:	0e 94 80 27 	call	0x4f00	; 0x4f00 <LDR_readint>
    54c0:	0e 94 5d 27 	call	0x4eba	; 0x4eba <LCD_intgerToString>
    54c4:	fe 01       	movw	r30, r28
    54c6:	ed 5b       	subi	r30, 0xBD	; 189
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	aa ef       	ldi	r26, 0xFA	; 250
    54d0:	b3 e4       	ldi	r27, 0x43	; 67
    54d2:	80 83       	st	Z, r24
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	a2 83       	std	Z+2, r26	; 0x02
    54d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54da:	8e 01       	movw	r16, r28
    54dc:	01 5c       	subi	r16, 0xC1	; 193
    54de:	1f 4f       	sbci	r17, 0xFF	; 255
    54e0:	fe 01       	movw	r30, r28
    54e2:	ed 5b       	subi	r30, 0xBD	; 189
    54e4:	ff 4f       	sbci	r31, 0xFF	; 255
    54e6:	60 81       	ld	r22, Z
    54e8:	71 81       	ldd	r23, Z+1	; 0x01
    54ea:	82 81       	ldd	r24, Z+2	; 0x02
    54ec:	93 81       	ldd	r25, Z+3	; 0x03
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	4a e7       	ldi	r20, 0x7A	; 122
    54f4:	55 e4       	ldi	r21, 0x45	; 69
    54f6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    54fa:	dc 01       	movw	r26, r24
    54fc:	cb 01       	movw	r24, r22
    54fe:	f8 01       	movw	r30, r16
    5500:	80 83       	st	Z, r24
    5502:	91 83       	std	Z+1, r25	; 0x01
    5504:	a2 83       	std	Z+2, r26	; 0x02
    5506:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5508:	fe 01       	movw	r30, r28
    550a:	ff 96       	adiw	r30, 0x3f	; 63
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e8       	ldi	r20, 0x80	; 128
    551a:	5f e3       	ldi	r21, 0x3F	; 63
    551c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5520:	88 23       	and	r24, r24
    5522:	2c f4       	brge	.+10     	; 0x552e <LDR_check+0x50a>
		__ticks = 1;
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	9e af       	std	Y+62, r25	; 0x3e
    552a:	8d af       	std	Y+61, r24	; 0x3d
    552c:	46 c0       	rjmp	.+140    	; 0x55ba <LDR_check+0x596>
	else if (__tmp > 65535)
    552e:	fe 01       	movw	r30, r28
    5530:	ff 96       	adiw	r30, 0x3f	; 63
    5532:	60 81       	ld	r22, Z
    5534:	71 81       	ldd	r23, Z+1	; 0x01
    5536:	82 81       	ldd	r24, Z+2	; 0x02
    5538:	93 81       	ldd	r25, Z+3	; 0x03
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	3f ef       	ldi	r19, 0xFF	; 255
    553e:	4f e7       	ldi	r20, 0x7F	; 127
    5540:	57 e4       	ldi	r21, 0x47	; 71
    5542:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5546:	18 16       	cp	r1, r24
    5548:	64 f5       	brge	.+88     	; 0x55a2 <LDR_check+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    554a:	fe 01       	movw	r30, r28
    554c:	ed 5b       	subi	r30, 0xBD	; 189
    554e:	ff 4f       	sbci	r31, 0xFF	; 255
    5550:	60 81       	ld	r22, Z
    5552:	71 81       	ldd	r23, Z+1	; 0x01
    5554:	82 81       	ldd	r24, Z+2	; 0x02
    5556:	93 81       	ldd	r25, Z+3	; 0x03
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	40 e2       	ldi	r20, 0x20	; 32
    555e:	51 e4       	ldi	r21, 0x41	; 65
    5560:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	bc 01       	movw	r22, r24
    556a:	cd 01       	movw	r24, r26
    556c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5570:	dc 01       	movw	r26, r24
    5572:	cb 01       	movw	r24, r22
    5574:	9e af       	std	Y+62, r25	; 0x3e
    5576:	8d af       	std	Y+61, r24	; 0x3d
    5578:	0f c0       	rjmp	.+30     	; 0x5598 <LDR_check+0x574>
    557a:	80 e9       	ldi	r24, 0x90	; 144
    557c:	91 e0       	ldi	r25, 0x01	; 1
    557e:	9c af       	std	Y+60, r25	; 0x3c
    5580:	8b af       	std	Y+59, r24	; 0x3b
    5582:	8b ad       	ldd	r24, Y+59	; 0x3b
    5584:	9c ad       	ldd	r25, Y+60	; 0x3c
    5586:	01 97       	sbiw	r24, 0x01	; 1
    5588:	f1 f7       	brne	.-4      	; 0x5586 <LDR_check+0x562>
    558a:	9c af       	std	Y+60, r25	; 0x3c
    558c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    558e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5590:	9e ad       	ldd	r25, Y+62	; 0x3e
    5592:	01 97       	sbiw	r24, 0x01	; 1
    5594:	9e af       	std	Y+62, r25	; 0x3e
    5596:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5598:	8d ad       	ldd	r24, Y+61	; 0x3d
    559a:	9e ad       	ldd	r25, Y+62	; 0x3e
    559c:	00 97       	sbiw	r24, 0x00	; 0
    559e:	69 f7       	brne	.-38     	; 0x557a <LDR_check+0x556>
    55a0:	02 c2       	rjmp	.+1028   	; 0x59a6 <LDR_check+0x982>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55a2:	fe 01       	movw	r30, r28
    55a4:	ff 96       	adiw	r30, 0x3f	; 63
    55a6:	60 81       	ld	r22, Z
    55a8:	71 81       	ldd	r23, Z+1	; 0x01
    55aa:	82 81       	ldd	r24, Z+2	; 0x02
    55ac:	93 81       	ldd	r25, Z+3	; 0x03
    55ae:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	9e af       	std	Y+62, r25	; 0x3e
    55b8:	8d af       	std	Y+61, r24	; 0x3d
    55ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    55bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    55be:	9a af       	std	Y+58, r25	; 0x3a
    55c0:	89 af       	std	Y+57, r24	; 0x39
    55c2:	89 ad       	ldd	r24, Y+57	; 0x39
    55c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    55c6:	01 97       	sbiw	r24, 0x01	; 1
    55c8:	f1 f7       	brne	.-4      	; 0x55c6 <LDR_check+0x5a2>
    55ca:	9a af       	std	Y+58, r25	; 0x3a
    55cc:	89 af       	std	Y+57, r24	; 0x39
    55ce:	eb c1       	rjmp	.+982    	; 0x59a6 <LDR_check+0x982>
		_delay_ms(500);
	}
	else
	{
		CLEAR_BIT(PORTA,7);
    55d0:	ab e3       	ldi	r26, 0x3B	; 59
    55d2:	b0 e0       	ldi	r27, 0x00	; 0
    55d4:	eb e3       	ldi	r30, 0x3B	; 59
    55d6:	f0 e0       	ldi	r31, 0x00	; 0
    55d8:	80 81       	ld	r24, Z
    55da:	8f 77       	andi	r24, 0x7F	; 127
    55dc:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,6);
    55de:	ab e3       	ldi	r26, 0x3B	; 59
    55e0:	b0 e0       	ldi	r27, 0x00	; 0
    55e2:	eb e3       	ldi	r30, 0x3B	; 59
    55e4:	f0 e0       	ldi	r31, 0x00	; 0
    55e6:	80 81       	ld	r24, Z
    55e8:	8f 7b       	andi	r24, 0xBF	; 191
    55ea:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,5);
    55ec:	ab e3       	ldi	r26, 0x3B	; 59
    55ee:	b0 e0       	ldi	r27, 0x00	; 0
    55f0:	eb e3       	ldi	r30, 0x3B	; 59
    55f2:	f0 e0       	ldi	r31, 0x00	; 0
    55f4:	80 81       	ld	r24, Z
    55f6:	8f 7d       	andi	r24, 0xDF	; 223
    55f8:	8c 93       	st	X, r24

		LCD_SendCommand(DISPLAY_CLEAR);
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	a0 ea       	ldi	r26, 0xA0	; 160
    5606:	b1 e4       	ldi	r27, 0x41	; 65
    5608:	8d ab       	std	Y+53, r24	; 0x35
    560a:	9e ab       	std	Y+54, r25	; 0x36
    560c:	af ab       	std	Y+55, r26	; 0x37
    560e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5610:	6d a9       	ldd	r22, Y+53	; 0x35
    5612:	7e a9       	ldd	r23, Y+54	; 0x36
    5614:	8f a9       	ldd	r24, Y+55	; 0x37
    5616:	98 ad       	ldd	r25, Y+56	; 0x38
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	4a e7       	ldi	r20, 0x7A	; 122
    561e:	55 e4       	ldi	r21, 0x45	; 69
    5620:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	89 ab       	std	Y+49, r24	; 0x31
    562a:	9a ab       	std	Y+50, r25	; 0x32
    562c:	ab ab       	std	Y+51, r26	; 0x33
    562e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5630:	69 a9       	ldd	r22, Y+49	; 0x31
    5632:	7a a9       	ldd	r23, Y+50	; 0x32
    5634:	8b a9       	ldd	r24, Y+51	; 0x33
    5636:	9c a9       	ldd	r25, Y+52	; 0x34
    5638:	20 e0       	ldi	r18, 0x00	; 0
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	40 e8       	ldi	r20, 0x80	; 128
    563e:	5f e3       	ldi	r21, 0x3F	; 63
    5640:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5644:	88 23       	and	r24, r24
    5646:	2c f4       	brge	.+10     	; 0x5652 <LDR_check+0x62e>
		__ticks = 1;
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	98 ab       	std	Y+48, r25	; 0x30
    564e:	8f a7       	std	Y+47, r24	; 0x2f
    5650:	3f c0       	rjmp	.+126    	; 0x56d0 <LDR_check+0x6ac>
	else if (__tmp > 65535)
    5652:	69 a9       	ldd	r22, Y+49	; 0x31
    5654:	7a a9       	ldd	r23, Y+50	; 0x32
    5656:	8b a9       	ldd	r24, Y+51	; 0x33
    5658:	9c a9       	ldd	r25, Y+52	; 0x34
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	3f ef       	ldi	r19, 0xFF	; 255
    565e:	4f e7       	ldi	r20, 0x7F	; 127
    5660:	57 e4       	ldi	r21, 0x47	; 71
    5662:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5666:	18 16       	cp	r1, r24
    5668:	4c f5       	brge	.+82     	; 0x56bc <LDR_check+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    566a:	6d a9       	ldd	r22, Y+53	; 0x35
    566c:	7e a9       	ldd	r23, Y+54	; 0x36
    566e:	8f a9       	ldd	r24, Y+55	; 0x37
    5670:	98 ad       	ldd	r25, Y+56	; 0x38
    5672:	20 e0       	ldi	r18, 0x00	; 0
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	40 e2       	ldi	r20, 0x20	; 32
    5678:	51 e4       	ldi	r21, 0x41	; 65
    567a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	bc 01       	movw	r22, r24
    5684:	cd 01       	movw	r24, r26
    5686:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	98 ab       	std	Y+48, r25	; 0x30
    5690:	8f a7       	std	Y+47, r24	; 0x2f
    5692:	0f c0       	rjmp	.+30     	; 0x56b2 <LDR_check+0x68e>
    5694:	80 e9       	ldi	r24, 0x90	; 144
    5696:	91 e0       	ldi	r25, 0x01	; 1
    5698:	9e a7       	std	Y+46, r25	; 0x2e
    569a:	8d a7       	std	Y+45, r24	; 0x2d
    569c:	8d a5       	ldd	r24, Y+45	; 0x2d
    569e:	9e a5       	ldd	r25, Y+46	; 0x2e
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	f1 f7       	brne	.-4      	; 0x56a0 <LDR_check+0x67c>
    56a4:	9e a7       	std	Y+46, r25	; 0x2e
    56a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    56aa:	98 a9       	ldd	r25, Y+48	; 0x30
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	98 ab       	std	Y+48, r25	; 0x30
    56b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    56b4:	98 a9       	ldd	r25, Y+48	; 0x30
    56b6:	00 97       	sbiw	r24, 0x00	; 0
    56b8:	69 f7       	brne	.-38     	; 0x5694 <LDR_check+0x670>
    56ba:	14 c0       	rjmp	.+40     	; 0x56e4 <LDR_check+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56bc:	69 a9       	ldd	r22, Y+49	; 0x31
    56be:	7a a9       	ldd	r23, Y+50	; 0x32
    56c0:	8b a9       	ldd	r24, Y+51	; 0x33
    56c2:	9c a9       	ldd	r25, Y+52	; 0x34
    56c4:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    56c8:	dc 01       	movw	r26, r24
    56ca:	cb 01       	movw	r24, r22
    56cc:	98 ab       	std	Y+48, r25	; 0x30
    56ce:	8f a7       	std	Y+47, r24	; 0x2f
    56d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    56d2:	98 a9       	ldd	r25, Y+48	; 0x30
    56d4:	9c a7       	std	Y+44, r25	; 0x2c
    56d6:	8b a7       	std	Y+43, r24	; 0x2b
    56d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    56da:	9c a5       	ldd	r25, Y+44	; 0x2c
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	f1 f7       	brne	.-4      	; 0x56dc <LDR_check+0x6b8>
    56e0:	9c a7       	std	Y+44, r25	; 0x2c
    56e2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		LCD_PrintString(LO);
    56e4:	8c e0       	ldi	r24, 0x0C	; 12
    56e6:	92 e0       	ldi	r25, 0x02	; 2
    56e8:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	a0 ea       	ldi	r26, 0xA0	; 160
    56f2:	b1 e4       	ldi	r27, 0x41	; 65
    56f4:	8f a3       	std	Y+39, r24	; 0x27
    56f6:	98 a7       	std	Y+40, r25	; 0x28
    56f8:	a9 a7       	std	Y+41, r26	; 0x29
    56fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56fc:	6f a1       	ldd	r22, Y+39	; 0x27
    56fe:	78 a5       	ldd	r23, Y+40	; 0x28
    5700:	89 a5       	ldd	r24, Y+41	; 0x29
    5702:	9a a5       	ldd	r25, Y+42	; 0x2a
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	4a e7       	ldi	r20, 0x7A	; 122
    570a:	55 e4       	ldi	r21, 0x45	; 69
    570c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5710:	dc 01       	movw	r26, r24
    5712:	cb 01       	movw	r24, r22
    5714:	8b a3       	std	Y+35, r24	; 0x23
    5716:	9c a3       	std	Y+36, r25	; 0x24
    5718:	ad a3       	std	Y+37, r26	; 0x25
    571a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    571c:	6b a1       	ldd	r22, Y+35	; 0x23
    571e:	7c a1       	ldd	r23, Y+36	; 0x24
    5720:	8d a1       	ldd	r24, Y+37	; 0x25
    5722:	9e a1       	ldd	r25, Y+38	; 0x26
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	40 e8       	ldi	r20, 0x80	; 128
    572a:	5f e3       	ldi	r21, 0x3F	; 63
    572c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5730:	88 23       	and	r24, r24
    5732:	2c f4       	brge	.+10     	; 0x573e <LDR_check+0x71a>
		__ticks = 1;
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	9a a3       	std	Y+34, r25	; 0x22
    573a:	89 a3       	std	Y+33, r24	; 0x21
    573c:	3f c0       	rjmp	.+126    	; 0x57bc <LDR_check+0x798>
	else if (__tmp > 65535)
    573e:	6b a1       	ldd	r22, Y+35	; 0x23
    5740:	7c a1       	ldd	r23, Y+36	; 0x24
    5742:	8d a1       	ldd	r24, Y+37	; 0x25
    5744:	9e a1       	ldd	r25, Y+38	; 0x26
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	3f ef       	ldi	r19, 0xFF	; 255
    574a:	4f e7       	ldi	r20, 0x7F	; 127
    574c:	57 e4       	ldi	r21, 0x47	; 71
    574e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5752:	18 16       	cp	r1, r24
    5754:	4c f5       	brge	.+82     	; 0x57a8 <LDR_check+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5756:	6f a1       	ldd	r22, Y+39	; 0x27
    5758:	78 a5       	ldd	r23, Y+40	; 0x28
    575a:	89 a5       	ldd	r24, Y+41	; 0x29
    575c:	9a a5       	ldd	r25, Y+42	; 0x2a
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e2       	ldi	r20, 0x20	; 32
    5764:	51 e4       	ldi	r21, 0x41	; 65
    5766:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    576a:	dc 01       	movw	r26, r24
    576c:	cb 01       	movw	r24, r22
    576e:	bc 01       	movw	r22, r24
    5770:	cd 01       	movw	r24, r26
    5772:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5776:	dc 01       	movw	r26, r24
    5778:	cb 01       	movw	r24, r22
    577a:	9a a3       	std	Y+34, r25	; 0x22
    577c:	89 a3       	std	Y+33, r24	; 0x21
    577e:	0f c0       	rjmp	.+30     	; 0x579e <LDR_check+0x77a>
    5780:	80 e9       	ldi	r24, 0x90	; 144
    5782:	91 e0       	ldi	r25, 0x01	; 1
    5784:	98 a3       	std	Y+32, r25	; 0x20
    5786:	8f 8f       	std	Y+31, r24	; 0x1f
    5788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    578a:	98 a1       	ldd	r25, Y+32	; 0x20
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	f1 f7       	brne	.-4      	; 0x578c <LDR_check+0x768>
    5790:	98 a3       	std	Y+32, r25	; 0x20
    5792:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5794:	89 a1       	ldd	r24, Y+33	; 0x21
    5796:	9a a1       	ldd	r25, Y+34	; 0x22
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	9a a3       	std	Y+34, r25	; 0x22
    579c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579e:	89 a1       	ldd	r24, Y+33	; 0x21
    57a0:	9a a1       	ldd	r25, Y+34	; 0x22
    57a2:	00 97       	sbiw	r24, 0x00	; 0
    57a4:	69 f7       	brne	.-38     	; 0x5780 <LDR_check+0x75c>
    57a6:	14 c0       	rjmp	.+40     	; 0x57d0 <LDR_check+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a8:	6b a1       	ldd	r22, Y+35	; 0x23
    57aa:	7c a1       	ldd	r23, Y+36	; 0x24
    57ac:	8d a1       	ldd	r24, Y+37	; 0x25
    57ae:	9e a1       	ldd	r25, Y+38	; 0x26
    57b0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    57b4:	dc 01       	movw	r26, r24
    57b6:	cb 01       	movw	r24, r22
    57b8:	9a a3       	std	Y+34, r25	; 0x22
    57ba:	89 a3       	std	Y+33, r24	; 0x21
    57bc:	89 a1       	ldd	r24, Y+33	; 0x21
    57be:	9a a1       	ldd	r25, Y+34	; 0x22
    57c0:	9e 8f       	std	Y+30, r25	; 0x1e
    57c2:	8d 8f       	std	Y+29, r24	; 0x1d
    57c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57c8:	01 97       	sbiw	r24, 0x01	; 1
    57ca:	f1 f7       	brne	.-4      	; 0x57c8 <LDR_check+0x7a4>
    57cc:	9e 8f       	std	Y+30, r25	; 0x1e
    57ce:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		LCD_SendCommand(NEXT_LINE);
    57d0:	80 ec       	ldi	r24, 0xC0	; 192
    57d2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    57d6:	80 e0       	ldi	r24, 0x00	; 0
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	a0 ea       	ldi	r26, 0xA0	; 160
    57dc:	b1 e4       	ldi	r27, 0x41	; 65
    57de:	89 8f       	std	Y+25, r24	; 0x19
    57e0:	9a 8f       	std	Y+26, r25	; 0x1a
    57e2:	ab 8f       	std	Y+27, r26	; 0x1b
    57e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57e6:	69 8d       	ldd	r22, Y+25	; 0x19
    57e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	4a e7       	ldi	r20, 0x7A	; 122
    57f4:	55 e4       	ldi	r21, 0x45	; 69
    57f6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	8d 8b       	std	Y+21, r24	; 0x15
    5800:	9e 8b       	std	Y+22, r25	; 0x16
    5802:	af 8b       	std	Y+23, r26	; 0x17
    5804:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5806:	6d 89       	ldd	r22, Y+21	; 0x15
    5808:	7e 89       	ldd	r23, Y+22	; 0x16
    580a:	8f 89       	ldd	r24, Y+23	; 0x17
    580c:	98 8d       	ldd	r25, Y+24	; 0x18
    580e:	20 e0       	ldi	r18, 0x00	; 0
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	40 e8       	ldi	r20, 0x80	; 128
    5814:	5f e3       	ldi	r21, 0x3F	; 63
    5816:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    581a:	88 23       	and	r24, r24
    581c:	2c f4       	brge	.+10     	; 0x5828 <LDR_check+0x804>
		__ticks = 1;
    581e:	81 e0       	ldi	r24, 0x01	; 1
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	9c 8b       	std	Y+20, r25	; 0x14
    5824:	8b 8b       	std	Y+19, r24	; 0x13
    5826:	3f c0       	rjmp	.+126    	; 0x58a6 <LDR_check+0x882>
	else if (__tmp > 65535)
    5828:	6d 89       	ldd	r22, Y+21	; 0x15
    582a:	7e 89       	ldd	r23, Y+22	; 0x16
    582c:	8f 89       	ldd	r24, Y+23	; 0x17
    582e:	98 8d       	ldd	r25, Y+24	; 0x18
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	3f ef       	ldi	r19, 0xFF	; 255
    5834:	4f e7       	ldi	r20, 0x7F	; 127
    5836:	57 e4       	ldi	r21, 0x47	; 71
    5838:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    583c:	18 16       	cp	r1, r24
    583e:	4c f5       	brge	.+82     	; 0x5892 <LDR_check+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5840:	69 8d       	ldd	r22, Y+25	; 0x19
    5842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	40 e2       	ldi	r20, 0x20	; 32
    584e:	51 e4       	ldi	r21, 0x41	; 65
    5850:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5854:	dc 01       	movw	r26, r24
    5856:	cb 01       	movw	r24, r22
    5858:	bc 01       	movw	r22, r24
    585a:	cd 01       	movw	r24, r26
    585c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	9c 8b       	std	Y+20, r25	; 0x14
    5866:	8b 8b       	std	Y+19, r24	; 0x13
    5868:	0f c0       	rjmp	.+30     	; 0x5888 <LDR_check+0x864>
    586a:	80 e9       	ldi	r24, 0x90	; 144
    586c:	91 e0       	ldi	r25, 0x01	; 1
    586e:	9a 8b       	std	Y+18, r25	; 0x12
    5870:	89 8b       	std	Y+17, r24	; 0x11
    5872:	89 89       	ldd	r24, Y+17	; 0x11
    5874:	9a 89       	ldd	r25, Y+18	; 0x12
    5876:	01 97       	sbiw	r24, 0x01	; 1
    5878:	f1 f7       	brne	.-4      	; 0x5876 <LDR_check+0x852>
    587a:	9a 8b       	std	Y+18, r25	; 0x12
    587c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    587e:	8b 89       	ldd	r24, Y+19	; 0x13
    5880:	9c 89       	ldd	r25, Y+20	; 0x14
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	9c 8b       	std	Y+20, r25	; 0x14
    5886:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5888:	8b 89       	ldd	r24, Y+19	; 0x13
    588a:	9c 89       	ldd	r25, Y+20	; 0x14
    588c:	00 97       	sbiw	r24, 0x00	; 0
    588e:	69 f7       	brne	.-38     	; 0x586a <LDR_check+0x846>
    5890:	14 c0       	rjmp	.+40     	; 0x58ba <LDR_check+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5892:	6d 89       	ldd	r22, Y+21	; 0x15
    5894:	7e 89       	ldd	r23, Y+22	; 0x16
    5896:	8f 89       	ldd	r24, Y+23	; 0x17
    5898:	98 8d       	ldd	r25, Y+24	; 0x18
    589a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    589e:	dc 01       	movw	r26, r24
    58a0:	cb 01       	movw	r24, r22
    58a2:	9c 8b       	std	Y+20, r25	; 0x14
    58a4:	8b 8b       	std	Y+19, r24	; 0x13
    58a6:	8b 89       	ldd	r24, Y+19	; 0x13
    58a8:	9c 89       	ldd	r25, Y+20	; 0x14
    58aa:	98 8b       	std	Y+16, r25	; 0x10
    58ac:	8f 87       	std	Y+15, r24	; 0x0f
    58ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    58b0:	98 89       	ldd	r25, Y+16	; 0x10
    58b2:	01 97       	sbiw	r24, 0x01	; 1
    58b4:	f1 f7       	brne	.-4      	; 0x58b2 <LDR_check+0x88e>
    58b6:	98 8b       	std	Y+16, r25	; 0x10
    58b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		LCD_intgerToString(LDR_readint());// display the temp
    58ba:	0e 94 80 27 	call	0x4f00	; 0x4f00 <LDR_readint>
    58be:	0e 94 5d 27 	call	0x4eba	; 0x4eba <LCD_intgerToString>
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	aa ef       	ldi	r26, 0xFA	; 250
    58c8:	b3 e4       	ldi	r27, 0x43	; 67
    58ca:	8b 87       	std	Y+11, r24	; 0x0b
    58cc:	9c 87       	std	Y+12, r25	; 0x0c
    58ce:	ad 87       	std	Y+13, r26	; 0x0d
    58d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    58d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    58d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    58d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	4a e7       	ldi	r20, 0x7A	; 122
    58e0:	55 e4       	ldi	r21, 0x45	; 69
    58e2:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    58e6:	dc 01       	movw	r26, r24
    58e8:	cb 01       	movw	r24, r22
    58ea:	8f 83       	std	Y+7, r24	; 0x07
    58ec:	98 87       	std	Y+8, r25	; 0x08
    58ee:	a9 87       	std	Y+9, r26	; 0x09
    58f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58f2:	6f 81       	ldd	r22, Y+7	; 0x07
    58f4:	78 85       	ldd	r23, Y+8	; 0x08
    58f6:	89 85       	ldd	r24, Y+9	; 0x09
    58f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58fa:	20 e0       	ldi	r18, 0x00	; 0
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	40 e8       	ldi	r20, 0x80	; 128
    5900:	5f e3       	ldi	r21, 0x3F	; 63
    5902:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5906:	88 23       	and	r24, r24
    5908:	2c f4       	brge	.+10     	; 0x5914 <LDR_check+0x8f0>
		__ticks = 1;
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	9e 83       	std	Y+6, r25	; 0x06
    5910:	8d 83       	std	Y+5, r24	; 0x05
    5912:	3f c0       	rjmp	.+126    	; 0x5992 <LDR_check+0x96e>
	else if (__tmp > 65535)
    5914:	6f 81       	ldd	r22, Y+7	; 0x07
    5916:	78 85       	ldd	r23, Y+8	; 0x08
    5918:	89 85       	ldd	r24, Y+9	; 0x09
    591a:	9a 85       	ldd	r25, Y+10	; 0x0a
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	3f ef       	ldi	r19, 0xFF	; 255
    5920:	4f e7       	ldi	r20, 0x7F	; 127
    5922:	57 e4       	ldi	r21, 0x47	; 71
    5924:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5928:	18 16       	cp	r1, r24
    592a:	4c f5       	brge	.+82     	; 0x597e <LDR_check+0x95a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    592c:	6b 85       	ldd	r22, Y+11	; 0x0b
    592e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5930:	8d 85       	ldd	r24, Y+13	; 0x0d
    5932:	9e 85       	ldd	r25, Y+14	; 0x0e
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	40 e2       	ldi	r20, 0x20	; 32
    593a:	51 e4       	ldi	r21, 0x41	; 65
    593c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	bc 01       	movw	r22, r24
    5946:	cd 01       	movw	r24, r26
    5948:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    594c:	dc 01       	movw	r26, r24
    594e:	cb 01       	movw	r24, r22
    5950:	9e 83       	std	Y+6, r25	; 0x06
    5952:	8d 83       	std	Y+5, r24	; 0x05
    5954:	0f c0       	rjmp	.+30     	; 0x5974 <LDR_check+0x950>
    5956:	80 e9       	ldi	r24, 0x90	; 144
    5958:	91 e0       	ldi	r25, 0x01	; 1
    595a:	9c 83       	std	Y+4, r25	; 0x04
    595c:	8b 83       	std	Y+3, r24	; 0x03
    595e:	8b 81       	ldd	r24, Y+3	; 0x03
    5960:	9c 81       	ldd	r25, Y+4	; 0x04
    5962:	01 97       	sbiw	r24, 0x01	; 1
    5964:	f1 f7       	brne	.-4      	; 0x5962 <LDR_check+0x93e>
    5966:	9c 83       	std	Y+4, r25	; 0x04
    5968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    596a:	8d 81       	ldd	r24, Y+5	; 0x05
    596c:	9e 81       	ldd	r25, Y+6	; 0x06
    596e:	01 97       	sbiw	r24, 0x01	; 1
    5970:	9e 83       	std	Y+6, r25	; 0x06
    5972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5974:	8d 81       	ldd	r24, Y+5	; 0x05
    5976:	9e 81       	ldd	r25, Y+6	; 0x06
    5978:	00 97       	sbiw	r24, 0x00	; 0
    597a:	69 f7       	brne	.-38     	; 0x5956 <LDR_check+0x932>
    597c:	14 c0       	rjmp	.+40     	; 0x59a6 <LDR_check+0x982>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    597e:	6f 81       	ldd	r22, Y+7	; 0x07
    5980:	78 85       	ldd	r23, Y+8	; 0x08
    5982:	89 85       	ldd	r24, Y+9	; 0x09
    5984:	9a 85       	ldd	r25, Y+10	; 0x0a
    5986:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	9e 83       	std	Y+6, r25	; 0x06
    5990:	8d 83       	std	Y+5, r24	; 0x05
    5992:	8d 81       	ldd	r24, Y+5	; 0x05
    5994:	9e 81       	ldd	r25, Y+6	; 0x06
    5996:	9a 83       	std	Y+2, r25	; 0x02
    5998:	89 83       	std	Y+1, r24	; 0x01
    599a:	89 81       	ldd	r24, Y+1	; 0x01
    599c:	9a 81       	ldd	r25, Y+2	; 0x02
    599e:	01 97       	sbiw	r24, 0x01	; 1
    59a0:	f1 f7       	brne	.-4      	; 0x599e <LDR_check+0x97a>
    59a2:	9a 83       	std	Y+2, r25	; 0x02
    59a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
}
    59a6:	c0 59       	subi	r28, 0x90	; 144
    59a8:	df 4f       	sbci	r29, 0xFF	; 255
    59aa:	0f b6       	in	r0, 0x3f	; 63
    59ac:	f8 94       	cli
    59ae:	de bf       	out	0x3e, r29	; 62
    59b0:	0f be       	out	0x3f, r0	; 63
    59b2:	cd bf       	out	0x3d, r28	; 61
    59b4:	cf 91       	pop	r28
    59b6:	df 91       	pop	r29
    59b8:	1f 91       	pop	r17
    59ba:	0f 91       	pop	r16
    59bc:	08 95       	ret

000059be <LM35_readtemp>:

uint8 HT[20] = "High temperature";
uint8 Units[3] = "'C";

uint8 LM35_readtemp(void)
{
    59be:	df 93       	push	r29
    59c0:	cf 93       	push	r28
    59c2:	00 d0       	rcall	.+0      	; 0x59c4 <LM35_readtemp+0x6>
    59c4:	0f 92       	push	r0
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    59ca:	1b 82       	std	Y+3, r1	; 0x03
    uint16 adc_value;
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    59cc:	82 e0       	ldi	r24, 0x02	; 2
    59ce:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ADC_readChannel>
    59d2:	9a 83       	std	Y+2, r25	; 0x02
    59d4:	89 83       	std	Y+1, r24	; 0x01
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_V_REF)/(MAX_VALUE_ADC_REP*SENSOR_MAX_VOLT_VALUE));
    59d6:	89 81       	ldd	r24, Y+1	; 0x01
    59d8:	9a 81       	ldd	r25, Y+2	; 0x02
    59da:	cc 01       	movw	r24, r24
    59dc:	a0 e0       	ldi	r26, 0x00	; 0
    59de:	b0 e0       	ldi	r27, 0x00	; 0
    59e0:	2e ee       	ldi	r18, 0xEE	; 238
    59e2:	32 e0       	ldi	r19, 0x02	; 2
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	bc 01       	movw	r22, r24
    59ea:	cd 01       	movw	r24, r26
    59ec:	0e 94 67 4f 	call	0x9ece	; 0x9ece <__mulsi3>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	bc 01       	movw	r22, r24
    59f6:	cd 01       	movw	r24, r26
    59f8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatunsisf>
    59fc:	dc 01       	movw	r26, r24
    59fe:	cb 01       	movw	r24, r22
    5a00:	bc 01       	movw	r22, r24
    5a02:	cd 01       	movw	r24, r26
    5a04:	20 e0       	ldi	r18, 0x00	; 0
    5a06:	30 ed       	ldi	r19, 0xD0	; 208
    5a08:	4f eb       	ldi	r20, 0xBF	; 191
    5a0a:	54 e4       	ldi	r21, 0x44	; 68
    5a0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    5a10:	dc 01       	movw	r26, r24
    5a12:	cb 01       	movw	r24, r22
    5a14:	bc 01       	movw	r22, r24
    5a16:	cd 01       	movw	r24, r26
    5a18:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	8b 83       	std	Y+3, r24	; 0x03
	return temp_value;
    5a22:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5a24:	0f 90       	pop	r0
    5a26:	0f 90       	pop	r0
    5a28:	0f 90       	pop	r0
    5a2a:	cf 91       	pop	r28
    5a2c:	df 91       	pop	r29
    5a2e:	08 95       	ret

00005a30 <check>:

void check()
{
    5a30:	0f 93       	push	r16
    5a32:	1f 93       	push	r17
    5a34:	df 93       	push	r29
    5a36:	cf 93       	push	r28
    5a38:	cd b7       	in	r28, 0x3d	; 61
    5a3a:	de b7       	in	r29, 0x3e	; 62
    5a3c:	c6 54       	subi	r28, 0x46	; 70
    5a3e:	d0 40       	sbci	r29, 0x00	; 0
    5a40:	0f b6       	in	r0, 0x3f	; 63
    5a42:	f8 94       	cli
    5a44:	de bf       	out	0x3e, r29	; 62
    5a46:	0f be       	out	0x3f, r0	; 63
    5a48:	cd bf       	out	0x3d, r28	; 61
	if(LM35_readtemp() >= 30)
    5a4a:	0e 94 df 2c 	call	0x59be	; 0x59be <LM35_readtemp>
    5a4e:	8e 31       	cpi	r24, 0x1E	; 30
    5a50:	08 f4       	brcc	.+2      	; 0x5a54 <check+0x24>
    5a52:	ab c2       	rjmp	.+1366   	; 0x5faa <check+0x57a>
	{
		SET_BIT(PORTA,7);
    5a54:	ab e3       	ldi	r26, 0x3B	; 59
    5a56:	b0 e0       	ldi	r27, 0x00	; 0
    5a58:	eb e3       	ldi	r30, 0x3B	; 59
    5a5a:	f0 e0       	ldi	r31, 0x00	; 0
    5a5c:	80 81       	ld	r24, Z
    5a5e:	80 68       	ori	r24, 0x80	; 128
    5a60:	8c 93       	st	X, r24
		SET_BIT(PORTA,6);
    5a62:	ab e3       	ldi	r26, 0x3B	; 59
    5a64:	b0 e0       	ldi	r27, 0x00	; 0
    5a66:	eb e3       	ldi	r30, 0x3B	; 59
    5a68:	f0 e0       	ldi	r31, 0x00	; 0
    5a6a:	80 81       	ld	r24, Z
    5a6c:	80 64       	ori	r24, 0x40	; 64
    5a6e:	8c 93       	st	X, r24
		SET_BIT(PORTA,5);
    5a70:	ab e3       	ldi	r26, 0x3B	; 59
    5a72:	b0 e0       	ldi	r27, 0x00	; 0
    5a74:	eb e3       	ldi	r30, 0x3B	; 59
    5a76:	f0 e0       	ldi	r31, 0x00	; 0
    5a78:	80 81       	ld	r24, Z
    5a7a:	80 62       	ori	r24, 0x20	; 32
    5a7c:	8c 93       	st	X, r24

		SET_BIT(PORTD,6);
    5a7e:	a2 e3       	ldi	r26, 0x32	; 50
    5a80:	b0 e0       	ldi	r27, 0x00	; 0
    5a82:	e2 e3       	ldi	r30, 0x32	; 50
    5a84:	f0 e0       	ldi	r31, 0x00	; 0
    5a86:	80 81       	ld	r24, Z
    5a88:	80 64       	ori	r24, 0x40	; 64
    5a8a:	8c 93       	st	X, r24

		servo_init();
    5a8c:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <servo_init>
		servo_rotate(90);
    5a90:	60 e0       	ldi	r22, 0x00	; 0
    5a92:	70 e0       	ldi	r23, 0x00	; 0
    5a94:	84 eb       	ldi	r24, 0xB4	; 180
    5a96:	92 e4       	ldi	r25, 0x42	; 66
    5a98:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <servo_rotate>

		LCD_SendCommand(DISPLAY_CLEAR);
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    5aa2:	fe 01       	movw	r30, r28
    5aa4:	ed 5b       	subi	r30, 0xBD	; 189
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	a0 ea       	ldi	r26, 0xA0	; 160
    5aae:	b1 e4       	ldi	r27, 0x41	; 65
    5ab0:	80 83       	st	Z, r24
    5ab2:	91 83       	std	Z+1, r25	; 0x01
    5ab4:	a2 83       	std	Z+2, r26	; 0x02
    5ab6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ab8:	8e 01       	movw	r16, r28
    5aba:	01 5c       	subi	r16, 0xC1	; 193
    5abc:	1f 4f       	sbci	r17, 0xFF	; 255
    5abe:	fe 01       	movw	r30, r28
    5ac0:	ed 5b       	subi	r30, 0xBD	; 189
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	60 81       	ld	r22, Z
    5ac6:	71 81       	ldd	r23, Z+1	; 0x01
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	93 81       	ldd	r25, Z+3	; 0x03
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	4a e7       	ldi	r20, 0x7A	; 122
    5ad2:	55 e4       	ldi	r21, 0x45	; 69
    5ad4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	f8 01       	movw	r30, r16
    5ade:	80 83       	st	Z, r24
    5ae0:	91 83       	std	Z+1, r25	; 0x01
    5ae2:	a2 83       	std	Z+2, r26	; 0x02
    5ae4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ae6:	fe 01       	movw	r30, r28
    5ae8:	ff 96       	adiw	r30, 0x3f	; 63
    5aea:	60 81       	ld	r22, Z
    5aec:	71 81       	ldd	r23, Z+1	; 0x01
    5aee:	82 81       	ldd	r24, Z+2	; 0x02
    5af0:	93 81       	ldd	r25, Z+3	; 0x03
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	40 e8       	ldi	r20, 0x80	; 128
    5af8:	5f e3       	ldi	r21, 0x3F	; 63
    5afa:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5afe:	88 23       	and	r24, r24
    5b00:	2c f4       	brge	.+10     	; 0x5b0c <check+0xdc>
		__ticks = 1;
    5b02:	81 e0       	ldi	r24, 0x01	; 1
    5b04:	90 e0       	ldi	r25, 0x00	; 0
    5b06:	9e af       	std	Y+62, r25	; 0x3e
    5b08:	8d af       	std	Y+61, r24	; 0x3d
    5b0a:	46 c0       	rjmp	.+140    	; 0x5b98 <check+0x168>
	else if (__tmp > 65535)
    5b0c:	fe 01       	movw	r30, r28
    5b0e:	ff 96       	adiw	r30, 0x3f	; 63
    5b10:	60 81       	ld	r22, Z
    5b12:	71 81       	ldd	r23, Z+1	; 0x01
    5b14:	82 81       	ldd	r24, Z+2	; 0x02
    5b16:	93 81       	ldd	r25, Z+3	; 0x03
    5b18:	20 e0       	ldi	r18, 0x00	; 0
    5b1a:	3f ef       	ldi	r19, 0xFF	; 255
    5b1c:	4f e7       	ldi	r20, 0x7F	; 127
    5b1e:	57 e4       	ldi	r21, 0x47	; 71
    5b20:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5b24:	18 16       	cp	r1, r24
    5b26:	64 f5       	brge	.+88     	; 0x5b80 <check+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b28:	fe 01       	movw	r30, r28
    5b2a:	ed 5b       	subi	r30, 0xBD	; 189
    5b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2e:	60 81       	ld	r22, Z
    5b30:	71 81       	ldd	r23, Z+1	; 0x01
    5b32:	82 81       	ldd	r24, Z+2	; 0x02
    5b34:	93 81       	ldd	r25, Z+3	; 0x03
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	40 e2       	ldi	r20, 0x20	; 32
    5b3c:	51 e4       	ldi	r21, 0x41	; 65
    5b3e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5b42:	dc 01       	movw	r26, r24
    5b44:	cb 01       	movw	r24, r22
    5b46:	bc 01       	movw	r22, r24
    5b48:	cd 01       	movw	r24, r26
    5b4a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	9e af       	std	Y+62, r25	; 0x3e
    5b54:	8d af       	std	Y+61, r24	; 0x3d
    5b56:	0f c0       	rjmp	.+30     	; 0x5b76 <check+0x146>
    5b58:	80 e9       	ldi	r24, 0x90	; 144
    5b5a:	91 e0       	ldi	r25, 0x01	; 1
    5b5c:	9c af       	std	Y+60, r25	; 0x3c
    5b5e:	8b af       	std	Y+59, r24	; 0x3b
    5b60:	8b ad       	ldd	r24, Y+59	; 0x3b
    5b62:	9c ad       	ldd	r25, Y+60	; 0x3c
    5b64:	01 97       	sbiw	r24, 0x01	; 1
    5b66:	f1 f7       	brne	.-4      	; 0x5b64 <check+0x134>
    5b68:	9c af       	std	Y+60, r25	; 0x3c
    5b6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b70:	01 97       	sbiw	r24, 0x01	; 1
    5b72:	9e af       	std	Y+62, r25	; 0x3e
    5b74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b76:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b78:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b7a:	00 97       	sbiw	r24, 0x00	; 0
    5b7c:	69 f7       	brne	.-38     	; 0x5b58 <check+0x128>
    5b7e:	16 c0       	rjmp	.+44     	; 0x5bac <check+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b80:	fe 01       	movw	r30, r28
    5b82:	ff 96       	adiw	r30, 0x3f	; 63
    5b84:	60 81       	ld	r22, Z
    5b86:	71 81       	ldd	r23, Z+1	; 0x01
    5b88:	82 81       	ldd	r24, Z+2	; 0x02
    5b8a:	93 81       	ldd	r25, Z+3	; 0x03
    5b8c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	9e af       	std	Y+62, r25	; 0x3e
    5b96:	8d af       	std	Y+61, r24	; 0x3d
    5b98:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b9c:	9a af       	std	Y+58, r25	; 0x3a
    5b9e:	89 af       	std	Y+57, r24	; 0x39
    5ba0:	89 ad       	ldd	r24, Y+57	; 0x39
    5ba2:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ba4:	01 97       	sbiw	r24, 0x01	; 1
    5ba6:	f1 f7       	brne	.-4      	; 0x5ba4 <check+0x174>
    5ba8:	9a af       	std	Y+58, r25	; 0x3a
    5baa:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(20);
		LCD_PrintString(HT);
    5bac:	88 e1       	ldi	r24, 0x18	; 24
    5bae:	92 e0       	ldi	r25, 0x02	; 2
    5bb0:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	a0 ea       	ldi	r26, 0xA0	; 160
    5bba:	b1 e4       	ldi	r27, 0x41	; 65
    5bbc:	8d ab       	std	Y+53, r24	; 0x35
    5bbe:	9e ab       	std	Y+54, r25	; 0x36
    5bc0:	af ab       	std	Y+55, r26	; 0x37
    5bc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc4:	6d a9       	ldd	r22, Y+53	; 0x35
    5bc6:	7e a9       	ldd	r23, Y+54	; 0x36
    5bc8:	8f a9       	ldd	r24, Y+55	; 0x37
    5bca:	98 ad       	ldd	r25, Y+56	; 0x38
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	4a e7       	ldi	r20, 0x7A	; 122
    5bd2:	55 e4       	ldi	r21, 0x45	; 69
    5bd4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5bd8:	dc 01       	movw	r26, r24
    5bda:	cb 01       	movw	r24, r22
    5bdc:	89 ab       	std	Y+49, r24	; 0x31
    5bde:	9a ab       	std	Y+50, r25	; 0x32
    5be0:	ab ab       	std	Y+51, r26	; 0x33
    5be2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5be4:	69 a9       	ldd	r22, Y+49	; 0x31
    5be6:	7a a9       	ldd	r23, Y+50	; 0x32
    5be8:	8b a9       	ldd	r24, Y+51	; 0x33
    5bea:	9c a9       	ldd	r25, Y+52	; 0x34
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	30 e0       	ldi	r19, 0x00	; 0
    5bf0:	40 e8       	ldi	r20, 0x80	; 128
    5bf2:	5f e3       	ldi	r21, 0x3F	; 63
    5bf4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5bf8:	88 23       	and	r24, r24
    5bfa:	2c f4       	brge	.+10     	; 0x5c06 <check+0x1d6>
		__ticks = 1;
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	98 ab       	std	Y+48, r25	; 0x30
    5c02:	8f a7       	std	Y+47, r24	; 0x2f
    5c04:	3f c0       	rjmp	.+126    	; 0x5c84 <check+0x254>
	else if (__tmp > 65535)
    5c06:	69 a9       	ldd	r22, Y+49	; 0x31
    5c08:	7a a9       	ldd	r23, Y+50	; 0x32
    5c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    5c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    5c0e:	20 e0       	ldi	r18, 0x00	; 0
    5c10:	3f ef       	ldi	r19, 0xFF	; 255
    5c12:	4f e7       	ldi	r20, 0x7F	; 127
    5c14:	57 e4       	ldi	r21, 0x47	; 71
    5c16:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5c1a:	18 16       	cp	r1, r24
    5c1c:	4c f5       	brge	.+82     	; 0x5c70 <check+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c1e:	6d a9       	ldd	r22, Y+53	; 0x35
    5c20:	7e a9       	ldd	r23, Y+54	; 0x36
    5c22:	8f a9       	ldd	r24, Y+55	; 0x37
    5c24:	98 ad       	ldd	r25, Y+56	; 0x38
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	30 e0       	ldi	r19, 0x00	; 0
    5c2a:	40 e2       	ldi	r20, 0x20	; 32
    5c2c:	51 e4       	ldi	r21, 0x41	; 65
    5c2e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5c32:	dc 01       	movw	r26, r24
    5c34:	cb 01       	movw	r24, r22
    5c36:	bc 01       	movw	r22, r24
    5c38:	cd 01       	movw	r24, r26
    5c3a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5c3e:	dc 01       	movw	r26, r24
    5c40:	cb 01       	movw	r24, r22
    5c42:	98 ab       	std	Y+48, r25	; 0x30
    5c44:	8f a7       	std	Y+47, r24	; 0x2f
    5c46:	0f c0       	rjmp	.+30     	; 0x5c66 <check+0x236>
    5c48:	80 e9       	ldi	r24, 0x90	; 144
    5c4a:	91 e0       	ldi	r25, 0x01	; 1
    5c4c:	9e a7       	std	Y+46, r25	; 0x2e
    5c4e:	8d a7       	std	Y+45, r24	; 0x2d
    5c50:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c52:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c54:	01 97       	sbiw	r24, 0x01	; 1
    5c56:	f1 f7       	brne	.-4      	; 0x5c54 <check+0x224>
    5c58:	9e a7       	std	Y+46, r25	; 0x2e
    5c5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    5c60:	01 97       	sbiw	r24, 0x01	; 1
    5c62:	98 ab       	std	Y+48, r25	; 0x30
    5c64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c68:	98 a9       	ldd	r25, Y+48	; 0x30
    5c6a:	00 97       	sbiw	r24, 0x00	; 0
    5c6c:	69 f7       	brne	.-38     	; 0x5c48 <check+0x218>
    5c6e:	14 c0       	rjmp	.+40     	; 0x5c98 <check+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c70:	69 a9       	ldd	r22, Y+49	; 0x31
    5c72:	7a a9       	ldd	r23, Y+50	; 0x32
    5c74:	8b a9       	ldd	r24, Y+51	; 0x33
    5c76:	9c a9       	ldd	r25, Y+52	; 0x34
    5c78:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	98 ab       	std	Y+48, r25	; 0x30
    5c82:	8f a7       	std	Y+47, r24	; 0x2f
    5c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c86:	98 a9       	ldd	r25, Y+48	; 0x30
    5c88:	9c a7       	std	Y+44, r25	; 0x2c
    5c8a:	8b a7       	std	Y+43, r24	; 0x2b
    5c8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c90:	01 97       	sbiw	r24, 0x01	; 1
    5c92:	f1 f7       	brne	.-4      	; 0x5c90 <check+0x260>
    5c94:	9c a7       	std	Y+44, r25	; 0x2c
    5c96:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		LCD_SendCommand(NEXT_LINE);
    5c98:	80 ec       	ldi	r24, 0xC0	; 192
    5c9a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	a0 ea       	ldi	r26, 0xA0	; 160
    5ca4:	b1 e4       	ldi	r27, 0x41	; 65
    5ca6:	8f a3       	std	Y+39, r24	; 0x27
    5ca8:	98 a7       	std	Y+40, r25	; 0x28
    5caa:	a9 a7       	std	Y+41, r26	; 0x29
    5cac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cae:	6f a1       	ldd	r22, Y+39	; 0x27
    5cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    5cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    5cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	4a e7       	ldi	r20, 0x7A	; 122
    5cbc:	55 e4       	ldi	r21, 0x45	; 69
    5cbe:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	8b a3       	std	Y+35, r24	; 0x23
    5cc8:	9c a3       	std	Y+36, r25	; 0x24
    5cca:	ad a3       	std	Y+37, r26	; 0x25
    5ccc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5cce:	6b a1       	ldd	r22, Y+35	; 0x23
    5cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    5cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    5cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	40 e8       	ldi	r20, 0x80	; 128
    5cdc:	5f e3       	ldi	r21, 0x3F	; 63
    5cde:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5ce2:	88 23       	and	r24, r24
    5ce4:	2c f4       	brge	.+10     	; 0x5cf0 <check+0x2c0>
		__ticks = 1;
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	9a a3       	std	Y+34, r25	; 0x22
    5cec:	89 a3       	std	Y+33, r24	; 0x21
    5cee:	3f c0       	rjmp	.+126    	; 0x5d6e <check+0x33e>
	else if (__tmp > 65535)
    5cf0:	6b a1       	ldd	r22, Y+35	; 0x23
    5cf2:	7c a1       	ldd	r23, Y+36	; 0x24
    5cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    5cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	3f ef       	ldi	r19, 0xFF	; 255
    5cfc:	4f e7       	ldi	r20, 0x7F	; 127
    5cfe:	57 e4       	ldi	r21, 0x47	; 71
    5d00:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5d04:	18 16       	cp	r1, r24
    5d06:	4c f5       	brge	.+82     	; 0x5d5a <check+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d08:	6f a1       	ldd	r22, Y+39	; 0x27
    5d0a:	78 a5       	ldd	r23, Y+40	; 0x28
    5d0c:	89 a5       	ldd	r24, Y+41	; 0x29
    5d0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d10:	20 e0       	ldi	r18, 0x00	; 0
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	40 e2       	ldi	r20, 0x20	; 32
    5d16:	51 e4       	ldi	r21, 0x41	; 65
    5d18:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	cb 01       	movw	r24, r22
    5d20:	bc 01       	movw	r22, r24
    5d22:	cd 01       	movw	r24, r26
    5d24:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5d28:	dc 01       	movw	r26, r24
    5d2a:	cb 01       	movw	r24, r22
    5d2c:	9a a3       	std	Y+34, r25	; 0x22
    5d2e:	89 a3       	std	Y+33, r24	; 0x21
    5d30:	0f c0       	rjmp	.+30     	; 0x5d50 <check+0x320>
    5d32:	80 e9       	ldi	r24, 0x90	; 144
    5d34:	91 e0       	ldi	r25, 0x01	; 1
    5d36:	98 a3       	std	Y+32, r25	; 0x20
    5d38:	8f 8f       	std	Y+31, r24	; 0x1f
    5d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d3c:	98 a1       	ldd	r25, Y+32	; 0x20
    5d3e:	01 97       	sbiw	r24, 0x01	; 1
    5d40:	f1 f7       	brne	.-4      	; 0x5d3e <check+0x30e>
    5d42:	98 a3       	std	Y+32, r25	; 0x20
    5d44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d46:	89 a1       	ldd	r24, Y+33	; 0x21
    5d48:	9a a1       	ldd	r25, Y+34	; 0x22
    5d4a:	01 97       	sbiw	r24, 0x01	; 1
    5d4c:	9a a3       	std	Y+34, r25	; 0x22
    5d4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d50:	89 a1       	ldd	r24, Y+33	; 0x21
    5d52:	9a a1       	ldd	r25, Y+34	; 0x22
    5d54:	00 97       	sbiw	r24, 0x00	; 0
    5d56:	69 f7       	brne	.-38     	; 0x5d32 <check+0x302>
    5d58:	14 c0       	rjmp	.+40     	; 0x5d82 <check+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    5d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    5d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    5d60:	9e a1       	ldd	r25, Y+38	; 0x26
    5d62:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5d66:	dc 01       	movw	r26, r24
    5d68:	cb 01       	movw	r24, r22
    5d6a:	9a a3       	std	Y+34, r25	; 0x22
    5d6c:	89 a3       	std	Y+33, r24	; 0x21
    5d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    5d70:	9a a1       	ldd	r25, Y+34	; 0x22
    5d72:	9e 8f       	std	Y+30, r25	; 0x1e
    5d74:	8d 8f       	std	Y+29, r24	; 0x1d
    5d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d7a:	01 97       	sbiw	r24, 0x01	; 1
    5d7c:	f1 f7       	brne	.-4      	; 0x5d7a <check+0x34a>
    5d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    5d80:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		LCD_intgerToString(LM35_readtemp());
    5d82:	0e 94 df 2c 	call	0x59be	; 0x59be <LM35_readtemp>
    5d86:	88 2f       	mov	r24, r24
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	0e 94 5d 27 	call	0x4eba	; 0x4eba <LCD_intgerToString>
    5d8e:	80 e0       	ldi	r24, 0x00	; 0
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	a0 ea       	ldi	r26, 0xA0	; 160
    5d94:	b1 e4       	ldi	r27, 0x41	; 65
    5d96:	89 8f       	std	Y+25, r24	; 0x19
    5d98:	9a 8f       	std	Y+26, r25	; 0x1a
    5d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    5d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    5da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5da6:	20 e0       	ldi	r18, 0x00	; 0
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	4a e7       	ldi	r20, 0x7A	; 122
    5dac:	55 e4       	ldi	r21, 0x45	; 69
    5dae:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5db2:	dc 01       	movw	r26, r24
    5db4:	cb 01       	movw	r24, r22
    5db6:	8d 8b       	std	Y+21, r24	; 0x15
    5db8:	9e 8b       	std	Y+22, r25	; 0x16
    5dba:	af 8b       	std	Y+23, r26	; 0x17
    5dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    5dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    5dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    5dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	40 e8       	ldi	r20, 0x80	; 128
    5dcc:	5f e3       	ldi	r21, 0x3F	; 63
    5dce:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5dd2:	88 23       	and	r24, r24
    5dd4:	2c f4       	brge	.+10     	; 0x5de0 <check+0x3b0>
		__ticks = 1;
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	9c 8b       	std	Y+20, r25	; 0x14
    5ddc:	8b 8b       	std	Y+19, r24	; 0x13
    5dde:	3f c0       	rjmp	.+126    	; 0x5e5e <check+0x42e>
	else if (__tmp > 65535)
    5de0:	6d 89       	ldd	r22, Y+21	; 0x15
    5de2:	7e 89       	ldd	r23, Y+22	; 0x16
    5de4:	8f 89       	ldd	r24, Y+23	; 0x17
    5de6:	98 8d       	ldd	r25, Y+24	; 0x18
    5de8:	20 e0       	ldi	r18, 0x00	; 0
    5dea:	3f ef       	ldi	r19, 0xFF	; 255
    5dec:	4f e7       	ldi	r20, 0x7F	; 127
    5dee:	57 e4       	ldi	r21, 0x47	; 71
    5df0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5df4:	18 16       	cp	r1, r24
    5df6:	4c f5       	brge	.+82     	; 0x5e4a <check+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5df8:	69 8d       	ldd	r22, Y+25	; 0x19
    5dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e00:	20 e0       	ldi	r18, 0x00	; 0
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	40 e2       	ldi	r20, 0x20	; 32
    5e06:	51 e4       	ldi	r21, 0x41	; 65
    5e08:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	bc 01       	movw	r22, r24
    5e12:	cd 01       	movw	r24, r26
    5e14:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	9c 8b       	std	Y+20, r25	; 0x14
    5e1e:	8b 8b       	std	Y+19, r24	; 0x13
    5e20:	0f c0       	rjmp	.+30     	; 0x5e40 <check+0x410>
    5e22:	80 e9       	ldi	r24, 0x90	; 144
    5e24:	91 e0       	ldi	r25, 0x01	; 1
    5e26:	9a 8b       	std	Y+18, r25	; 0x12
    5e28:	89 8b       	std	Y+17, r24	; 0x11
    5e2a:	89 89       	ldd	r24, Y+17	; 0x11
    5e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    5e2e:	01 97       	sbiw	r24, 0x01	; 1
    5e30:	f1 f7       	brne	.-4      	; 0x5e2e <check+0x3fe>
    5e32:	9a 8b       	std	Y+18, r25	; 0x12
    5e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e36:	8b 89       	ldd	r24, Y+19	; 0x13
    5e38:	9c 89       	ldd	r25, Y+20	; 0x14
    5e3a:	01 97       	sbiw	r24, 0x01	; 1
    5e3c:	9c 8b       	std	Y+20, r25	; 0x14
    5e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e40:	8b 89       	ldd	r24, Y+19	; 0x13
    5e42:	9c 89       	ldd	r25, Y+20	; 0x14
    5e44:	00 97       	sbiw	r24, 0x00	; 0
    5e46:	69 f7       	brne	.-38     	; 0x5e22 <check+0x3f2>
    5e48:	14 c0       	rjmp	.+40     	; 0x5e72 <check+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    5e50:	98 8d       	ldd	r25, Y+24	; 0x18
    5e52:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5e56:	dc 01       	movw	r26, r24
    5e58:	cb 01       	movw	r24, r22
    5e5a:	9c 8b       	std	Y+20, r25	; 0x14
    5e5c:	8b 8b       	std	Y+19, r24	; 0x13
    5e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    5e60:	9c 89       	ldd	r25, Y+20	; 0x14
    5e62:	98 8b       	std	Y+16, r25	; 0x10
    5e64:	8f 87       	std	Y+15, r24	; 0x0f
    5e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e68:	98 89       	ldd	r25, Y+16	; 0x10
    5e6a:	01 97       	sbiw	r24, 0x01	; 1
    5e6c:	f1 f7       	brne	.-4      	; 0x5e6a <check+0x43a>
    5e6e:	98 8b       	std	Y+16, r25	; 0x10
    5e70:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		LCD_PrintString(Units);
    5e72:	8c e2       	ldi	r24, 0x2C	; 44
    5e74:	92 e0       	ldi	r25, 0x02	; 2
    5e76:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    5e80:	b1 e4       	ldi	r27, 0x41	; 65
    5e82:	8b 87       	std	Y+11, r24	; 0x0b
    5e84:	9c 87       	std	Y+12, r25	; 0x0c
    5e86:	ad 87       	std	Y+13, r26	; 0x0d
    5e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	4a e7       	ldi	r20, 0x7A	; 122
    5e98:	55 e4       	ldi	r21, 0x45	; 69
    5e9a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	8f 83       	std	Y+7, r24	; 0x07
    5ea4:	98 87       	std	Y+8, r25	; 0x08
    5ea6:	a9 87       	std	Y+9, r26	; 0x09
    5ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    5eac:	78 85       	ldd	r23, Y+8	; 0x08
    5eae:	89 85       	ldd	r24, Y+9	; 0x09
    5eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	30 e0       	ldi	r19, 0x00	; 0
    5eb6:	40 e8       	ldi	r20, 0x80	; 128
    5eb8:	5f e3       	ldi	r21, 0x3F	; 63
    5eba:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    5ebe:	88 23       	and	r24, r24
    5ec0:	2c f4       	brge	.+10     	; 0x5ecc <check+0x49c>
		__ticks = 1;
    5ec2:	81 e0       	ldi	r24, 0x01	; 1
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	9e 83       	std	Y+6, r25	; 0x06
    5ec8:	8d 83       	std	Y+5, r24	; 0x05
    5eca:	3f c0       	rjmp	.+126    	; 0x5f4a <check+0x51a>
	else if (__tmp > 65535)
    5ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    5ece:	78 85       	ldd	r23, Y+8	; 0x08
    5ed0:	89 85       	ldd	r24, Y+9	; 0x09
    5ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	3f ef       	ldi	r19, 0xFF	; 255
    5ed8:	4f e7       	ldi	r20, 0x7F	; 127
    5eda:	57 e4       	ldi	r21, 0x47	; 71
    5edc:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    5ee0:	18 16       	cp	r1, r24
    5ee2:	4c f5       	brge	.+82     	; 0x5f36 <check+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e2       	ldi	r20, 0x20	; 32
    5ef2:	51 e4       	ldi	r21, 0x41	; 65
    5ef4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    5ef8:	dc 01       	movw	r26, r24
    5efa:	cb 01       	movw	r24, r22
    5efc:	bc 01       	movw	r22, r24
    5efe:	cd 01       	movw	r24, r26
    5f00:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5f04:	dc 01       	movw	r26, r24
    5f06:	cb 01       	movw	r24, r22
    5f08:	9e 83       	std	Y+6, r25	; 0x06
    5f0a:	8d 83       	std	Y+5, r24	; 0x05
    5f0c:	0f c0       	rjmp	.+30     	; 0x5f2c <check+0x4fc>
    5f0e:	80 e9       	ldi	r24, 0x90	; 144
    5f10:	91 e0       	ldi	r25, 0x01	; 1
    5f12:	9c 83       	std	Y+4, r25	; 0x04
    5f14:	8b 83       	std	Y+3, r24	; 0x03
    5f16:	8b 81       	ldd	r24, Y+3	; 0x03
    5f18:	9c 81       	ldd	r25, Y+4	; 0x04
    5f1a:	01 97       	sbiw	r24, 0x01	; 1
    5f1c:	f1 f7       	brne	.-4      	; 0x5f1a <check+0x4ea>
    5f1e:	9c 83       	std	Y+4, r25	; 0x04
    5f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f22:	8d 81       	ldd	r24, Y+5	; 0x05
    5f24:	9e 81       	ldd	r25, Y+6	; 0x06
    5f26:	01 97       	sbiw	r24, 0x01	; 1
    5f28:	9e 83       	std	Y+6, r25	; 0x06
    5f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f30:	00 97       	sbiw	r24, 0x00	; 0
    5f32:	69 f7       	brne	.-38     	; 0x5f0e <check+0x4de>
    5f34:	14 c0       	rjmp	.+40     	; 0x5f5e <check+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f36:	6f 81       	ldd	r22, Y+7	; 0x07
    5f38:	78 85       	ldd	r23, Y+8	; 0x08
    5f3a:	89 85       	ldd	r24, Y+9	; 0x09
    5f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f3e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	9e 83       	std	Y+6, r25	; 0x06
    5f48:	8d 83       	std	Y+5, r24	; 0x05
    5f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f4e:	9a 83       	std	Y+2, r25	; 0x02
    5f50:	89 83       	std	Y+1, r24	; 0x01
    5f52:	89 81       	ldd	r24, Y+1	; 0x01
    5f54:	9a 81       	ldd	r25, Y+2	; 0x02
    5f56:	01 97       	sbiw	r24, 0x01	; 1
    5f58:	f1 f7       	brne	.-4      	; 0x5f56 <check+0x526>
    5f5a:	9a 83       	std	Y+2, r25	; 0x02
    5f5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		while(LM35_readtemp()>=30)
    5f5e:	0e 94 df 2c 	call	0x59be	; 0x59be <LM35_readtemp>
    5f62:	8e 31       	cpi	r24, 0x1E	; 30
    5f64:	e0 f7       	brcc	.-8      	; 0x5f5e <check+0x52e>
		{
		}
		servo_rotate(0);
    5f66:	60 e0       	ldi	r22, 0x00	; 0
    5f68:	70 e0       	ldi	r23, 0x00	; 0
    5f6a:	80 e0       	ldi	r24, 0x00	; 0
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <servo_rotate>
		CLEAR_BIT(PORTA,7);
    5f72:	ab e3       	ldi	r26, 0x3B	; 59
    5f74:	b0 e0       	ldi	r27, 0x00	; 0
    5f76:	eb e3       	ldi	r30, 0x3B	; 59
    5f78:	f0 e0       	ldi	r31, 0x00	; 0
    5f7a:	80 81       	ld	r24, Z
    5f7c:	8f 77       	andi	r24, 0x7F	; 127
    5f7e:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,6);
    5f80:	ab e3       	ldi	r26, 0x3B	; 59
    5f82:	b0 e0       	ldi	r27, 0x00	; 0
    5f84:	eb e3       	ldi	r30, 0x3B	; 59
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	80 81       	ld	r24, Z
    5f8a:	8f 7b       	andi	r24, 0xBF	; 191
    5f8c:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,5);
    5f8e:	ab e3       	ldi	r26, 0x3B	; 59
    5f90:	b0 e0       	ldi	r27, 0x00	; 0
    5f92:	eb e3       	ldi	r30, 0x3B	; 59
    5f94:	f0 e0       	ldi	r31, 0x00	; 0
    5f96:	80 81       	ld	r24, Z
    5f98:	8f 7d       	andi	r24, 0xDF	; 223
    5f9a:	8c 93       	st	X, r24
		CLEAR_BIT(PORTD,6);
    5f9c:	a2 e3       	ldi	r26, 0x32	; 50
    5f9e:	b0 e0       	ldi	r27, 0x00	; 0
    5fa0:	e2 e3       	ldi	r30, 0x32	; 50
    5fa2:	f0 e0       	ldi	r31, 0x00	; 0
    5fa4:	80 81       	ld	r24, Z
    5fa6:	8f 7b       	andi	r24, 0xBF	; 191
    5fa8:	8c 93       	st	X, r24
	}

}
    5faa:	ca 5b       	subi	r28, 0xBA	; 186
    5fac:	df 4f       	sbci	r29, 0xFF	; 255
    5fae:	0f b6       	in	r0, 0x3f	; 63
    5fb0:	f8 94       	cli
    5fb2:	de bf       	out	0x3e, r29	; 62
    5fb4:	0f be       	out	0x3f, r0	; 63
    5fb6:	cd bf       	out	0x3d, r28	; 61
    5fb8:	cf 91       	pop	r28
    5fba:	df 91       	pop	r29
    5fbc:	1f 91       	pop	r17
    5fbe:	0f 91       	pop	r16
    5fc0:	08 95       	ret

00005fc2 <servo_init>:
 */

#include "Servo.h"

void servo_init()
{
    5fc2:	df 93       	push	r29
    5fc4:	cf 93       	push	r28
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,5);
    5fca:	a1 e3       	ldi	r26, 0x31	; 49
    5fcc:	b0 e0       	ldi	r27, 0x00	; 0
    5fce:	e1 e3       	ldi	r30, 0x31	; 49
    5fd0:	f0 e0       	ldi	r31, 0x00	; 0
    5fd2:	80 81       	ld	r24, Z
    5fd4:	80 62       	ori	r24, 0x20	; 32
    5fd6:	8c 93       	st	X, r24
}
    5fd8:	cf 91       	pop	r28
    5fda:	df 91       	pop	r29
    5fdc:	08 95       	ret

00005fde <servo_rotate>:

void servo_rotate(float ang)
{
    5fde:	0f 93       	push	r16
    5fe0:	1f 93       	push	r17
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	cd b7       	in	r28, 0x3d	; 61
    5fe8:	de b7       	in	r29, 0x3e	; 62
    5fea:	28 97       	sbiw	r28, 0x08	; 8
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	f8 94       	cli
    5ff0:	de bf       	out	0x3e, r29	; 62
    5ff2:	0f be       	out	0x3f, r0	; 63
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	6d 83       	std	Y+5, r22	; 0x05
    5ff8:	7e 83       	std	Y+6, r23	; 0x06
    5ffa:	8f 83       	std	Y+7, r24	; 0x07
    5ffc:	98 87       	std	Y+8, r25	; 0x08
	float ang2 = 90 + ang ;
    5ffe:	6d 81       	ldd	r22, Y+5	; 0x05
    6000:	7e 81       	ldd	r23, Y+6	; 0x06
    6002:	8f 81       	ldd	r24, Y+7	; 0x07
    6004:	98 85       	ldd	r25, Y+8	; 0x08
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	44 eb       	ldi	r20, 0xB4	; 180
    600c:	52 e4       	ldi	r21, 0x42	; 66
    600e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__addsf3>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	89 83       	std	Y+1, r24	; 0x01
    6018:	9a 83       	std	Y+2, r25	; 0x02
    601a:	ab 83       	std	Y+3, r26	; 0x03
    601c:	bc 83       	std	Y+4, r27	; 0x04
		TCCR1A = (1<<WGM11)|(1<<COM1A1);
    601e:	ef e4       	ldi	r30, 0x4F	; 79
    6020:	f0 e0       	ldi	r31, 0x00	; 0
    6022:	82 e8       	ldi	r24, 0x82	; 130
    6024:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
    6026:	ee e4       	ldi	r30, 0x4E	; 78
    6028:	f0 e0       	ldi	r31, 0x00	; 0
    602a:	8a e1       	ldi	r24, 0x1A	; 26
    602c:	80 83       	st	Z, r24
		ICR1 = 2499 ;
    602e:	e6 e4       	ldi	r30, 0x46	; 70
    6030:	f0 e0       	ldi	r31, 0x00	; 0
    6032:	83 ec       	ldi	r24, 0xC3	; 195
    6034:	99 e0       	ldi	r25, 0x09	; 9
    6036:	91 83       	std	Z+1, r25	; 0x01
    6038:	80 83       	st	Z, r24
		SET_BIT(DDRD,5);
    603a:	a1 e3       	ldi	r26, 0x31	; 49
    603c:	b0 e0       	ldi	r27, 0x00	; 0
    603e:	e1 e3       	ldi	r30, 0x31	; 49
    6040:	f0 e0       	ldi	r31, 0x00	; 0
    6042:	80 81       	ld	r24, Z
    6044:	80 62       	ori	r24, 0x20	; 32
    6046:	8c 93       	st	X, r24
		OCR1A = (((1+(ang2/180))*1000)/8) ;
    6048:	0a e4       	ldi	r16, 0x4A	; 74
    604a:	10 e0       	ldi	r17, 0x00	; 0
    604c:	69 81       	ldd	r22, Y+1	; 0x01
    604e:	7a 81       	ldd	r23, Y+2	; 0x02
    6050:	8b 81       	ldd	r24, Y+3	; 0x03
    6052:	9c 81       	ldd	r25, Y+4	; 0x04
    6054:	20 e0       	ldi	r18, 0x00	; 0
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	44 e3       	ldi	r20, 0x34	; 52
    605a:	53 e4       	ldi	r21, 0x43	; 67
    605c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    6060:	dc 01       	movw	r26, r24
    6062:	cb 01       	movw	r24, r22
    6064:	bc 01       	movw	r22, r24
    6066:	cd 01       	movw	r24, r26
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e8       	ldi	r20, 0x80	; 128
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__addsf3>
    6074:	dc 01       	movw	r26, r24
    6076:	cb 01       	movw	r24, r22
    6078:	bc 01       	movw	r22, r24
    607a:	cd 01       	movw	r24, r26
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	30 e0       	ldi	r19, 0x00	; 0
    6080:	4a e7       	ldi	r20, 0x7A	; 122
    6082:	54 e4       	ldi	r21, 0x44	; 68
    6084:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    6088:	dc 01       	movw	r26, r24
    608a:	cb 01       	movw	r24, r22
    608c:	bc 01       	movw	r22, r24
    608e:	cd 01       	movw	r24, r26
    6090:	20 e0       	ldi	r18, 0x00	; 0
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	40 e0       	ldi	r20, 0x00	; 0
    6096:	51 e4       	ldi	r21, 0x41	; 65
    6098:	0e 94 89 0a 	call	0x1512	; 0x1512 <__divsf3>
    609c:	dc 01       	movw	r26, r24
    609e:	cb 01       	movw	r24, r22
    60a0:	bc 01       	movw	r22, r24
    60a2:	cd 01       	movw	r24, r26
    60a4:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    60a8:	dc 01       	movw	r26, r24
    60aa:	cb 01       	movw	r24, r22
    60ac:	f8 01       	movw	r30, r16
    60ae:	91 83       	std	Z+1, r25	; 0x01
    60b0:	80 83       	st	Z, r24
}
    60b2:	28 96       	adiw	r28, 0x08	; 8
    60b4:	0f b6       	in	r0, 0x3f	; 63
    60b6:	f8 94       	cli
    60b8:	de bf       	out	0x3e, r29	; 62
    60ba:	0f be       	out	0x3f, r0	; 63
    60bc:	cd bf       	out	0x3d, r28	; 61
    60be:	cf 91       	pop	r28
    60c0:	df 91       	pop	r29
    60c2:	1f 91       	pop	r17
    60c4:	0f 91       	pop	r16
    60c6:	08 95       	ret

000060c8 <__vector_11>:
#include "Lm35_sensor.h"

uint8 trick = 0;

ISR(TIMER0_OVF_vect)
{
    60c8:	1f 92       	push	r1
    60ca:	0f 92       	push	r0
    60cc:	0f b6       	in	r0, 0x3f	; 63
    60ce:	0f 92       	push	r0
    60d0:	11 24       	eor	r1, r1
    60d2:	2f 93       	push	r18
    60d4:	3f 93       	push	r19
    60d6:	4f 93       	push	r20
    60d8:	5f 93       	push	r21
    60da:	6f 93       	push	r22
    60dc:	7f 93       	push	r23
    60de:	8f 93       	push	r24
    60e0:	9f 93       	push	r25
    60e2:	af 93       	push	r26
    60e4:	bf 93       	push	r27
    60e6:	ef 93       	push	r30
    60e8:	ff 93       	push	r31
    60ea:	df 93       	push	r29
    60ec:	cf 93       	push	r28
    60ee:	cd b7       	in	r28, 0x3d	; 61
    60f0:	de b7       	in	r29, 0x3e	; 62
	trick++;
    60f2:	80 91 4b 02 	lds	r24, 0x024B
    60f6:	8f 5f       	subi	r24, 0xFF	; 255
    60f8:	80 93 4b 02 	sts	0x024B, r24
	SET_BIT(PORTD,6);
    60fc:	a2 e3       	ldi	r26, 0x32	; 50
    60fe:	b0 e0       	ldi	r27, 0x00	; 0
    6100:	e2 e3       	ldi	r30, 0x32	; 50
    6102:	f0 e0       	ldi	r31, 0x00	; 0
    6104:	80 81       	ld	r24, Z
    6106:	80 64       	ori	r24, 0x40	; 64
    6108:	8c 93       	st	X, r24
	TOGGLE_BIT(PORTD,0);
    610a:	a2 e3       	ldi	r26, 0x32	; 50
    610c:	b0 e0       	ldi	r27, 0x00	; 0
    610e:	e2 e3       	ldi	r30, 0x32	; 50
    6110:	f0 e0       	ldi	r31, 0x00	; 0
    6112:	90 81       	ld	r25, Z
    6114:	81 e0       	ldi	r24, 0x01	; 1
    6116:	89 27       	eor	r24, r25
    6118:	8c 93       	st	X, r24
	if(trick == 97)
    611a:	80 91 4b 02 	lds	r24, 0x024B
    611e:	81 36       	cpi	r24, 0x61	; 97
    6120:	99 f4       	brne	.+38     	; 0x6148 <__vector_11+0x80>
	{
		CLEAR_BIT(PORTD,0);
    6122:	a2 e3       	ldi	r26, 0x32	; 50
    6124:	b0 e0       	ldi	r27, 0x00	; 0
    6126:	e2 e3       	ldi	r30, 0x32	; 50
    6128:	f0 e0       	ldi	r31, 0x00	; 0
    612a:	80 81       	ld	r24, Z
    612c:	8e 7f       	andi	r24, 0xFE	; 254
    612e:	8c 93       	st	X, r24
		CLEAR_BIT(PORTD,6);
    6130:	a2 e3       	ldi	r26, 0x32	; 50
    6132:	b0 e0       	ldi	r27, 0x00	; 0
    6134:	e2 e3       	ldi	r30, 0x32	; 50
    6136:	f0 e0       	ldi	r31, 0x00	; 0
    6138:	80 81       	ld	r24, Z
    613a:	8f 7b       	andi	r24, 0xBF	; 191
    613c:	8c 93       	st	X, r24
		trick=0;
    613e:	10 92 4b 02 	sts	0x024B, r1
		Timer_DeInit(TIMER0);
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	0e 94 37 32 	call	0x646e	; 0x646e <Timer_DeInit>
	}
}
    6148:	cf 91       	pop	r28
    614a:	df 91       	pop	r29
    614c:	ff 91       	pop	r31
    614e:	ef 91       	pop	r30
    6150:	bf 91       	pop	r27
    6152:	af 91       	pop	r26
    6154:	9f 91       	pop	r25
    6156:	8f 91       	pop	r24
    6158:	7f 91       	pop	r23
    615a:	6f 91       	pop	r22
    615c:	5f 91       	pop	r21
    615e:	4f 91       	pop	r20
    6160:	3f 91       	pop	r19
    6162:	2f 91       	pop	r18
    6164:	0f 90       	pop	r0
    6166:	0f be       	out	0x3f, r0	; 63
    6168:	0f 90       	pop	r0
    616a:	1f 90       	pop	r1
    616c:	18 95       	reti

0000616e <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    616e:	1f 92       	push	r1
    6170:	0f 92       	push	r0
    6172:	0f b6       	in	r0, 0x3f	; 63
    6174:	0f 92       	push	r0
    6176:	11 24       	eor	r1, r1
    6178:	df 93       	push	r29
    617a:	cf 93       	push	r28
    617c:	cd b7       	in	r28, 0x3d	; 61
    617e:	de b7       	in	r29, 0x3e	; 62

}
    6180:	cf 91       	pop	r28
    6182:	df 91       	pop	r29
    6184:	0f 90       	pop	r0
    6186:	0f be       	out	0x3f, r0	; 63
    6188:	0f 90       	pop	r0
    618a:	1f 90       	pop	r1
    618c:	18 95       	reti

0000618e <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    618e:	1f 92       	push	r1
    6190:	0f 92       	push	r0
    6192:	0f b6       	in	r0, 0x3f	; 63
    6194:	0f 92       	push	r0
    6196:	11 24       	eor	r1, r1
    6198:	df 93       	push	r29
    619a:	cf 93       	push	r28
    619c:	cd b7       	in	r28, 0x3d	; 61
    619e:	de b7       	in	r29, 0x3e	; 62

}
    61a0:	cf 91       	pop	r28
    61a2:	df 91       	pop	r29
    61a4:	0f 90       	pop	r0
    61a6:	0f be       	out	0x3f, r0	; 63
    61a8:	0f 90       	pop	r0
    61aa:	1f 90       	pop	r1
    61ac:	18 95       	reti

000061ae <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    61ae:	1f 92       	push	r1
    61b0:	0f 92       	push	r0
    61b2:	0f b6       	in	r0, 0x3f	; 63
    61b4:	0f 92       	push	r0
    61b6:	11 24       	eor	r1, r1
    61b8:	df 93       	push	r29
    61ba:	cf 93       	push	r28
    61bc:	cd b7       	in	r28, 0x3d	; 61
    61be:	de b7       	in	r29, 0x3e	; 62

}
    61c0:	cf 91       	pop	r28
    61c2:	df 91       	pop	r29
    61c4:	0f 90       	pop	r0
    61c6:	0f be       	out	0x3f, r0	; 63
    61c8:	0f 90       	pop	r0
    61ca:	1f 90       	pop	r1
    61cc:	18 95       	reti

000061ce <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    61ce:	1f 92       	push	r1
    61d0:	0f 92       	push	r0
    61d2:	0f b6       	in	r0, 0x3f	; 63
    61d4:	0f 92       	push	r0
    61d6:	11 24       	eor	r1, r1
    61d8:	2f 93       	push	r18
    61da:	3f 93       	push	r19
    61dc:	4f 93       	push	r20
    61de:	5f 93       	push	r21
    61e0:	6f 93       	push	r22
    61e2:	7f 93       	push	r23
    61e4:	8f 93       	push	r24
    61e6:	9f 93       	push	r25
    61e8:	af 93       	push	r26
    61ea:	bf 93       	push	r27
    61ec:	ef 93       	push	r30
    61ee:	ff 93       	push	r31
    61f0:	df 93       	push	r29
    61f2:	cf 93       	push	r28
    61f4:	cd b7       	in	r28, 0x3d	; 61
    61f6:	de b7       	in	r29, 0x3e	; 62
	trick++;
    61f8:	80 91 4b 02 	lds	r24, 0x024B
    61fc:	8f 5f       	subi	r24, 0xFF	; 255
    61fe:	80 93 4b 02 	sts	0x024B, r24
	servo_init();
    6202:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <servo_init>
	servo_rotate(90);
    6206:	60 e0       	ldi	r22, 0x00	; 0
    6208:	70 e0       	ldi	r23, 0x00	; 0
    620a:	84 eb       	ldi	r24, 0xB4	; 180
    620c:	92 e4       	ldi	r25, 0x42	; 66
    620e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <servo_rotate>
	if(trick == 97)
    6212:	80 91 4b 02 	lds	r24, 0x024B
    6216:	81 36       	cpi	r24, 0x61	; 97
    6218:	59 f4       	brne	.+22     	; 0x6230 <__vector_5+0x62>
	{
		servo_rotate(0);
    621a:	60 e0       	ldi	r22, 0x00	; 0
    621c:	70 e0       	ldi	r23, 0x00	; 0
    621e:	80 e0       	ldi	r24, 0x00	; 0
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <servo_rotate>
		trick = 0;
    6226:	10 92 4b 02 	sts	0x024B, r1
		Timer_DeInit(TIMER2);
    622a:	82 e0       	ldi	r24, 0x02	; 2
    622c:	0e 94 37 32 	call	0x646e	; 0x646e <Timer_DeInit>
	}

}
    6230:	cf 91       	pop	r28
    6232:	df 91       	pop	r29
    6234:	ff 91       	pop	r31
    6236:	ef 91       	pop	r30
    6238:	bf 91       	pop	r27
    623a:	af 91       	pop	r26
    623c:	9f 91       	pop	r25
    623e:	8f 91       	pop	r24
    6240:	7f 91       	pop	r23
    6242:	6f 91       	pop	r22
    6244:	5f 91       	pop	r21
    6246:	4f 91       	pop	r20
    6248:	3f 91       	pop	r19
    624a:	2f 91       	pop	r18
    624c:	0f 90       	pop	r0
    624e:	0f be       	out	0x3f, r0	; 63
    6250:	0f 90       	pop	r0
    6252:	1f 90       	pop	r1
    6254:	18 95       	reti

00006256 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    6256:	1f 92       	push	r1
    6258:	0f 92       	push	r0
    625a:	0f b6       	in	r0, 0x3f	; 63
    625c:	0f 92       	push	r0
    625e:	11 24       	eor	r1, r1
    6260:	df 93       	push	r29
    6262:	cf 93       	push	r28
    6264:	cd b7       	in	r28, 0x3d	; 61
    6266:	de b7       	in	r29, 0x3e	; 62

}
    6268:	cf 91       	pop	r28
    626a:	df 91       	pop	r29
    626c:	0f 90       	pop	r0
    626e:	0f be       	out	0x3f, r0	; 63
    6270:	0f 90       	pop	r0
    6272:	1f 90       	pop	r1
    6274:	18 95       	reti

00006276 <Timer_init>:

void Timer_init(const Timer_ConfigType* config_ptr){
    6276:	df 93       	push	r29
    6278:	cf 93       	push	r28
    627a:	00 d0       	rcall	.+0      	; 0x627c <Timer_init+0x6>
    627c:	00 d0       	rcall	.+0      	; 0x627e <Timer_init+0x8>
    627e:	cd b7       	in	r28, 0x3d	; 61
    6280:	de b7       	in	r29, 0x3e	; 62
    6282:	9a 83       	std	Y+2, r25	; 0x02
    6284:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->number)
    6286:	e9 81       	ldd	r30, Y+1	; 0x01
    6288:	fa 81       	ldd	r31, Y+2	; 0x02
    628a:	80 81       	ld	r24, Z
    628c:	28 2f       	mov	r18, r24
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	3c 83       	std	Y+4, r19	; 0x04
    6292:	2b 83       	std	Y+3, r18	; 0x03
    6294:	8b 81       	ldd	r24, Y+3	; 0x03
    6296:	9c 81       	ldd	r25, Y+4	; 0x04
    6298:	81 30       	cpi	r24, 0x01	; 1
    629a:	91 05       	cpc	r25, r1
    629c:	09 f4       	brne	.+2      	; 0x62a0 <Timer_init+0x2a>
    629e:	4f c0       	rjmp	.+158    	; 0x633e <Timer_init+0xc8>
    62a0:	2b 81       	ldd	r18, Y+3	; 0x03
    62a2:	3c 81       	ldd	r19, Y+4	; 0x04
    62a4:	22 30       	cpi	r18, 0x02	; 2
    62a6:	31 05       	cpc	r19, r1
    62a8:	09 f4       	brne	.+2      	; 0x62ac <Timer_init+0x36>
    62aa:	98 c0       	rjmp	.+304    	; 0x63dc <Timer_init+0x166>
    62ac:	8b 81       	ldd	r24, Y+3	; 0x03
    62ae:	9c 81       	ldd	r25, Y+4	; 0x04
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	09 f0       	breq	.+2      	; 0x62b6 <Timer_init+0x40>
    62b4:	d5 c0       	rjmp	.+426    	; 0x6460 <Timer_init+0x1ea>
	{
	case TIMER0:
		TCNT0 = (uint8)config_ptr->initialCounter;
    62b6:	a2 e5       	ldi	r26, 0x52	; 82
    62b8:	b0 e0       	ldi	r27, 0x00	; 0
    62ba:	e9 81       	ldd	r30, Y+1	; 0x01
    62bc:	fa 81       	ldd	r31, Y+2	; 0x02
    62be:	83 81       	ldd	r24, Z+3	; 0x03
    62c0:	94 81       	ldd	r25, Z+4	; 0x04
    62c2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,FOC0);
    62c4:	a3 e5       	ldi	r26, 0x53	; 83
    62c6:	b0 e0       	ldi	r27, 0x00	; 0
    62c8:	e3 e5       	ldi	r30, 0x53	; 83
    62ca:	f0 e0       	ldi	r31, 0x00	; 0
    62cc:	80 81       	ld	r24, Z
    62ce:	80 68       	ori	r24, 0x80	; 128
    62d0:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (config_ptr->prescalar & 0x07);
    62d2:	a3 e5       	ldi	r26, 0x53	; 83
    62d4:	b0 e0       	ldi	r27, 0x00	; 0
    62d6:	e3 e5       	ldi	r30, 0x53	; 83
    62d8:	f0 e0       	ldi	r31, 0x00	; 0
    62da:	80 81       	ld	r24, Z
    62dc:	98 2f       	mov	r25, r24
    62de:	98 7f       	andi	r25, 0xF8	; 248
    62e0:	e9 81       	ldd	r30, Y+1	; 0x01
    62e2:	fa 81       	ldd	r31, Y+2	; 0x02
    62e4:	82 81       	ldd	r24, Z+2	; 0x02
    62e6:	87 70       	andi	r24, 0x07	; 7
    62e8:	89 2b       	or	r24, r25
    62ea:	8c 93       	st	X, r24
		if (config_ptr->mode == COMPARE){
    62ec:	e9 81       	ldd	r30, Y+1	; 0x01
    62ee:	fa 81       	ldd	r31, Y+2	; 0x02
    62f0:	81 81       	ldd	r24, Z+1	; 0x01
    62f2:	81 30       	cpi	r24, 0x01	; 1
    62f4:	b1 f4       	brne	.+44     	; 0x6322 <Timer_init+0xac>
			SET_BIT(TCCR0,WGM01);
    62f6:	a3 e5       	ldi	r26, 0x53	; 83
    62f8:	b0 e0       	ldi	r27, 0x00	; 0
    62fa:	e3 e5       	ldi	r30, 0x53	; 83
    62fc:	f0 e0       	ldi	r31, 0x00	; 0
    62fe:	80 81       	ld	r24, Z
    6300:	88 60       	ori	r24, 0x08	; 8
    6302:	8c 93       	st	X, r24
			OCR0 = (uint8)config_ptr->compareValue;
    6304:	ac e5       	ldi	r26, 0x5C	; 92
    6306:	b0 e0       	ldi	r27, 0x00	; 0
    6308:	e9 81       	ldd	r30, Y+1	; 0x01
    630a:	fa 81       	ldd	r31, Y+2	; 0x02
    630c:	85 81       	ldd	r24, Z+5	; 0x05
    630e:	96 81       	ldd	r25, Z+6	; 0x06
    6310:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    6312:	a9 e5       	ldi	r26, 0x59	; 89
    6314:	b0 e0       	ldi	r27, 0x00	; 0
    6316:	e9 e5       	ldi	r30, 0x59	; 89
    6318:	f0 e0       	ldi	r31, 0x00	; 0
    631a:	80 81       	ld	r24, Z
    631c:	82 60       	ori	r24, 0x02	; 2
    631e:	8c 93       	st	X, r24
    6320:	9f c0       	rjmp	.+318    	; 0x6460 <Timer_init+0x1ea>
		}
		else if(config_ptr->mode == NORMAL){
    6322:	e9 81       	ldd	r30, Y+1	; 0x01
    6324:	fa 81       	ldd	r31, Y+2	; 0x02
    6326:	81 81       	ldd	r24, Z+1	; 0x01
    6328:	88 23       	and	r24, r24
    632a:	09 f0       	breq	.+2      	; 0x632e <Timer_init+0xb8>
    632c:	99 c0       	rjmp	.+306    	; 0x6460 <Timer_init+0x1ea>
			SET_BIT(TIMSK,TOIE0);
    632e:	a9 e5       	ldi	r26, 0x59	; 89
    6330:	b0 e0       	ldi	r27, 0x00	; 0
    6332:	e9 e5       	ldi	r30, 0x59	; 89
    6334:	f0 e0       	ldi	r31, 0x00	; 0
    6336:	80 81       	ld	r24, Z
    6338:	81 60       	ori	r24, 0x01	; 1
    633a:	8c 93       	st	X, r24
    633c:	91 c0       	rjmp	.+290    	; 0x6460 <Timer_init+0x1ea>
		}
		break;
	case TIMER1:
		TCNT1 = config_ptr->initialCounter;
    633e:	ac e4       	ldi	r26, 0x4C	; 76
    6340:	b0 e0       	ldi	r27, 0x00	; 0
    6342:	e9 81       	ldd	r30, Y+1	; 0x01
    6344:	fa 81       	ldd	r31, Y+2	; 0x02
    6346:	83 81       	ldd	r24, Z+3	; 0x03
    6348:	94 81       	ldd	r25, Z+4	; 0x04
    634a:	11 96       	adiw	r26, 0x01	; 1
    634c:	9c 93       	st	X, r25
    634e:	8e 93       	st	-X, r24
		SET_BIT(TCCR1A, FOC1A);
    6350:	af e4       	ldi	r26, 0x4F	; 79
    6352:	b0 e0       	ldi	r27, 0x00	; 0
    6354:	ef e4       	ldi	r30, 0x4F	; 79
    6356:	f0 e0       	ldi	r31, 0x00	; 0
    6358:	80 81       	ld	r24, Z
    635a:	88 60       	ori	r24, 0x08	; 8
    635c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    635e:	af e4       	ldi	r26, 0x4F	; 79
    6360:	b0 e0       	ldi	r27, 0x00	; 0
    6362:	ef e4       	ldi	r30, 0x4F	; 79
    6364:	f0 e0       	ldi	r31, 0x00	; 0
    6366:	80 81       	ld	r24, Z
    6368:	84 60       	ori	r24, 0x04	; 4
    636a:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | (config_ptr->prescalar & 0x07);
    636c:	ae e4       	ldi	r26, 0x4E	; 78
    636e:	b0 e0       	ldi	r27, 0x00	; 0
    6370:	ee e4       	ldi	r30, 0x4E	; 78
    6372:	f0 e0       	ldi	r31, 0x00	; 0
    6374:	80 81       	ld	r24, Z
    6376:	98 2f       	mov	r25, r24
    6378:	98 7f       	andi	r25, 0xF8	; 248
    637a:	e9 81       	ldd	r30, Y+1	; 0x01
    637c:	fa 81       	ldd	r31, Y+2	; 0x02
    637e:	82 81       	ldd	r24, Z+2	; 0x02
    6380:	87 70       	andi	r24, 0x07	; 7
    6382:	89 2b       	or	r24, r25
    6384:	8c 93       	st	X, r24
		if (config_ptr->mode == COMPARE){
    6386:	e9 81       	ldd	r30, Y+1	; 0x01
    6388:	fa 81       	ldd	r31, Y+2	; 0x02
    638a:	81 81       	ldd	r24, Z+1	; 0x01
    638c:	81 30       	cpi	r24, 0x01	; 1
    638e:	c1 f4       	brne	.+48     	; 0x63c0 <Timer_init+0x14a>
			SET_BIT(TCCR1B,WGM12);
    6390:	ae e4       	ldi	r26, 0x4E	; 78
    6392:	b0 e0       	ldi	r27, 0x00	; 0
    6394:	ee e4       	ldi	r30, 0x4E	; 78
    6396:	f0 e0       	ldi	r31, 0x00	; 0
    6398:	80 81       	ld	r24, Z
    639a:	88 60       	ori	r24, 0x08	; 8
    639c:	8c 93       	st	X, r24
			OCR1A = config_ptr->compareValue;
    639e:	aa e4       	ldi	r26, 0x4A	; 74
    63a0:	b0 e0       	ldi	r27, 0x00	; 0
    63a2:	e9 81       	ldd	r30, Y+1	; 0x01
    63a4:	fa 81       	ldd	r31, Y+2	; 0x02
    63a6:	85 81       	ldd	r24, Z+5	; 0x05
    63a8:	96 81       	ldd	r25, Z+6	; 0x06
    63aa:	11 96       	adiw	r26, 0x01	; 1
    63ac:	9c 93       	st	X, r25
    63ae:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A);
    63b0:	a9 e5       	ldi	r26, 0x59	; 89
    63b2:	b0 e0       	ldi	r27, 0x00	; 0
    63b4:	e9 e5       	ldi	r30, 0x59	; 89
    63b6:	f0 e0       	ldi	r31, 0x00	; 0
    63b8:	80 81       	ld	r24, Z
    63ba:	80 61       	ori	r24, 0x10	; 16
    63bc:	8c 93       	st	X, r24
    63be:	50 c0       	rjmp	.+160    	; 0x6460 <Timer_init+0x1ea>
		}
		else if(config_ptr->mode == NORMAL){
    63c0:	e9 81       	ldd	r30, Y+1	; 0x01
    63c2:	fa 81       	ldd	r31, Y+2	; 0x02
    63c4:	81 81       	ldd	r24, Z+1	; 0x01
    63c6:	88 23       	and	r24, r24
    63c8:	09 f0       	breq	.+2      	; 0x63cc <Timer_init+0x156>
    63ca:	4a c0       	rjmp	.+148    	; 0x6460 <Timer_init+0x1ea>
			SET_BIT(TIMSK,TOIE1);
    63cc:	a9 e5       	ldi	r26, 0x59	; 89
    63ce:	b0 e0       	ldi	r27, 0x00	; 0
    63d0:	e9 e5       	ldi	r30, 0x59	; 89
    63d2:	f0 e0       	ldi	r31, 0x00	; 0
    63d4:	80 81       	ld	r24, Z
    63d6:	84 60       	ori	r24, 0x04	; 4
    63d8:	8c 93       	st	X, r24
    63da:	42 c0       	rjmp	.+132    	; 0x6460 <Timer_init+0x1ea>
		}
		break;
	case TIMER2 :
		TCNT2 = (uint8)config_ptr->initialCounter;
    63dc:	a4 e4       	ldi	r26, 0x44	; 68
    63de:	b0 e0       	ldi	r27, 0x00	; 0
    63e0:	e9 81       	ldd	r30, Y+1	; 0x01
    63e2:	fa 81       	ldd	r31, Y+2	; 0x02
    63e4:	83 81       	ldd	r24, Z+3	; 0x03
    63e6:	94 81       	ldd	r25, Z+4	; 0x04
    63e8:	8c 93       	st	X, r24
		SET_BIT(TCCR2,FOC2);
    63ea:	a5 e4       	ldi	r26, 0x45	; 69
    63ec:	b0 e0       	ldi	r27, 0x00	; 0
    63ee:	e5 e4       	ldi	r30, 0x45	; 69
    63f0:	f0 e0       	ldi	r31, 0x00	; 0
    63f2:	80 81       	ld	r24, Z
    63f4:	80 68       	ori	r24, 0x80	; 128
    63f6:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF8) | (config_ptr->prescalar & 0x07);
    63f8:	a5 e4       	ldi	r26, 0x45	; 69
    63fa:	b0 e0       	ldi	r27, 0x00	; 0
    63fc:	e5 e4       	ldi	r30, 0x45	; 69
    63fe:	f0 e0       	ldi	r31, 0x00	; 0
    6400:	80 81       	ld	r24, Z
    6402:	98 2f       	mov	r25, r24
    6404:	98 7f       	andi	r25, 0xF8	; 248
    6406:	e9 81       	ldd	r30, Y+1	; 0x01
    6408:	fa 81       	ldd	r31, Y+2	; 0x02
    640a:	82 81       	ldd	r24, Z+2	; 0x02
    640c:	87 70       	andi	r24, 0x07	; 7
    640e:	89 2b       	or	r24, r25
    6410:	8c 93       	st	X, r24
		if (config_ptr->mode == COMPARE){
    6412:	e9 81       	ldd	r30, Y+1	; 0x01
    6414:	fa 81       	ldd	r31, Y+2	; 0x02
    6416:	81 81       	ldd	r24, Z+1	; 0x01
    6418:	81 30       	cpi	r24, 0x01	; 1
    641a:	b1 f4       	brne	.+44     	; 0x6448 <Timer_init+0x1d2>
			SET_BIT(TCCR2,WGM21);
    641c:	a5 e4       	ldi	r26, 0x45	; 69
    641e:	b0 e0       	ldi	r27, 0x00	; 0
    6420:	e5 e4       	ldi	r30, 0x45	; 69
    6422:	f0 e0       	ldi	r31, 0x00	; 0
    6424:	80 81       	ld	r24, Z
    6426:	88 60       	ori	r24, 0x08	; 8
    6428:	8c 93       	st	X, r24
			OCR2 = (uint8)config_ptr->compareValue;
    642a:	a3 e4       	ldi	r26, 0x43	; 67
    642c:	b0 e0       	ldi	r27, 0x00	; 0
    642e:	e9 81       	ldd	r30, Y+1	; 0x01
    6430:	fa 81       	ldd	r31, Y+2	; 0x02
    6432:	85 81       	ldd	r24, Z+5	; 0x05
    6434:	96 81       	ldd	r25, Z+6	; 0x06
    6436:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);
    6438:	a9 e5       	ldi	r26, 0x59	; 89
    643a:	b0 e0       	ldi	r27, 0x00	; 0
    643c:	e9 e5       	ldi	r30, 0x59	; 89
    643e:	f0 e0       	ldi	r31, 0x00	; 0
    6440:	80 81       	ld	r24, Z
    6442:	80 68       	ori	r24, 0x80	; 128
    6444:	8c 93       	st	X, r24
    6446:	0c c0       	rjmp	.+24     	; 0x6460 <Timer_init+0x1ea>
		}
		else if(config_ptr->mode == NORMAL){
    6448:	e9 81       	ldd	r30, Y+1	; 0x01
    644a:	fa 81       	ldd	r31, Y+2	; 0x02
    644c:	81 81       	ldd	r24, Z+1	; 0x01
    644e:	88 23       	and	r24, r24
    6450:	39 f4       	brne	.+14     	; 0x6460 <Timer_init+0x1ea>
			SET_BIT(TIMSK,TOIE2);
    6452:	a9 e5       	ldi	r26, 0x59	; 89
    6454:	b0 e0       	ldi	r27, 0x00	; 0
    6456:	e9 e5       	ldi	r30, 0x59	; 89
    6458:	f0 e0       	ldi	r31, 0x00	; 0
    645a:	80 81       	ld	r24, Z
    645c:	80 64       	ori	r24, 0x40	; 64
    645e:	8c 93       	st	X, r24
		}
		break;
	}
}
    6460:	0f 90       	pop	r0
    6462:	0f 90       	pop	r0
    6464:	0f 90       	pop	r0
    6466:	0f 90       	pop	r0
    6468:	cf 91       	pop	r28
    646a:	df 91       	pop	r29
    646c:	08 95       	ret

0000646e <Timer_DeInit>:

void Timer_DeInit(Timer_Number number){
    646e:	df 93       	push	r29
    6470:	cf 93       	push	r28
    6472:	00 d0       	rcall	.+0      	; 0x6474 <Timer_DeInit+0x6>
    6474:	0f 92       	push	r0
    6476:	cd b7       	in	r28, 0x3d	; 61
    6478:	de b7       	in	r29, 0x3e	; 62
    647a:	89 83       	std	Y+1, r24	; 0x01
	switch(number)
    647c:	89 81       	ldd	r24, Y+1	; 0x01
    647e:	28 2f       	mov	r18, r24
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	3b 83       	std	Y+3, r19	; 0x03
    6484:	2a 83       	std	Y+2, r18	; 0x02
    6486:	8a 81       	ldd	r24, Y+2	; 0x02
    6488:	9b 81       	ldd	r25, Y+3	; 0x03
    648a:	81 30       	cpi	r24, 0x01	; 1
    648c:	91 05       	cpc	r25, r1
    648e:	19 f1       	breq	.+70     	; 0x64d6 <Timer_DeInit+0x68>
    6490:	2a 81       	ldd	r18, Y+2	; 0x02
    6492:	3b 81       	ldd	r19, Y+3	; 0x03
    6494:	22 30       	cpi	r18, 0x02	; 2
    6496:	31 05       	cpc	r19, r1
    6498:	09 f4       	brne	.+2      	; 0x649c <Timer_DeInit+0x2e>
    649a:	45 c0       	rjmp	.+138    	; 0x6526 <Timer_DeInit+0xb8>
    649c:	8a 81       	ldd	r24, Y+2	; 0x02
    649e:	9b 81       	ldd	r25, Y+3	; 0x03
    64a0:	00 97       	sbiw	r24, 0x00	; 0
    64a2:	09 f0       	breq	.+2      	; 0x64a6 <Timer_DeInit+0x38>
    64a4:	57 c0       	rjmp	.+174    	; 0x6554 <Timer_DeInit+0xe6>
	{
	case TIMER0:
		TCCR0 = 0;
    64a6:	e3 e5       	ldi	r30, 0x53	; 83
    64a8:	f0 e0       	ldi	r31, 0x00	; 0
    64aa:	10 82       	st	Z, r1
		TCNT0 = 0;
    64ac:	e2 e5       	ldi	r30, 0x52	; 82
    64ae:	f0 e0       	ldi	r31, 0x00	; 0
    64b0:	10 82       	st	Z, r1
		OCR0 = 0;
    64b2:	ec e5       	ldi	r30, 0x5C	; 92
    64b4:	f0 e0       	ldi	r31, 0x00	; 0
    64b6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    64b8:	a9 e5       	ldi	r26, 0x59	; 89
    64ba:	b0 e0       	ldi	r27, 0x00	; 0
    64bc:	e9 e5       	ldi	r30, 0x59	; 89
    64be:	f0 e0       	ldi	r31, 0x00	; 0
    64c0:	80 81       	ld	r24, Z
    64c2:	8e 7f       	andi	r24, 0xFE	; 254
    64c4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE0);
    64c6:	a9 e5       	ldi	r26, 0x59	; 89
    64c8:	b0 e0       	ldi	r27, 0x00	; 0
    64ca:	e9 e5       	ldi	r30, 0x59	; 89
    64cc:	f0 e0       	ldi	r31, 0x00	; 0
    64ce:	80 81       	ld	r24, Z
    64d0:	8d 7f       	andi	r24, 0xFD	; 253
    64d2:	8c 93       	st	X, r24
    64d4:	3f c0       	rjmp	.+126    	; 0x6554 <Timer_DeInit+0xe6>
		break;
	case TIMER1:
		TCCR1A = 0;
    64d6:	ef e4       	ldi	r30, 0x4F	; 79
    64d8:	f0 e0       	ldi	r31, 0x00	; 0
    64da:	10 82       	st	Z, r1
		TCCR1B = 0;
    64dc:	ee e4       	ldi	r30, 0x4E	; 78
    64de:	f0 e0       	ldi	r31, 0x00	; 0
    64e0:	10 82       	st	Z, r1
		TCNT1 = 0;
    64e2:	ec e4       	ldi	r30, 0x4C	; 76
    64e4:	f0 e0       	ldi	r31, 0x00	; 0
    64e6:	11 82       	std	Z+1, r1	; 0x01
    64e8:	10 82       	st	Z, r1
		OCR1A = 0;
    64ea:	ea e4       	ldi	r30, 0x4A	; 74
    64ec:	f0 e0       	ldi	r31, 0x00	; 0
    64ee:	11 82       	std	Z+1, r1	; 0x01
    64f0:	10 82       	st	Z, r1
		OCR1B = 0;
    64f2:	e8 e4       	ldi	r30, 0x48	; 72
    64f4:	f0 e0       	ldi	r31, 0x00	; 0
    64f6:	11 82       	std	Z+1, r1	; 0x01
    64f8:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    64fa:	a9 e5       	ldi	r26, 0x59	; 89
    64fc:	b0 e0       	ldi	r27, 0x00	; 0
    64fe:	e9 e5       	ldi	r30, 0x59	; 89
    6500:	f0 e0       	ldi	r31, 0x00	; 0
    6502:	80 81       	ld	r24, Z
    6504:	8b 7f       	andi	r24, 0xFB	; 251
    6506:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    6508:	a9 e5       	ldi	r26, 0x59	; 89
    650a:	b0 e0       	ldi	r27, 0x00	; 0
    650c:	e9 e5       	ldi	r30, 0x59	; 89
    650e:	f0 e0       	ldi	r31, 0x00	; 0
    6510:	80 81       	ld	r24, Z
    6512:	8f 7e       	andi	r24, 0xEF	; 239
    6514:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    6516:	a9 e5       	ldi	r26, 0x59	; 89
    6518:	b0 e0       	ldi	r27, 0x00	; 0
    651a:	e9 e5       	ldi	r30, 0x59	; 89
    651c:	f0 e0       	ldi	r31, 0x00	; 0
    651e:	80 81       	ld	r24, Z
    6520:	87 7f       	andi	r24, 0xF7	; 247
    6522:	8c 93       	st	X, r24
    6524:	17 c0       	rjmp	.+46     	; 0x6554 <Timer_DeInit+0xe6>
		break;
	case TIMER2:
		TCCR2 = 0;
    6526:	e5 e4       	ldi	r30, 0x45	; 69
    6528:	f0 e0       	ldi	r31, 0x00	; 0
    652a:	10 82       	st	Z, r1
		TCNT2 = 0;
    652c:	e4 e4       	ldi	r30, 0x44	; 68
    652e:	f0 e0       	ldi	r31, 0x00	; 0
    6530:	10 82       	st	Z, r1
		OCR2 = 0;
    6532:	e3 e4       	ldi	r30, 0x43	; 67
    6534:	f0 e0       	ldi	r31, 0x00	; 0
    6536:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    6538:	a9 e5       	ldi	r26, 0x59	; 89
    653a:	b0 e0       	ldi	r27, 0x00	; 0
    653c:	e9 e5       	ldi	r30, 0x59	; 89
    653e:	f0 e0       	ldi	r31, 0x00	; 0
    6540:	80 81       	ld	r24, Z
    6542:	8f 7b       	andi	r24, 0xBF	; 191
    6544:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    6546:	a9 e5       	ldi	r26, 0x59	; 89
    6548:	b0 e0       	ldi	r27, 0x00	; 0
    654a:	e9 e5       	ldi	r30, 0x59	; 89
    654c:	f0 e0       	ldi	r31, 0x00	; 0
    654e:	80 81       	ld	r24, Z
    6550:	8f 77       	andi	r24, 0x7F	; 127
    6552:	8c 93       	st	X, r24
		break;
	}
}
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	cf 91       	pop	r28
    655c:	df 91       	pop	r29
    655e:	08 95       	ret

00006560 <USART_Init>:

#include <avr/io.h>
#include "Types_Macros.h"
#include "USART.h"

void  USART_Init(){
    6560:	df 93       	push	r29
    6562:	cf 93       	push	r28
    6564:	00 d0       	rcall	.+0      	; 0x6566 <USART_Init+0x6>
    6566:	cd b7       	in	r28, 0x3d	; 61
    6568:	de b7       	in	r29, 0x3e	; 62
   #endif
   // Select the USART Mode
   #if Communication_Mode == Tx
   SET_BIT(UCSRB, TXEN);
   #elif Communication_Mode == Rx
   SET_BIT(UCSRB, RXEN);
    656a:	aa e2       	ldi	r26, 0x2A	; 42
    656c:	b0 e0       	ldi	r27, 0x00	; 0
    656e:	ea e2       	ldi	r30, 0x2A	; 42
    6570:	f0 e0       	ldi	r31, 0x00	; 0
    6572:	80 81       	ld	r24, Z
    6574:	80 61       	ori	r24, 0x10	; 16
    6576:	8c 93       	st	X, r24
   #elif Communication_Mode == Tx_Rx
   SET_BIT(UCSRB, TXEN);
   SET_BIT(UCSRB, RXEN);
   #endif
   // Setting the Baud Rate
   uint16 UBRR_Val = Calc_UBRR(1000000UL, Baud_Rate, Transmission_Speed);
    6578:	85 e0       	ldi	r24, 0x05	; 5
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	9a 83       	std	Y+2, r25	; 0x02
    657e:	89 83       	std	Y+1, r24	; 0x01
   UBRRH = (uint8)(UBRR_Val>>8);
    6580:	e0 e4       	ldi	r30, 0x40	; 64
    6582:	f0 e0       	ldi	r31, 0x00	; 0
    6584:	89 81       	ldd	r24, Y+1	; 0x01
    6586:	9a 81       	ldd	r25, Y+2	; 0x02
    6588:	89 2f       	mov	r24, r25
    658a:	99 27       	eor	r25, r25
    658c:	80 83       	st	Z, r24
   UBRRL = (uint8)UBRR_Val;
    658e:	e9 e2       	ldi	r30, 0x29	; 41
    6590:	f0 e0       	ldi	r31, 0x00	; 0
    6592:	89 81       	ldd	r24, Y+1	; 0x01
    6594:	80 83       	st	Z, r24
   // Select the Data Length
   SET_BIT(UCSRC, 7);
    6596:	a0 e4       	ldi	r26, 0x40	; 64
    6598:	b0 e0       	ldi	r27, 0x00	; 0
    659a:	e0 e4       	ldi	r30, 0x40	; 64
    659c:	f0 e0       	ldi	r31, 0x00	; 0
    659e:	80 81       	ld	r24, Z
    65a0:	80 68       	ori	r24, 0x80	; 128
    65a2:	8c 93       	st	X, r24
   #elif Data_Size == _7_Bits
   CLEAR_BIT(UCSRB, UCSZ2);
   SET_BIT(UCSRC,   UCSZ1);
   CLEAR_BIT(UCSRC, UCSZ0);
   #elif Data_Size == _8_Bits
   CLEAR_BIT(UCSRB, UCSZ2);
    65a4:	aa e2       	ldi	r26, 0x2A	; 42
    65a6:	b0 e0       	ldi	r27, 0x00	; 0
    65a8:	ea e2       	ldi	r30, 0x2A	; 42
    65aa:	f0 e0       	ldi	r31, 0x00	; 0
    65ac:	80 81       	ld	r24, Z
    65ae:	8b 7f       	andi	r24, 0xFB	; 251
    65b0:	8c 93       	st	X, r24
   SET_BIT(UCSRC,   UCSZ1);
    65b2:	a0 e4       	ldi	r26, 0x40	; 64
    65b4:	b0 e0       	ldi	r27, 0x00	; 0
    65b6:	e0 e4       	ldi	r30, 0x40	; 64
    65b8:	f0 e0       	ldi	r31, 0x00	; 0
    65ba:	80 81       	ld	r24, Z
    65bc:	84 60       	ori	r24, 0x04	; 4
    65be:	8c 93       	st	X, r24
   SET_BIT(UCSRC,   UCSZ0);
    65c0:	a0 e4       	ldi	r26, 0x40	; 64
    65c2:	b0 e0       	ldi	r27, 0x00	; 0
    65c4:	e0 e4       	ldi	r30, 0x40	; 64
    65c6:	f0 e0       	ldi	r31, 0x00	; 0
    65c8:	80 81       	ld	r24, Z
    65ca:	82 60       	ori	r24, 0x02	; 2
    65cc:	8c 93       	st	X, r24
   #endif
   // Select the USART Mode
   #if USART_Mode == Syn
   SET_BIT(UCSRC, UMSEL);
   #elif USART_Mode == Asyn
   CLEAR_BIT(UCSRC, UCPOL);
    65ce:	a0 e4       	ldi	r26, 0x40	; 64
    65d0:	b0 e0       	ldi	r27, 0x00	; 0
    65d2:	e0 e4       	ldi	r30, 0x40	; 64
    65d4:	f0 e0       	ldi	r31, 0x00	; 0
    65d6:	80 81       	ld	r24, Z
    65d8:	8e 7f       	andi	r24, 0xFE	; 254
    65da:	8c 93       	st	X, r24
   #endif
   // Select the number of stop bits
   #if Stop_Bit == _2_Bits
   SET_BIT(UCSRC, USBS);
   #elif Stop_Bit == _1_Bit
   CLEAR_BIT(UCSRC, USBS);
    65dc:	a0 e4       	ldi	r26, 0x40	; 64
    65de:	b0 e0       	ldi	r27, 0x00	; 0
    65e0:	e0 e4       	ldi	r30, 0x40	; 64
    65e2:	f0 e0       	ldi	r31, 0x00	; 0
    65e4:	80 81       	ld	r24, Z
    65e6:	87 7f       	andi	r24, 0xF7	; 247
    65e8:	8c 93       	st	X, r24
   #endif
}
    65ea:	0f 90       	pop	r0
    65ec:	0f 90       	pop	r0
    65ee:	cf 91       	pop	r28
    65f0:	df 91       	pop	r29
    65f2:	08 95       	ret

000065f4 <USART_ReceiveData>:
   UDR = data;
}
#endif

#if Communication_Mode == Rx || Communication_Mode == Tx_Rx
uint8 USART_ReceiveData(){
    65f4:	df 93       	push	r29
    65f6:	cf 93       	push	r28
    65f8:	cd b7       	in	r28, 0x3d	; 61
    65fa:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(UCSRA, RXC));    // Wait until data coming from outside interface
    65fc:	eb e2       	ldi	r30, 0x2B	; 43
    65fe:	f0 e0       	ldi	r31, 0x00	; 0
    6600:	80 81       	ld	r24, Z
    6602:	88 23       	and	r24, r24
    6604:	dc f7       	brge	.-10     	; 0x65fc <USART_ReceiveData+0x8>
   return UDR;
    6606:	ec e2       	ldi	r30, 0x2C	; 44
    6608:	f0 e0       	ldi	r31, 0x00	; 0
    660a:	80 81       	ld	r24, Z
}
    660c:	cf 91       	pop	r28
    660e:	df 91       	pop	r29
    6610:	08 95       	ret

00006612 <main>:
#include "Servo.h"
#include "Lm35_Sensor.h"
#include "LDR.h"

int main()
{
    6612:	0f 93       	push	r16
    6614:	1f 93       	push	r17
    6616:	df 93       	push	r29
    6618:	cf 93       	push	r28
    661a:	cd b7       	in	r28, 0x3d	; 61
    661c:	de b7       	in	r29, 0x3e	; 62
    661e:	c3 5c       	subi	r28, 0xC3	; 195
    6620:	d2 40       	sbci	r29, 0x02	; 2
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	de bf       	out	0x3e, r29	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);
    662c:	af e5       	ldi	r26, 0x5F	; 95
    662e:	b0 e0       	ldi	r27, 0x00	; 0
    6630:	ef e5       	ldi	r30, 0x5F	; 95
    6632:	f0 e0       	ldi	r31, 0x00	; 0
    6634:	80 81       	ld	r24, Z
    6636:	80 68       	ori	r24, 0x80	; 128
    6638:	8c 93       	st	X, r24

	CLEAR_BIT(DDRA,2);
    663a:	aa e3       	ldi	r26, 0x3A	; 58
    663c:	b0 e0       	ldi	r27, 0x00	; 0
    663e:	ea e3       	ldi	r30, 0x3A	; 58
    6640:	f0 e0       	ldi	r31, 0x00	; 0
    6642:	80 81       	ld	r24, Z
    6644:	8b 7f       	andi	r24, 0xFB	; 251
    6646:	8c 93       	st	X, r24
	DDRB = 0xff;
    6648:	e7 e3       	ldi	r30, 0x37	; 55
    664a:	f0 e0       	ldi	r31, 0x00	; 0
    664c:	8f ef       	ldi	r24, 0xFF	; 255
    664e:	80 83       	st	Z, r24
	PORTB = 0;
    6650:	e8 e3       	ldi	r30, 0x38	; 56
    6652:	f0 e0       	ldi	r31, 0x00	; 0
    6654:	10 82       	st	Z, r1

	DDRD = 0x0E;
    6656:	e1 e3       	ldi	r30, 0x31	; 49
    6658:	f0 e0       	ldi	r31, 0x00	; 0
    665a:	8e e0       	ldi	r24, 0x0E	; 14
    665c:	80 83       	st	Z, r24
	PORTD = 0;
    665e:	e2 e3       	ldi	r30, 0x32	; 50
    6660:	f0 e0       	ldi	r31, 0x00	; 0
    6662:	10 82       	st	Z, r1

	SET_BIT(DDRD,0);
    6664:	a1 e3       	ldi	r26, 0x31	; 49
    6666:	b0 e0       	ldi	r27, 0x00	; 0
    6668:	e1 e3       	ldi	r30, 0x31	; 49
    666a:	f0 e0       	ldi	r31, 0x00	; 0
    666c:	80 81       	ld	r24, Z
    666e:	81 60       	ori	r24, 0x01	; 1
    6670:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,0);
    6672:	a2 e3       	ldi	r26, 0x32	; 50
    6674:	b0 e0       	ldi	r27, 0x00	; 0
    6676:	e2 e3       	ldi	r30, 0x32	; 50
    6678:	f0 e0       	ldi	r31, 0x00	; 0
    667a:	80 81       	ld	r24, Z
    667c:	8e 7f       	andi	r24, 0xFE	; 254
    667e:	8c 93       	st	X, r24

	SET_BIT(DDRD,6);
    6680:	a1 e3       	ldi	r26, 0x31	; 49
    6682:	b0 e0       	ldi	r27, 0x00	; 0
    6684:	e1 e3       	ldi	r30, 0x31	; 49
    6686:	f0 e0       	ldi	r31, 0x00	; 0
    6688:	80 81       	ld	r24, Z
    668a:	80 64       	ori	r24, 0x40	; 64
    668c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,6);
    668e:	a2 e3       	ldi	r26, 0x32	; 50
    6690:	b0 e0       	ldi	r27, 0x00	; 0
    6692:	e2 e3       	ldi	r30, 0x32	; 50
    6694:	f0 e0       	ldi	r31, 0x00	; 0
    6696:	80 81       	ld	r24, Z
    6698:	8f 7b       	andi	r24, 0xBF	; 191
    669a:	8c 93       	st	X, r24

	Configuration lcd = {1 ,2 ,3 , PortD , PortB , _8bits ,_2Line,_5_10};
    669c:	ce 01       	movw	r24, r28
    669e:	89 53       	subi	r24, 0x39	; 57
    66a0:	9e 4f       	sbci	r25, 0xFE	; 254
    66a2:	cf 57       	subi	r28, 0x7F	; 127
    66a4:	dd 4f       	sbci	r29, 0xFD	; 253
    66a6:	99 83       	std	Y+1, r25	; 0x01
    66a8:	88 83       	st	Y, r24
    66aa:	c1 58       	subi	r28, 0x81	; 129
    66ac:	d2 40       	sbci	r29, 0x02	; 2
    66ae:	8d e3       	ldi	r24, 0x3D	; 61
    66b0:	92 e0       	ldi	r25, 0x02	; 2
    66b2:	cd 57       	subi	r28, 0x7D	; 125
    66b4:	dd 4f       	sbci	r29, 0xFD	; 253
    66b6:	99 83       	std	Y+1, r25	; 0x01
    66b8:	88 83       	st	Y, r24
    66ba:	c3 58       	subi	r28, 0x83	; 131
    66bc:	d2 40       	sbci	r29, 0x02	; 2
    66be:	98 e0       	ldi	r25, 0x08	; 8
    66c0:	cb 57       	subi	r28, 0x7B	; 123
    66c2:	dd 4f       	sbci	r29, 0xFD	; 253
    66c4:	98 83       	st	Y, r25
    66c6:	c5 58       	subi	r28, 0x85	; 133
    66c8:	d2 40       	sbci	r29, 0x02	; 2
    66ca:	cd 57       	subi	r28, 0x7D	; 125
    66cc:	dd 4f       	sbci	r29, 0xFD	; 253
    66ce:	e8 81       	ld	r30, Y
    66d0:	f9 81       	ldd	r31, Y+1	; 0x01
    66d2:	c3 58       	subi	r28, 0x83	; 131
    66d4:	d2 40       	sbci	r29, 0x02	; 2
    66d6:	00 80       	ld	r0, Z
    66d8:	cd 57       	subi	r28, 0x7D	; 125
    66da:	dd 4f       	sbci	r29, 0xFD	; 253
    66dc:	88 81       	ld	r24, Y
    66de:	99 81       	ldd	r25, Y+1	; 0x01
    66e0:	c3 58       	subi	r28, 0x83	; 131
    66e2:	d2 40       	sbci	r29, 0x02	; 2
    66e4:	01 96       	adiw	r24, 0x01	; 1
    66e6:	cd 57       	subi	r28, 0x7D	; 125
    66e8:	dd 4f       	sbci	r29, 0xFD	; 253
    66ea:	99 83       	std	Y+1, r25	; 0x01
    66ec:	88 83       	st	Y, r24
    66ee:	c3 58       	subi	r28, 0x83	; 131
    66f0:	d2 40       	sbci	r29, 0x02	; 2
    66f2:	cf 57       	subi	r28, 0x7F	; 127
    66f4:	dd 4f       	sbci	r29, 0xFD	; 253
    66f6:	e8 81       	ld	r30, Y
    66f8:	f9 81       	ldd	r31, Y+1	; 0x01
    66fa:	c1 58       	subi	r28, 0x81	; 129
    66fc:	d2 40       	sbci	r29, 0x02	; 2
    66fe:	00 82       	st	Z, r0
    6700:	cf 57       	subi	r28, 0x7F	; 127
    6702:	dd 4f       	sbci	r29, 0xFD	; 253
    6704:	88 81       	ld	r24, Y
    6706:	99 81       	ldd	r25, Y+1	; 0x01
    6708:	c1 58       	subi	r28, 0x81	; 129
    670a:	d2 40       	sbci	r29, 0x02	; 2
    670c:	01 96       	adiw	r24, 0x01	; 1
    670e:	cf 57       	subi	r28, 0x7F	; 127
    6710:	dd 4f       	sbci	r29, 0xFD	; 253
    6712:	99 83       	std	Y+1, r25	; 0x01
    6714:	88 83       	st	Y, r24
    6716:	c1 58       	subi	r28, 0x81	; 129
    6718:	d2 40       	sbci	r29, 0x02	; 2
    671a:	cb 57       	subi	r28, 0x7B	; 123
    671c:	dd 4f       	sbci	r29, 0xFD	; 253
    671e:	98 81       	ld	r25, Y
    6720:	c5 58       	subi	r28, 0x85	; 133
    6722:	d2 40       	sbci	r29, 0x02	; 2
    6724:	91 50       	subi	r25, 0x01	; 1
    6726:	cb 57       	subi	r28, 0x7B	; 123
    6728:	dd 4f       	sbci	r29, 0xFD	; 253
    672a:	98 83       	st	Y, r25
    672c:	c5 58       	subi	r28, 0x85	; 133
    672e:	d2 40       	sbci	r29, 0x02	; 2
    6730:	cb 57       	subi	r28, 0x7B	; 123
    6732:	dd 4f       	sbci	r29, 0xFD	; 253
    6734:	e8 81       	ld	r30, Y
    6736:	c5 58       	subi	r28, 0x85	; 133
    6738:	d2 40       	sbci	r29, 0x02	; 2
    673a:	ee 23       	and	r30, r30
    673c:	31 f6       	brne	.-116    	; 0x66ca <main+0xb8>
	LCD_Init(&lcd);
    673e:	ce 01       	movw	r24, r28
    6740:	89 53       	subi	r24, 0x39	; 57
    6742:	9e 4f       	sbci	r25, 0xFE	; 254
    6744:	0e 94 2b 10 	call	0x2056	; 0x2056 <LCD_Init>

	DDRC = 0xf0;
    6748:	e4 e3       	ldi	r30, 0x34	; 52
    674a:	f0 e0       	ldi	r31, 0x00	; 0
    674c:	80 ef       	ldi	r24, 0xF0	; 240
    674e:	80 83       	st	Z, r24


	servo_init();
    6750:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <servo_init>

	ADC_init();
    6754:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ADC_init>

	uint8 in[16] = "Enter password:";
    6758:	ce 01       	movw	r24, r28
    675a:	81 53       	subi	r24, 0x31	; 49
    675c:	9e 4f       	sbci	r25, 0xFE	; 254
    675e:	ca 57       	subi	r28, 0x7A	; 122
    6760:	dd 4f       	sbci	r29, 0xFD	; 253
    6762:	99 83       	std	Y+1, r25	; 0x01
    6764:	88 83       	st	Y, r24
    6766:	c6 58       	subi	r28, 0x86	; 134
    6768:	d2 40       	sbci	r29, 0x02	; 2
    676a:	80 e6       	ldi	r24, 0x60	; 96
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	c8 57       	subi	r28, 0x78	; 120
    6770:	dd 4f       	sbci	r29, 0xFD	; 253
    6772:	99 83       	std	Y+1, r25	; 0x01
    6774:	88 83       	st	Y, r24
    6776:	c8 58       	subi	r28, 0x88	; 136
    6778:	d2 40       	sbci	r29, 0x02	; 2
    677a:	90 e1       	ldi	r25, 0x10	; 16
    677c:	c6 57       	subi	r28, 0x76	; 118
    677e:	dd 4f       	sbci	r29, 0xFD	; 253
    6780:	98 83       	st	Y, r25
    6782:	ca 58       	subi	r28, 0x8A	; 138
    6784:	d2 40       	sbci	r29, 0x02	; 2
    6786:	c8 57       	subi	r28, 0x78	; 120
    6788:	dd 4f       	sbci	r29, 0xFD	; 253
    678a:	e8 81       	ld	r30, Y
    678c:	f9 81       	ldd	r31, Y+1	; 0x01
    678e:	c8 58       	subi	r28, 0x88	; 136
    6790:	d2 40       	sbci	r29, 0x02	; 2
    6792:	00 80       	ld	r0, Z
    6794:	c8 57       	subi	r28, 0x78	; 120
    6796:	dd 4f       	sbci	r29, 0xFD	; 253
    6798:	88 81       	ld	r24, Y
    679a:	99 81       	ldd	r25, Y+1	; 0x01
    679c:	c8 58       	subi	r28, 0x88	; 136
    679e:	d2 40       	sbci	r29, 0x02	; 2
    67a0:	01 96       	adiw	r24, 0x01	; 1
    67a2:	c8 57       	subi	r28, 0x78	; 120
    67a4:	dd 4f       	sbci	r29, 0xFD	; 253
    67a6:	99 83       	std	Y+1, r25	; 0x01
    67a8:	88 83       	st	Y, r24
    67aa:	c8 58       	subi	r28, 0x88	; 136
    67ac:	d2 40       	sbci	r29, 0x02	; 2
    67ae:	ca 57       	subi	r28, 0x7A	; 122
    67b0:	dd 4f       	sbci	r29, 0xFD	; 253
    67b2:	e8 81       	ld	r30, Y
    67b4:	f9 81       	ldd	r31, Y+1	; 0x01
    67b6:	c6 58       	subi	r28, 0x86	; 134
    67b8:	d2 40       	sbci	r29, 0x02	; 2
    67ba:	00 82       	st	Z, r0
    67bc:	ca 57       	subi	r28, 0x7A	; 122
    67be:	dd 4f       	sbci	r29, 0xFD	; 253
    67c0:	88 81       	ld	r24, Y
    67c2:	99 81       	ldd	r25, Y+1	; 0x01
    67c4:	c6 58       	subi	r28, 0x86	; 134
    67c6:	d2 40       	sbci	r29, 0x02	; 2
    67c8:	01 96       	adiw	r24, 0x01	; 1
    67ca:	ca 57       	subi	r28, 0x7A	; 122
    67cc:	dd 4f       	sbci	r29, 0xFD	; 253
    67ce:	99 83       	std	Y+1, r25	; 0x01
    67d0:	88 83       	st	Y, r24
    67d2:	c6 58       	subi	r28, 0x86	; 134
    67d4:	d2 40       	sbci	r29, 0x02	; 2
    67d6:	c6 57       	subi	r28, 0x76	; 118
    67d8:	dd 4f       	sbci	r29, 0xFD	; 253
    67da:	98 81       	ld	r25, Y
    67dc:	ca 58       	subi	r28, 0x8A	; 138
    67de:	d2 40       	sbci	r29, 0x02	; 2
    67e0:	91 50       	subi	r25, 0x01	; 1
    67e2:	c6 57       	subi	r28, 0x76	; 118
    67e4:	dd 4f       	sbci	r29, 0xFD	; 253
    67e6:	98 83       	st	Y, r25
    67e8:	ca 58       	subi	r28, 0x8A	; 138
    67ea:	d2 40       	sbci	r29, 0x02	; 2
    67ec:	c6 57       	subi	r28, 0x76	; 118
    67ee:	dd 4f       	sbci	r29, 0xFD	; 253
    67f0:	e8 81       	ld	r30, Y
    67f2:	ca 58       	subi	r28, 0x8A	; 138
    67f4:	d2 40       	sbci	r29, 0x02	; 2
    67f6:	ee 23       	and	r30, r30
    67f8:	31 f6       	brne	.-116    	; 0x6786 <main+0x174>
	uint8 con[11] = "Confirmed.";
    67fa:	ce 01       	movw	r24, r28
    67fc:	81 52       	subi	r24, 0x21	; 33
    67fe:	9e 4f       	sbci	r25, 0xFE	; 254
    6800:	c5 57       	subi	r28, 0x75	; 117
    6802:	dd 4f       	sbci	r29, 0xFD	; 253
    6804:	99 83       	std	Y+1, r25	; 0x01
    6806:	88 83       	st	Y, r24
    6808:	cb 58       	subi	r28, 0x8B	; 139
    680a:	d2 40       	sbci	r29, 0x02	; 2
    680c:	80 e7       	ldi	r24, 0x70	; 112
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	c3 57       	subi	r28, 0x73	; 115
    6812:	dd 4f       	sbci	r29, 0xFD	; 253
    6814:	99 83       	std	Y+1, r25	; 0x01
    6816:	88 83       	st	Y, r24
    6818:	cd 58       	subi	r28, 0x8D	; 141
    681a:	d2 40       	sbci	r29, 0x02	; 2
    681c:	9b e0       	ldi	r25, 0x0B	; 11
    681e:	c1 57       	subi	r28, 0x71	; 113
    6820:	dd 4f       	sbci	r29, 0xFD	; 253
    6822:	98 83       	st	Y, r25
    6824:	cf 58       	subi	r28, 0x8F	; 143
    6826:	d2 40       	sbci	r29, 0x02	; 2
    6828:	c3 57       	subi	r28, 0x73	; 115
    682a:	dd 4f       	sbci	r29, 0xFD	; 253
    682c:	e8 81       	ld	r30, Y
    682e:	f9 81       	ldd	r31, Y+1	; 0x01
    6830:	cd 58       	subi	r28, 0x8D	; 141
    6832:	d2 40       	sbci	r29, 0x02	; 2
    6834:	00 80       	ld	r0, Z
    6836:	c3 57       	subi	r28, 0x73	; 115
    6838:	dd 4f       	sbci	r29, 0xFD	; 253
    683a:	88 81       	ld	r24, Y
    683c:	99 81       	ldd	r25, Y+1	; 0x01
    683e:	cd 58       	subi	r28, 0x8D	; 141
    6840:	d2 40       	sbci	r29, 0x02	; 2
    6842:	01 96       	adiw	r24, 0x01	; 1
    6844:	c3 57       	subi	r28, 0x73	; 115
    6846:	dd 4f       	sbci	r29, 0xFD	; 253
    6848:	99 83       	std	Y+1, r25	; 0x01
    684a:	88 83       	st	Y, r24
    684c:	cd 58       	subi	r28, 0x8D	; 141
    684e:	d2 40       	sbci	r29, 0x02	; 2
    6850:	c5 57       	subi	r28, 0x75	; 117
    6852:	dd 4f       	sbci	r29, 0xFD	; 253
    6854:	e8 81       	ld	r30, Y
    6856:	f9 81       	ldd	r31, Y+1	; 0x01
    6858:	cb 58       	subi	r28, 0x8B	; 139
    685a:	d2 40       	sbci	r29, 0x02	; 2
    685c:	00 82       	st	Z, r0
    685e:	c5 57       	subi	r28, 0x75	; 117
    6860:	dd 4f       	sbci	r29, 0xFD	; 253
    6862:	88 81       	ld	r24, Y
    6864:	99 81       	ldd	r25, Y+1	; 0x01
    6866:	cb 58       	subi	r28, 0x8B	; 139
    6868:	d2 40       	sbci	r29, 0x02	; 2
    686a:	01 96       	adiw	r24, 0x01	; 1
    686c:	c5 57       	subi	r28, 0x75	; 117
    686e:	dd 4f       	sbci	r29, 0xFD	; 253
    6870:	99 83       	std	Y+1, r25	; 0x01
    6872:	88 83       	st	Y, r24
    6874:	cb 58       	subi	r28, 0x8B	; 139
    6876:	d2 40       	sbci	r29, 0x02	; 2
    6878:	c1 57       	subi	r28, 0x71	; 113
    687a:	dd 4f       	sbci	r29, 0xFD	; 253
    687c:	98 81       	ld	r25, Y
    687e:	cf 58       	subi	r28, 0x8F	; 143
    6880:	d2 40       	sbci	r29, 0x02	; 2
    6882:	91 50       	subi	r25, 0x01	; 1
    6884:	c1 57       	subi	r28, 0x71	; 113
    6886:	dd 4f       	sbci	r29, 0xFD	; 253
    6888:	98 83       	st	Y, r25
    688a:	cf 58       	subi	r28, 0x8F	; 143
    688c:	d2 40       	sbci	r29, 0x02	; 2
    688e:	c1 57       	subi	r28, 0x71	; 113
    6890:	dd 4f       	sbci	r29, 0xFD	; 253
    6892:	e8 81       	ld	r30, Y
    6894:	cf 58       	subi	r28, 0x8F	; 143
    6896:	d2 40       	sbci	r29, 0x02	; 2
    6898:	ee 23       	and	r30, r30
    689a:	31 f6       	brne	.-116    	; 0x6828 <main+0x216>
	uint8 wor[16] = "Wrong password.";
    689c:	ce 01       	movw	r24, r28
    689e:	86 51       	subi	r24, 0x16	; 22
    68a0:	9e 4f       	sbci	r25, 0xFE	; 254
    68a2:	c0 57       	subi	r28, 0x70	; 112
    68a4:	dd 4f       	sbci	r29, 0xFD	; 253
    68a6:	99 83       	std	Y+1, r25	; 0x01
    68a8:	88 83       	st	Y, r24
    68aa:	c0 59       	subi	r28, 0x90	; 144
    68ac:	d2 40       	sbci	r29, 0x02	; 2
    68ae:	8b e7       	ldi	r24, 0x7B	; 123
    68b0:	90 e0       	ldi	r25, 0x00	; 0
    68b2:	ce 56       	subi	r28, 0x6E	; 110
    68b4:	dd 4f       	sbci	r29, 0xFD	; 253
    68b6:	99 83       	std	Y+1, r25	; 0x01
    68b8:	88 83       	st	Y, r24
    68ba:	c2 59       	subi	r28, 0x92	; 146
    68bc:	d2 40       	sbci	r29, 0x02	; 2
    68be:	90 e1       	ldi	r25, 0x10	; 16
    68c0:	cc 56       	subi	r28, 0x6C	; 108
    68c2:	dd 4f       	sbci	r29, 0xFD	; 253
    68c4:	98 83       	st	Y, r25
    68c6:	c4 59       	subi	r28, 0x94	; 148
    68c8:	d2 40       	sbci	r29, 0x02	; 2
    68ca:	ce 56       	subi	r28, 0x6E	; 110
    68cc:	dd 4f       	sbci	r29, 0xFD	; 253
    68ce:	e8 81       	ld	r30, Y
    68d0:	f9 81       	ldd	r31, Y+1	; 0x01
    68d2:	c2 59       	subi	r28, 0x92	; 146
    68d4:	d2 40       	sbci	r29, 0x02	; 2
    68d6:	00 80       	ld	r0, Z
    68d8:	ce 56       	subi	r28, 0x6E	; 110
    68da:	dd 4f       	sbci	r29, 0xFD	; 253
    68dc:	88 81       	ld	r24, Y
    68de:	99 81       	ldd	r25, Y+1	; 0x01
    68e0:	c2 59       	subi	r28, 0x92	; 146
    68e2:	d2 40       	sbci	r29, 0x02	; 2
    68e4:	01 96       	adiw	r24, 0x01	; 1
    68e6:	ce 56       	subi	r28, 0x6E	; 110
    68e8:	dd 4f       	sbci	r29, 0xFD	; 253
    68ea:	99 83       	std	Y+1, r25	; 0x01
    68ec:	88 83       	st	Y, r24
    68ee:	c2 59       	subi	r28, 0x92	; 146
    68f0:	d2 40       	sbci	r29, 0x02	; 2
    68f2:	c0 57       	subi	r28, 0x70	; 112
    68f4:	dd 4f       	sbci	r29, 0xFD	; 253
    68f6:	e8 81       	ld	r30, Y
    68f8:	f9 81       	ldd	r31, Y+1	; 0x01
    68fa:	c0 59       	subi	r28, 0x90	; 144
    68fc:	d2 40       	sbci	r29, 0x02	; 2
    68fe:	00 82       	st	Z, r0
    6900:	c0 57       	subi	r28, 0x70	; 112
    6902:	dd 4f       	sbci	r29, 0xFD	; 253
    6904:	88 81       	ld	r24, Y
    6906:	99 81       	ldd	r25, Y+1	; 0x01
    6908:	c0 59       	subi	r28, 0x90	; 144
    690a:	d2 40       	sbci	r29, 0x02	; 2
    690c:	01 96       	adiw	r24, 0x01	; 1
    690e:	c0 57       	subi	r28, 0x70	; 112
    6910:	dd 4f       	sbci	r29, 0xFD	; 253
    6912:	99 83       	std	Y+1, r25	; 0x01
    6914:	88 83       	st	Y, r24
    6916:	c0 59       	subi	r28, 0x90	; 144
    6918:	d2 40       	sbci	r29, 0x02	; 2
    691a:	cc 56       	subi	r28, 0x6C	; 108
    691c:	dd 4f       	sbci	r29, 0xFD	; 253
    691e:	98 81       	ld	r25, Y
    6920:	c4 59       	subi	r28, 0x94	; 148
    6922:	d2 40       	sbci	r29, 0x02	; 2
    6924:	91 50       	subi	r25, 0x01	; 1
    6926:	cc 56       	subi	r28, 0x6C	; 108
    6928:	dd 4f       	sbci	r29, 0xFD	; 253
    692a:	98 83       	st	Y, r25
    692c:	c4 59       	subi	r28, 0x94	; 148
    692e:	d2 40       	sbci	r29, 0x02	; 2
    6930:	cc 56       	subi	r28, 0x6C	; 108
    6932:	dd 4f       	sbci	r29, 0xFD	; 253
    6934:	e8 81       	ld	r30, Y
    6936:	c4 59       	subi	r28, 0x94	; 148
    6938:	d2 40       	sbci	r29, 0x02	; 2
    693a:	ee 23       	and	r30, r30
    693c:	31 f6       	brne	.-116    	; 0x68ca <main+0x2b8>
	uint8 stl[16] = " Attempts left.";
    693e:	ce 01       	movw	r24, r28
    6940:	86 50       	subi	r24, 0x06	; 6
    6942:	9e 4f       	sbci	r25, 0xFE	; 254
    6944:	cb 56       	subi	r28, 0x6B	; 107
    6946:	dd 4f       	sbci	r29, 0xFD	; 253
    6948:	99 83       	std	Y+1, r25	; 0x01
    694a:	88 83       	st	Y, r24
    694c:	c5 59       	subi	r28, 0x95	; 149
    694e:	d2 40       	sbci	r29, 0x02	; 2
    6950:	8b e8       	ldi	r24, 0x8B	; 139
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	c9 56       	subi	r28, 0x69	; 105
    6956:	dd 4f       	sbci	r29, 0xFD	; 253
    6958:	99 83       	std	Y+1, r25	; 0x01
    695a:	88 83       	st	Y, r24
    695c:	c7 59       	subi	r28, 0x97	; 151
    695e:	d2 40       	sbci	r29, 0x02	; 2
    6960:	90 e1       	ldi	r25, 0x10	; 16
    6962:	c7 56       	subi	r28, 0x67	; 103
    6964:	dd 4f       	sbci	r29, 0xFD	; 253
    6966:	98 83       	st	Y, r25
    6968:	c9 59       	subi	r28, 0x99	; 153
    696a:	d2 40       	sbci	r29, 0x02	; 2
    696c:	c9 56       	subi	r28, 0x69	; 105
    696e:	dd 4f       	sbci	r29, 0xFD	; 253
    6970:	e8 81       	ld	r30, Y
    6972:	f9 81       	ldd	r31, Y+1	; 0x01
    6974:	c7 59       	subi	r28, 0x97	; 151
    6976:	d2 40       	sbci	r29, 0x02	; 2
    6978:	00 80       	ld	r0, Z
    697a:	c9 56       	subi	r28, 0x69	; 105
    697c:	dd 4f       	sbci	r29, 0xFD	; 253
    697e:	88 81       	ld	r24, Y
    6980:	99 81       	ldd	r25, Y+1	; 0x01
    6982:	c7 59       	subi	r28, 0x97	; 151
    6984:	d2 40       	sbci	r29, 0x02	; 2
    6986:	01 96       	adiw	r24, 0x01	; 1
    6988:	c9 56       	subi	r28, 0x69	; 105
    698a:	dd 4f       	sbci	r29, 0xFD	; 253
    698c:	99 83       	std	Y+1, r25	; 0x01
    698e:	88 83       	st	Y, r24
    6990:	c7 59       	subi	r28, 0x97	; 151
    6992:	d2 40       	sbci	r29, 0x02	; 2
    6994:	cb 56       	subi	r28, 0x6B	; 107
    6996:	dd 4f       	sbci	r29, 0xFD	; 253
    6998:	e8 81       	ld	r30, Y
    699a:	f9 81       	ldd	r31, Y+1	; 0x01
    699c:	c5 59       	subi	r28, 0x95	; 149
    699e:	d2 40       	sbci	r29, 0x02	; 2
    69a0:	00 82       	st	Z, r0
    69a2:	cb 56       	subi	r28, 0x6B	; 107
    69a4:	dd 4f       	sbci	r29, 0xFD	; 253
    69a6:	88 81       	ld	r24, Y
    69a8:	99 81       	ldd	r25, Y+1	; 0x01
    69aa:	c5 59       	subi	r28, 0x95	; 149
    69ac:	d2 40       	sbci	r29, 0x02	; 2
    69ae:	01 96       	adiw	r24, 0x01	; 1
    69b0:	cb 56       	subi	r28, 0x6B	; 107
    69b2:	dd 4f       	sbci	r29, 0xFD	; 253
    69b4:	99 83       	std	Y+1, r25	; 0x01
    69b6:	88 83       	st	Y, r24
    69b8:	c5 59       	subi	r28, 0x95	; 149
    69ba:	d2 40       	sbci	r29, 0x02	; 2
    69bc:	c7 56       	subi	r28, 0x67	; 103
    69be:	dd 4f       	sbci	r29, 0xFD	; 253
    69c0:	98 81       	ld	r25, Y
    69c2:	c9 59       	subi	r28, 0x99	; 153
    69c4:	d2 40       	sbci	r29, 0x02	; 2
    69c6:	91 50       	subi	r25, 0x01	; 1
    69c8:	c7 56       	subi	r28, 0x67	; 103
    69ca:	dd 4f       	sbci	r29, 0xFD	; 253
    69cc:	98 83       	st	Y, r25
    69ce:	c9 59       	subi	r28, 0x99	; 153
    69d0:	d2 40       	sbci	r29, 0x02	; 2
    69d2:	c7 56       	subi	r28, 0x67	; 103
    69d4:	dd 4f       	sbci	r29, 0xFD	; 253
    69d6:	e8 81       	ld	r30, Y
    69d8:	c9 59       	subi	r28, 0x99	; 153
    69da:	d2 40       	sbci	r29, 0x02	; 2
    69dc:	ee 23       	and	r30, r30
    69de:	31 f6       	brne	.-116    	; 0x696c <main+0x35a>
	uint8 fir[11] = "Enter new ";
    69e0:	ce 01       	movw	r24, r28
    69e2:	86 5f       	subi	r24, 0xF6	; 246
    69e4:	9d 4f       	sbci	r25, 0xFD	; 253
    69e6:	c6 56       	subi	r28, 0x66	; 102
    69e8:	dd 4f       	sbci	r29, 0xFD	; 253
    69ea:	99 83       	std	Y+1, r25	; 0x01
    69ec:	88 83       	st	Y, r24
    69ee:	ca 59       	subi	r28, 0x9A	; 154
    69f0:	d2 40       	sbci	r29, 0x02	; 2
    69f2:	8b e9       	ldi	r24, 0x9B	; 155
    69f4:	90 e0       	ldi	r25, 0x00	; 0
    69f6:	c4 56       	subi	r28, 0x64	; 100
    69f8:	dd 4f       	sbci	r29, 0xFD	; 253
    69fa:	99 83       	std	Y+1, r25	; 0x01
    69fc:	88 83       	st	Y, r24
    69fe:	cc 59       	subi	r28, 0x9C	; 156
    6a00:	d2 40       	sbci	r29, 0x02	; 2
    6a02:	9b e0       	ldi	r25, 0x0B	; 11
    6a04:	c2 56       	subi	r28, 0x62	; 98
    6a06:	dd 4f       	sbci	r29, 0xFD	; 253
    6a08:	98 83       	st	Y, r25
    6a0a:	ce 59       	subi	r28, 0x9E	; 158
    6a0c:	d2 40       	sbci	r29, 0x02	; 2
    6a0e:	c4 56       	subi	r28, 0x64	; 100
    6a10:	dd 4f       	sbci	r29, 0xFD	; 253
    6a12:	e8 81       	ld	r30, Y
    6a14:	f9 81       	ldd	r31, Y+1	; 0x01
    6a16:	cc 59       	subi	r28, 0x9C	; 156
    6a18:	d2 40       	sbci	r29, 0x02	; 2
    6a1a:	00 80       	ld	r0, Z
    6a1c:	c4 56       	subi	r28, 0x64	; 100
    6a1e:	dd 4f       	sbci	r29, 0xFD	; 253
    6a20:	88 81       	ld	r24, Y
    6a22:	99 81       	ldd	r25, Y+1	; 0x01
    6a24:	cc 59       	subi	r28, 0x9C	; 156
    6a26:	d2 40       	sbci	r29, 0x02	; 2
    6a28:	01 96       	adiw	r24, 0x01	; 1
    6a2a:	c4 56       	subi	r28, 0x64	; 100
    6a2c:	dd 4f       	sbci	r29, 0xFD	; 253
    6a2e:	99 83       	std	Y+1, r25	; 0x01
    6a30:	88 83       	st	Y, r24
    6a32:	cc 59       	subi	r28, 0x9C	; 156
    6a34:	d2 40       	sbci	r29, 0x02	; 2
    6a36:	c6 56       	subi	r28, 0x66	; 102
    6a38:	dd 4f       	sbci	r29, 0xFD	; 253
    6a3a:	e8 81       	ld	r30, Y
    6a3c:	f9 81       	ldd	r31, Y+1	; 0x01
    6a3e:	ca 59       	subi	r28, 0x9A	; 154
    6a40:	d2 40       	sbci	r29, 0x02	; 2
    6a42:	00 82       	st	Z, r0
    6a44:	c6 56       	subi	r28, 0x66	; 102
    6a46:	dd 4f       	sbci	r29, 0xFD	; 253
    6a48:	88 81       	ld	r24, Y
    6a4a:	99 81       	ldd	r25, Y+1	; 0x01
    6a4c:	ca 59       	subi	r28, 0x9A	; 154
    6a4e:	d2 40       	sbci	r29, 0x02	; 2
    6a50:	01 96       	adiw	r24, 0x01	; 1
    6a52:	c6 56       	subi	r28, 0x66	; 102
    6a54:	dd 4f       	sbci	r29, 0xFD	; 253
    6a56:	99 83       	std	Y+1, r25	; 0x01
    6a58:	88 83       	st	Y, r24
    6a5a:	ca 59       	subi	r28, 0x9A	; 154
    6a5c:	d2 40       	sbci	r29, 0x02	; 2
    6a5e:	c2 56       	subi	r28, 0x62	; 98
    6a60:	dd 4f       	sbci	r29, 0xFD	; 253
    6a62:	98 81       	ld	r25, Y
    6a64:	ce 59       	subi	r28, 0x9E	; 158
    6a66:	d2 40       	sbci	r29, 0x02	; 2
    6a68:	91 50       	subi	r25, 0x01	; 1
    6a6a:	c2 56       	subi	r28, 0x62	; 98
    6a6c:	dd 4f       	sbci	r29, 0xFD	; 253
    6a6e:	98 83       	st	Y, r25
    6a70:	ce 59       	subi	r28, 0x9E	; 158
    6a72:	d2 40       	sbci	r29, 0x02	; 2
    6a74:	c2 56       	subi	r28, 0x62	; 98
    6a76:	dd 4f       	sbci	r29, 0xFD	; 253
    6a78:	e8 81       	ld	r30, Y
    6a7a:	ce 59       	subi	r28, 0x9E	; 158
    6a7c:	d2 40       	sbci	r29, 0x02	; 2
    6a7e:	ee 23       	and	r30, r30
    6a80:	31 f6       	brne	.-116    	; 0x6a0e <main+0x3fc>
	uint8 sec[16] = "Please, Confirm";
    6a82:	ce 01       	movw	r24, r28
    6a84:	8b 5e       	subi	r24, 0xEB	; 235
    6a86:	9d 4f       	sbci	r25, 0xFD	; 253
    6a88:	c1 56       	subi	r28, 0x61	; 97
    6a8a:	dd 4f       	sbci	r29, 0xFD	; 253
    6a8c:	99 83       	std	Y+1, r25	; 0x01
    6a8e:	88 83       	st	Y, r24
    6a90:	cf 59       	subi	r28, 0x9F	; 159
    6a92:	d2 40       	sbci	r29, 0x02	; 2
    6a94:	86 ea       	ldi	r24, 0xA6	; 166
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	cf 55       	subi	r28, 0x5F	; 95
    6a9a:	dd 4f       	sbci	r29, 0xFD	; 253
    6a9c:	99 83       	std	Y+1, r25	; 0x01
    6a9e:	88 83       	st	Y, r24
    6aa0:	c1 5a       	subi	r28, 0xA1	; 161
    6aa2:	d2 40       	sbci	r29, 0x02	; 2
    6aa4:	90 e1       	ldi	r25, 0x10	; 16
    6aa6:	cd 55       	subi	r28, 0x5D	; 93
    6aa8:	dd 4f       	sbci	r29, 0xFD	; 253
    6aaa:	98 83       	st	Y, r25
    6aac:	c3 5a       	subi	r28, 0xA3	; 163
    6aae:	d2 40       	sbci	r29, 0x02	; 2
    6ab0:	cf 55       	subi	r28, 0x5F	; 95
    6ab2:	dd 4f       	sbci	r29, 0xFD	; 253
    6ab4:	e8 81       	ld	r30, Y
    6ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    6ab8:	c1 5a       	subi	r28, 0xA1	; 161
    6aba:	d2 40       	sbci	r29, 0x02	; 2
    6abc:	00 80       	ld	r0, Z
    6abe:	cf 55       	subi	r28, 0x5F	; 95
    6ac0:	dd 4f       	sbci	r29, 0xFD	; 253
    6ac2:	88 81       	ld	r24, Y
    6ac4:	99 81       	ldd	r25, Y+1	; 0x01
    6ac6:	c1 5a       	subi	r28, 0xA1	; 161
    6ac8:	d2 40       	sbci	r29, 0x02	; 2
    6aca:	01 96       	adiw	r24, 0x01	; 1
    6acc:	cf 55       	subi	r28, 0x5F	; 95
    6ace:	dd 4f       	sbci	r29, 0xFD	; 253
    6ad0:	99 83       	std	Y+1, r25	; 0x01
    6ad2:	88 83       	st	Y, r24
    6ad4:	c1 5a       	subi	r28, 0xA1	; 161
    6ad6:	d2 40       	sbci	r29, 0x02	; 2
    6ad8:	c1 56       	subi	r28, 0x61	; 97
    6ada:	dd 4f       	sbci	r29, 0xFD	; 253
    6adc:	e8 81       	ld	r30, Y
    6ade:	f9 81       	ldd	r31, Y+1	; 0x01
    6ae0:	cf 59       	subi	r28, 0x9F	; 159
    6ae2:	d2 40       	sbci	r29, 0x02	; 2
    6ae4:	00 82       	st	Z, r0
    6ae6:	c1 56       	subi	r28, 0x61	; 97
    6ae8:	dd 4f       	sbci	r29, 0xFD	; 253
    6aea:	88 81       	ld	r24, Y
    6aec:	99 81       	ldd	r25, Y+1	; 0x01
    6aee:	cf 59       	subi	r28, 0x9F	; 159
    6af0:	d2 40       	sbci	r29, 0x02	; 2
    6af2:	01 96       	adiw	r24, 0x01	; 1
    6af4:	c1 56       	subi	r28, 0x61	; 97
    6af6:	dd 4f       	sbci	r29, 0xFD	; 253
    6af8:	99 83       	std	Y+1, r25	; 0x01
    6afa:	88 83       	st	Y, r24
    6afc:	cf 59       	subi	r28, 0x9F	; 159
    6afe:	d2 40       	sbci	r29, 0x02	; 2
    6b00:	cd 55       	subi	r28, 0x5D	; 93
    6b02:	dd 4f       	sbci	r29, 0xFD	; 253
    6b04:	98 81       	ld	r25, Y
    6b06:	c3 5a       	subi	r28, 0xA3	; 163
    6b08:	d2 40       	sbci	r29, 0x02	; 2
    6b0a:	91 50       	subi	r25, 0x01	; 1
    6b0c:	cd 55       	subi	r28, 0x5D	; 93
    6b0e:	dd 4f       	sbci	r29, 0xFD	; 253
    6b10:	98 83       	st	Y, r25
    6b12:	c3 5a       	subi	r28, 0xA3	; 163
    6b14:	d2 40       	sbci	r29, 0x02	; 2
    6b16:	cd 55       	subi	r28, 0x5D	; 93
    6b18:	dd 4f       	sbci	r29, 0xFD	; 253
    6b1a:	e8 81       	ld	r30, Y
    6b1c:	c3 5a       	subi	r28, 0xA3	; 163
    6b1e:	d2 40       	sbci	r29, 0x02	; 2
    6b20:	ee 23       	and	r30, r30
    6b22:	31 f6       	brne	.-116    	; 0x6ab0 <main+0x49e>
	uint8 it[4] = "it.";
    6b24:	fe 01       	movw	r30, r28
    6b26:	eb 5d       	subi	r30, 0xDB	; 219
    6b28:	fd 4f       	sbci	r31, 0xFD	; 253
    6b2a:	80 91 b6 00 	lds	r24, 0x00B6
    6b2e:	90 91 b7 00 	lds	r25, 0x00B7
    6b32:	a0 91 b8 00 	lds	r26, 0x00B8
    6b36:	b0 91 b9 00 	lds	r27, 0x00B9
    6b3a:	80 83       	st	Z, r24
    6b3c:	91 83       	std	Z+1, r25	; 0x01
    6b3e:	a2 83       	std	Z+2, r26	; 0x02
    6b40:	b3 83       	std	Z+3, r27	; 0x03
	uint8 is[4] = "is ";
    6b42:	fe 01       	movw	r30, r28
    6b44:	e7 5d       	subi	r30, 0xD7	; 215
    6b46:	fd 4f       	sbci	r31, 0xFD	; 253
    6b48:	80 91 ba 00 	lds	r24, 0x00BA
    6b4c:	90 91 bb 00 	lds	r25, 0x00BB
    6b50:	a0 91 bc 00 	lds	r26, 0x00BC
    6b54:	b0 91 bd 00 	lds	r27, 0x00BD
    6b58:	80 83       	st	Z, r24
    6b5a:	91 83       	std	Z+1, r25	; 0x01
    6b5c:	a2 83       	std	Z+2, r26	; 0x02
    6b5e:	b3 83       	std	Z+3, r27	; 0x03
	uint8 thir[11] = "Unmatched.";
    6b60:	ce 01       	movw	r24, r28
    6b62:	83 5d       	subi	r24, 0xD3	; 211
    6b64:	9d 4f       	sbci	r25, 0xFD	; 253
    6b66:	cc 55       	subi	r28, 0x5C	; 92
    6b68:	dd 4f       	sbci	r29, 0xFD	; 253
    6b6a:	99 83       	std	Y+1, r25	; 0x01
    6b6c:	88 83       	st	Y, r24
    6b6e:	c4 5a       	subi	r28, 0xA4	; 164
    6b70:	d2 40       	sbci	r29, 0x02	; 2
    6b72:	8e eb       	ldi	r24, 0xBE	; 190
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	ca 55       	subi	r28, 0x5A	; 90
    6b78:	dd 4f       	sbci	r29, 0xFD	; 253
    6b7a:	99 83       	std	Y+1, r25	; 0x01
    6b7c:	88 83       	st	Y, r24
    6b7e:	c6 5a       	subi	r28, 0xA6	; 166
    6b80:	d2 40       	sbci	r29, 0x02	; 2
    6b82:	9b e0       	ldi	r25, 0x0B	; 11
    6b84:	c8 55       	subi	r28, 0x58	; 88
    6b86:	dd 4f       	sbci	r29, 0xFD	; 253
    6b88:	98 83       	st	Y, r25
    6b8a:	c8 5a       	subi	r28, 0xA8	; 168
    6b8c:	d2 40       	sbci	r29, 0x02	; 2
    6b8e:	ca 55       	subi	r28, 0x5A	; 90
    6b90:	dd 4f       	sbci	r29, 0xFD	; 253
    6b92:	e8 81       	ld	r30, Y
    6b94:	f9 81       	ldd	r31, Y+1	; 0x01
    6b96:	c6 5a       	subi	r28, 0xA6	; 166
    6b98:	d2 40       	sbci	r29, 0x02	; 2
    6b9a:	00 80       	ld	r0, Z
    6b9c:	ca 55       	subi	r28, 0x5A	; 90
    6b9e:	dd 4f       	sbci	r29, 0xFD	; 253
    6ba0:	88 81       	ld	r24, Y
    6ba2:	99 81       	ldd	r25, Y+1	; 0x01
    6ba4:	c6 5a       	subi	r28, 0xA6	; 166
    6ba6:	d2 40       	sbci	r29, 0x02	; 2
    6ba8:	01 96       	adiw	r24, 0x01	; 1
    6baa:	ca 55       	subi	r28, 0x5A	; 90
    6bac:	dd 4f       	sbci	r29, 0xFD	; 253
    6bae:	99 83       	std	Y+1, r25	; 0x01
    6bb0:	88 83       	st	Y, r24
    6bb2:	c6 5a       	subi	r28, 0xA6	; 166
    6bb4:	d2 40       	sbci	r29, 0x02	; 2
    6bb6:	cc 55       	subi	r28, 0x5C	; 92
    6bb8:	dd 4f       	sbci	r29, 0xFD	; 253
    6bba:	e8 81       	ld	r30, Y
    6bbc:	f9 81       	ldd	r31, Y+1	; 0x01
    6bbe:	c4 5a       	subi	r28, 0xA4	; 164
    6bc0:	d2 40       	sbci	r29, 0x02	; 2
    6bc2:	00 82       	st	Z, r0
    6bc4:	cc 55       	subi	r28, 0x5C	; 92
    6bc6:	dd 4f       	sbci	r29, 0xFD	; 253
    6bc8:	88 81       	ld	r24, Y
    6bca:	99 81       	ldd	r25, Y+1	; 0x01
    6bcc:	c4 5a       	subi	r28, 0xA4	; 164
    6bce:	d2 40       	sbci	r29, 0x02	; 2
    6bd0:	01 96       	adiw	r24, 0x01	; 1
    6bd2:	cc 55       	subi	r28, 0x5C	; 92
    6bd4:	dd 4f       	sbci	r29, 0xFD	; 253
    6bd6:	99 83       	std	Y+1, r25	; 0x01
    6bd8:	88 83       	st	Y, r24
    6bda:	c4 5a       	subi	r28, 0xA4	; 164
    6bdc:	d2 40       	sbci	r29, 0x02	; 2
    6bde:	c8 55       	subi	r28, 0x58	; 88
    6be0:	dd 4f       	sbci	r29, 0xFD	; 253
    6be2:	98 81       	ld	r25, Y
    6be4:	c8 5a       	subi	r28, 0xA8	; 168
    6be6:	d2 40       	sbci	r29, 0x02	; 2
    6be8:	91 50       	subi	r25, 0x01	; 1
    6bea:	c8 55       	subi	r28, 0x58	; 88
    6bec:	dd 4f       	sbci	r29, 0xFD	; 253
    6bee:	98 83       	st	Y, r25
    6bf0:	c8 5a       	subi	r28, 0xA8	; 168
    6bf2:	d2 40       	sbci	r29, 0x02	; 2
    6bf4:	c8 55       	subi	r28, 0x58	; 88
    6bf6:	dd 4f       	sbci	r29, 0xFD	; 253
    6bf8:	e8 81       	ld	r30, Y
    6bfa:	c8 5a       	subi	r28, 0xA8	; 168
    6bfc:	d2 40       	sbci	r29, 0x02	; 2
    6bfe:	ee 23       	and	r30, r30
    6c00:	31 f6       	brne	.-116    	; 0x6b8e <main+0x57c>
	uint8 th[16] = "Theft attempted.";
    6c02:	ce 01       	movw	r24, r28
    6c04:	88 5c       	subi	r24, 0xC8	; 200
    6c06:	9d 4f       	sbci	r25, 0xFD	; 253
    6c08:	c7 55       	subi	r28, 0x57	; 87
    6c0a:	dd 4f       	sbci	r29, 0xFD	; 253
    6c0c:	99 83       	std	Y+1, r25	; 0x01
    6c0e:	88 83       	st	Y, r24
    6c10:	c9 5a       	subi	r28, 0xA9	; 169
    6c12:	d2 40       	sbci	r29, 0x02	; 2
    6c14:	89 ec       	ldi	r24, 0xC9	; 201
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	c5 55       	subi	r28, 0x55	; 85
    6c1a:	dd 4f       	sbci	r29, 0xFD	; 253
    6c1c:	99 83       	std	Y+1, r25	; 0x01
    6c1e:	88 83       	st	Y, r24
    6c20:	cb 5a       	subi	r28, 0xAB	; 171
    6c22:	d2 40       	sbci	r29, 0x02	; 2
    6c24:	90 e1       	ldi	r25, 0x10	; 16
    6c26:	c3 55       	subi	r28, 0x53	; 83
    6c28:	dd 4f       	sbci	r29, 0xFD	; 253
    6c2a:	98 83       	st	Y, r25
    6c2c:	cd 5a       	subi	r28, 0xAD	; 173
    6c2e:	d2 40       	sbci	r29, 0x02	; 2
    6c30:	c5 55       	subi	r28, 0x55	; 85
    6c32:	dd 4f       	sbci	r29, 0xFD	; 253
    6c34:	e8 81       	ld	r30, Y
    6c36:	f9 81       	ldd	r31, Y+1	; 0x01
    6c38:	cb 5a       	subi	r28, 0xAB	; 171
    6c3a:	d2 40       	sbci	r29, 0x02	; 2
    6c3c:	00 80       	ld	r0, Z
    6c3e:	c5 55       	subi	r28, 0x55	; 85
    6c40:	dd 4f       	sbci	r29, 0xFD	; 253
    6c42:	88 81       	ld	r24, Y
    6c44:	99 81       	ldd	r25, Y+1	; 0x01
    6c46:	cb 5a       	subi	r28, 0xAB	; 171
    6c48:	d2 40       	sbci	r29, 0x02	; 2
    6c4a:	01 96       	adiw	r24, 0x01	; 1
    6c4c:	c5 55       	subi	r28, 0x55	; 85
    6c4e:	dd 4f       	sbci	r29, 0xFD	; 253
    6c50:	99 83       	std	Y+1, r25	; 0x01
    6c52:	88 83       	st	Y, r24
    6c54:	cb 5a       	subi	r28, 0xAB	; 171
    6c56:	d2 40       	sbci	r29, 0x02	; 2
    6c58:	c7 55       	subi	r28, 0x57	; 87
    6c5a:	dd 4f       	sbci	r29, 0xFD	; 253
    6c5c:	e8 81       	ld	r30, Y
    6c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    6c60:	c9 5a       	subi	r28, 0xA9	; 169
    6c62:	d2 40       	sbci	r29, 0x02	; 2
    6c64:	00 82       	st	Z, r0
    6c66:	c7 55       	subi	r28, 0x57	; 87
    6c68:	dd 4f       	sbci	r29, 0xFD	; 253
    6c6a:	88 81       	ld	r24, Y
    6c6c:	99 81       	ldd	r25, Y+1	; 0x01
    6c6e:	c9 5a       	subi	r28, 0xA9	; 169
    6c70:	d2 40       	sbci	r29, 0x02	; 2
    6c72:	01 96       	adiw	r24, 0x01	; 1
    6c74:	c7 55       	subi	r28, 0x57	; 87
    6c76:	dd 4f       	sbci	r29, 0xFD	; 253
    6c78:	99 83       	std	Y+1, r25	; 0x01
    6c7a:	88 83       	st	Y, r24
    6c7c:	c9 5a       	subi	r28, 0xA9	; 169
    6c7e:	d2 40       	sbci	r29, 0x02	; 2
    6c80:	c3 55       	subi	r28, 0x53	; 83
    6c82:	dd 4f       	sbci	r29, 0xFD	; 253
    6c84:	98 81       	ld	r25, Y
    6c86:	cd 5a       	subi	r28, 0xAD	; 173
    6c88:	d2 40       	sbci	r29, 0x02	; 2
    6c8a:	91 50       	subi	r25, 0x01	; 1
    6c8c:	c3 55       	subi	r28, 0x53	; 83
    6c8e:	dd 4f       	sbci	r29, 0xFD	; 253
    6c90:	98 83       	st	Y, r25
    6c92:	cd 5a       	subi	r28, 0xAD	; 173
    6c94:	d2 40       	sbci	r29, 0x02	; 2
    6c96:	c3 55       	subi	r28, 0x53	; 83
    6c98:	dd 4f       	sbci	r29, 0xFD	; 253
    6c9a:	e8 81       	ld	r30, Y
    6c9c:	cd 5a       	subi	r28, 0xAD	; 173
    6c9e:	d2 40       	sbci	r29, 0x02	; 2
    6ca0:	ee 23       	and	r30, r30
    6ca2:	31 f6       	brne	.-116    	; 0x6c30 <main+0x61e>
	uint8 tem[16] = "The temperature";
    6ca4:	ce 01       	movw	r24, r28
    6ca6:	88 5b       	subi	r24, 0xB8	; 184
    6ca8:	9d 4f       	sbci	r25, 0xFD	; 253
    6caa:	c2 55       	subi	r28, 0x52	; 82
    6cac:	dd 4f       	sbci	r29, 0xFD	; 253
    6cae:	99 83       	std	Y+1, r25	; 0x01
    6cb0:	88 83       	st	Y, r24
    6cb2:	ce 5a       	subi	r28, 0xAE	; 174
    6cb4:	d2 40       	sbci	r29, 0x02	; 2
    6cb6:	8a ed       	ldi	r24, 0xDA	; 218
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	c0 55       	subi	r28, 0x50	; 80
    6cbc:	dd 4f       	sbci	r29, 0xFD	; 253
    6cbe:	99 83       	std	Y+1, r25	; 0x01
    6cc0:	88 83       	st	Y, r24
    6cc2:	c0 5b       	subi	r28, 0xB0	; 176
    6cc4:	d2 40       	sbci	r29, 0x02	; 2
    6cc6:	90 e1       	ldi	r25, 0x10	; 16
    6cc8:	ce 54       	subi	r28, 0x4E	; 78
    6cca:	dd 4f       	sbci	r29, 0xFD	; 253
    6ccc:	98 83       	st	Y, r25
    6cce:	c2 5b       	subi	r28, 0xB2	; 178
    6cd0:	d2 40       	sbci	r29, 0x02	; 2
    6cd2:	c0 55       	subi	r28, 0x50	; 80
    6cd4:	dd 4f       	sbci	r29, 0xFD	; 253
    6cd6:	e8 81       	ld	r30, Y
    6cd8:	f9 81       	ldd	r31, Y+1	; 0x01
    6cda:	c0 5b       	subi	r28, 0xB0	; 176
    6cdc:	d2 40       	sbci	r29, 0x02	; 2
    6cde:	00 80       	ld	r0, Z
    6ce0:	c0 55       	subi	r28, 0x50	; 80
    6ce2:	dd 4f       	sbci	r29, 0xFD	; 253
    6ce4:	88 81       	ld	r24, Y
    6ce6:	99 81       	ldd	r25, Y+1	; 0x01
    6ce8:	c0 5b       	subi	r28, 0xB0	; 176
    6cea:	d2 40       	sbci	r29, 0x02	; 2
    6cec:	01 96       	adiw	r24, 0x01	; 1
    6cee:	c0 55       	subi	r28, 0x50	; 80
    6cf0:	dd 4f       	sbci	r29, 0xFD	; 253
    6cf2:	99 83       	std	Y+1, r25	; 0x01
    6cf4:	88 83       	st	Y, r24
    6cf6:	c0 5b       	subi	r28, 0xB0	; 176
    6cf8:	d2 40       	sbci	r29, 0x02	; 2
    6cfa:	c2 55       	subi	r28, 0x52	; 82
    6cfc:	dd 4f       	sbci	r29, 0xFD	; 253
    6cfe:	e8 81       	ld	r30, Y
    6d00:	f9 81       	ldd	r31, Y+1	; 0x01
    6d02:	ce 5a       	subi	r28, 0xAE	; 174
    6d04:	d2 40       	sbci	r29, 0x02	; 2
    6d06:	00 82       	st	Z, r0
    6d08:	c2 55       	subi	r28, 0x52	; 82
    6d0a:	dd 4f       	sbci	r29, 0xFD	; 253
    6d0c:	88 81       	ld	r24, Y
    6d0e:	99 81       	ldd	r25, Y+1	; 0x01
    6d10:	ce 5a       	subi	r28, 0xAE	; 174
    6d12:	d2 40       	sbci	r29, 0x02	; 2
    6d14:	01 96       	adiw	r24, 0x01	; 1
    6d16:	c2 55       	subi	r28, 0x52	; 82
    6d18:	dd 4f       	sbci	r29, 0xFD	; 253
    6d1a:	99 83       	std	Y+1, r25	; 0x01
    6d1c:	88 83       	st	Y, r24
    6d1e:	ce 5a       	subi	r28, 0xAE	; 174
    6d20:	d2 40       	sbci	r29, 0x02	; 2
    6d22:	ce 54       	subi	r28, 0x4E	; 78
    6d24:	dd 4f       	sbci	r29, 0xFD	; 253
    6d26:	98 81       	ld	r25, Y
    6d28:	c2 5b       	subi	r28, 0xB2	; 178
    6d2a:	d2 40       	sbci	r29, 0x02	; 2
    6d2c:	91 50       	subi	r25, 0x01	; 1
    6d2e:	ce 54       	subi	r28, 0x4E	; 78
    6d30:	dd 4f       	sbci	r29, 0xFD	; 253
    6d32:	98 83       	st	Y, r25
    6d34:	c2 5b       	subi	r28, 0xB2	; 178
    6d36:	d2 40       	sbci	r29, 0x02	; 2
    6d38:	ce 54       	subi	r28, 0x4E	; 78
    6d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    6d3c:	e8 81       	ld	r30, Y
    6d3e:	c2 5b       	subi	r28, 0xB2	; 178
    6d40:	d2 40       	sbci	r29, 0x02	; 2
    6d42:	ee 23       	and	r30, r30
    6d44:	31 f6       	brne	.-116    	; 0x6cd2 <main+0x6c0>
	uint8 Units[4] = "'C";
    6d46:	fe 01       	movw	r30, r28
    6d48:	e8 5a       	subi	r30, 0xA8	; 168
    6d4a:	fd 4f       	sbci	r31, 0xFD	; 253
    6d4c:	80 91 ea 00 	lds	r24, 0x00EA
    6d50:	90 91 eb 00 	lds	r25, 0x00EB
    6d54:	a0 91 ec 00 	lds	r26, 0x00EC
    6d58:	b0 91 ed 00 	lds	r27, 0x00ED
    6d5c:	80 83       	st	Z, r24
    6d5e:	91 83       	std	Z+1, r25	; 0x01
    6d60:	a2 83       	std	Z+2, r26	; 0x02
    6d62:	b3 83       	std	Z+3, r27	; 0x03
	uint8 wel[11] = "password:";
    6d64:	ce 01       	movw	r24, r28
    6d66:	84 5a       	subi	r24, 0xA4	; 164
    6d68:	9d 4f       	sbci	r25, 0xFD	; 253
    6d6a:	cd 54       	subi	r28, 0x4D	; 77
    6d6c:	dd 4f       	sbci	r29, 0xFD	; 253
    6d6e:	99 83       	std	Y+1, r25	; 0x01
    6d70:	88 83       	st	Y, r24
    6d72:	c3 5b       	subi	r28, 0xB3	; 179
    6d74:	d2 40       	sbci	r29, 0x02	; 2
    6d76:	cd 54       	subi	r28, 0x4D	; 77
    6d78:	dd 4f       	sbci	r29, 0xFD	; 253
    6d7a:	e8 81       	ld	r30, Y
    6d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    6d7e:	c3 5b       	subi	r28, 0xB3	; 179
    6d80:	d2 40       	sbci	r29, 0x02	; 2
    6d82:	cb 54       	subi	r28, 0x4B	; 75
    6d84:	dd 4f       	sbci	r29, 0xFD	; 253
    6d86:	f9 83       	std	Y+1, r31	; 0x01
    6d88:	e8 83       	st	Y, r30
    6d8a:	c5 5b       	subi	r28, 0xB5	; 181
    6d8c:	d2 40       	sbci	r29, 0x02	; 2
    6d8e:	8e ee       	ldi	r24, 0xEE	; 238
    6d90:	90 e0       	ldi	r25, 0x00	; 0
    6d92:	c9 54       	subi	r28, 0x49	; 73
    6d94:	dd 4f       	sbci	r29, 0xFD	; 253
    6d96:	99 83       	std	Y+1, r25	; 0x01
    6d98:	88 83       	st	Y, r24
    6d9a:	c7 5b       	subi	r28, 0xB7	; 183
    6d9c:	d2 40       	sbci	r29, 0x02	; 2
    6d9e:	9a e0       	ldi	r25, 0x0A	; 10
    6da0:	c7 54       	subi	r28, 0x47	; 71
    6da2:	dd 4f       	sbci	r29, 0xFD	; 253
    6da4:	98 83       	st	Y, r25
    6da6:	c9 5b       	subi	r28, 0xB9	; 185
    6da8:	d2 40       	sbci	r29, 0x02	; 2
    6daa:	c9 54       	subi	r28, 0x49	; 73
    6dac:	dd 4f       	sbci	r29, 0xFD	; 253
    6dae:	e8 81       	ld	r30, Y
    6db0:	f9 81       	ldd	r31, Y+1	; 0x01
    6db2:	c7 5b       	subi	r28, 0xB7	; 183
    6db4:	d2 40       	sbci	r29, 0x02	; 2
    6db6:	00 80       	ld	r0, Z
    6db8:	c9 54       	subi	r28, 0x49	; 73
    6dba:	dd 4f       	sbci	r29, 0xFD	; 253
    6dbc:	88 81       	ld	r24, Y
    6dbe:	99 81       	ldd	r25, Y+1	; 0x01
    6dc0:	c7 5b       	subi	r28, 0xB7	; 183
    6dc2:	d2 40       	sbci	r29, 0x02	; 2
    6dc4:	01 96       	adiw	r24, 0x01	; 1
    6dc6:	c9 54       	subi	r28, 0x49	; 73
    6dc8:	dd 4f       	sbci	r29, 0xFD	; 253
    6dca:	99 83       	std	Y+1, r25	; 0x01
    6dcc:	88 83       	st	Y, r24
    6dce:	c7 5b       	subi	r28, 0xB7	; 183
    6dd0:	d2 40       	sbci	r29, 0x02	; 2
    6dd2:	cb 54       	subi	r28, 0x4B	; 75
    6dd4:	dd 4f       	sbci	r29, 0xFD	; 253
    6dd6:	e8 81       	ld	r30, Y
    6dd8:	f9 81       	ldd	r31, Y+1	; 0x01
    6dda:	c5 5b       	subi	r28, 0xB5	; 181
    6ddc:	d2 40       	sbci	r29, 0x02	; 2
    6dde:	00 82       	st	Z, r0
    6de0:	cb 54       	subi	r28, 0x4B	; 75
    6de2:	dd 4f       	sbci	r29, 0xFD	; 253
    6de4:	88 81       	ld	r24, Y
    6de6:	99 81       	ldd	r25, Y+1	; 0x01
    6de8:	c5 5b       	subi	r28, 0xB5	; 181
    6dea:	d2 40       	sbci	r29, 0x02	; 2
    6dec:	01 96       	adiw	r24, 0x01	; 1
    6dee:	cb 54       	subi	r28, 0x4B	; 75
    6df0:	dd 4f       	sbci	r29, 0xFD	; 253
    6df2:	99 83       	std	Y+1, r25	; 0x01
    6df4:	88 83       	st	Y, r24
    6df6:	c5 5b       	subi	r28, 0xB5	; 181
    6df8:	d2 40       	sbci	r29, 0x02	; 2
    6dfa:	c7 54       	subi	r28, 0x47	; 71
    6dfc:	dd 4f       	sbci	r29, 0xFD	; 253
    6dfe:	98 81       	ld	r25, Y
    6e00:	c9 5b       	subi	r28, 0xB9	; 185
    6e02:	d2 40       	sbci	r29, 0x02	; 2
    6e04:	91 50       	subi	r25, 0x01	; 1
    6e06:	c7 54       	subi	r28, 0x47	; 71
    6e08:	dd 4f       	sbci	r29, 0xFD	; 253
    6e0a:	98 83       	st	Y, r25
    6e0c:	c9 5b       	subi	r28, 0xB9	; 185
    6e0e:	d2 40       	sbci	r29, 0x02	; 2
    6e10:	c7 54       	subi	r28, 0x47	; 71
    6e12:	dd 4f       	sbci	r29, 0xFD	; 253
    6e14:	e8 81       	ld	r30, Y
    6e16:	c9 5b       	subi	r28, 0xB9	; 185
    6e18:	d2 40       	sbci	r29, 0x02	; 2
    6e1a:	ee 23       	and	r30, r30
    6e1c:	31 f6       	brne	.-116    	; 0x6daa <main+0x798>
    6e1e:	cd 54       	subi	r28, 0x4D	; 77
    6e20:	dd 4f       	sbci	r29, 0xFD	; 253
    6e22:	e8 81       	ld	r30, Y
    6e24:	f9 81       	ldd	r31, Y+1	; 0x01
    6e26:	c3 5b       	subi	r28, 0xB3	; 179
    6e28:	d2 40       	sbci	r29, 0x02	; 2
    6e2a:	12 86       	std	Z+10, r1	; 0x0a

	uint8 num1[6] ;
	uint8 num2[6] ;

	Timer_ConfigType timer2 = {TIMER2 , NORMAL , F_CPU_1024 , 0 , 0 };
    6e2c:	ce 01       	movw	r24, r28
    6e2e:	8d 58       	subi	r24, 0x8D	; 141
    6e30:	9d 4f       	sbci	r25, 0xFD	; 253
    6e32:	c6 54       	subi	r28, 0x46	; 70
    6e34:	dd 4f       	sbci	r29, 0xFD	; 253
    6e36:	99 83       	std	Y+1, r25	; 0x01
    6e38:	88 83       	st	Y, r24
    6e3a:	ca 5b       	subi	r28, 0xBA	; 186
    6e3c:	d2 40       	sbci	r29, 0x02	; 2
    6e3e:	86 e3       	ldi	r24, 0x36	; 54
    6e40:	92 e0       	ldi	r25, 0x02	; 2
    6e42:	c4 54       	subi	r28, 0x44	; 68
    6e44:	dd 4f       	sbci	r29, 0xFD	; 253
    6e46:	99 83       	std	Y+1, r25	; 0x01
    6e48:	88 83       	st	Y, r24
    6e4a:	cc 5b       	subi	r28, 0xBC	; 188
    6e4c:	d2 40       	sbci	r29, 0x02	; 2
    6e4e:	97 e0       	ldi	r25, 0x07	; 7
    6e50:	c2 54       	subi	r28, 0x42	; 66
    6e52:	dd 4f       	sbci	r29, 0xFD	; 253
    6e54:	98 83       	st	Y, r25
    6e56:	ce 5b       	subi	r28, 0xBE	; 190
    6e58:	d2 40       	sbci	r29, 0x02	; 2
    6e5a:	c4 54       	subi	r28, 0x44	; 68
    6e5c:	dd 4f       	sbci	r29, 0xFD	; 253
    6e5e:	e8 81       	ld	r30, Y
    6e60:	f9 81       	ldd	r31, Y+1	; 0x01
    6e62:	cc 5b       	subi	r28, 0xBC	; 188
    6e64:	d2 40       	sbci	r29, 0x02	; 2
    6e66:	00 80       	ld	r0, Z
    6e68:	c4 54       	subi	r28, 0x44	; 68
    6e6a:	dd 4f       	sbci	r29, 0xFD	; 253
    6e6c:	88 81       	ld	r24, Y
    6e6e:	99 81       	ldd	r25, Y+1	; 0x01
    6e70:	cc 5b       	subi	r28, 0xBC	; 188
    6e72:	d2 40       	sbci	r29, 0x02	; 2
    6e74:	01 96       	adiw	r24, 0x01	; 1
    6e76:	c4 54       	subi	r28, 0x44	; 68
    6e78:	dd 4f       	sbci	r29, 0xFD	; 253
    6e7a:	99 83       	std	Y+1, r25	; 0x01
    6e7c:	88 83       	st	Y, r24
    6e7e:	cc 5b       	subi	r28, 0xBC	; 188
    6e80:	d2 40       	sbci	r29, 0x02	; 2
    6e82:	c6 54       	subi	r28, 0x46	; 70
    6e84:	dd 4f       	sbci	r29, 0xFD	; 253
    6e86:	e8 81       	ld	r30, Y
    6e88:	f9 81       	ldd	r31, Y+1	; 0x01
    6e8a:	ca 5b       	subi	r28, 0xBA	; 186
    6e8c:	d2 40       	sbci	r29, 0x02	; 2
    6e8e:	00 82       	st	Z, r0
    6e90:	c6 54       	subi	r28, 0x46	; 70
    6e92:	dd 4f       	sbci	r29, 0xFD	; 253
    6e94:	88 81       	ld	r24, Y
    6e96:	99 81       	ldd	r25, Y+1	; 0x01
    6e98:	ca 5b       	subi	r28, 0xBA	; 186
    6e9a:	d2 40       	sbci	r29, 0x02	; 2
    6e9c:	01 96       	adiw	r24, 0x01	; 1
    6e9e:	c6 54       	subi	r28, 0x46	; 70
    6ea0:	dd 4f       	sbci	r29, 0xFD	; 253
    6ea2:	99 83       	std	Y+1, r25	; 0x01
    6ea4:	88 83       	st	Y, r24
    6ea6:	ca 5b       	subi	r28, 0xBA	; 186
    6ea8:	d2 40       	sbci	r29, 0x02	; 2
    6eaa:	c2 54       	subi	r28, 0x42	; 66
    6eac:	dd 4f       	sbci	r29, 0xFD	; 253
    6eae:	98 81       	ld	r25, Y
    6eb0:	ce 5b       	subi	r28, 0xBE	; 190
    6eb2:	d2 40       	sbci	r29, 0x02	; 2
    6eb4:	91 50       	subi	r25, 0x01	; 1
    6eb6:	c2 54       	subi	r28, 0x42	; 66
    6eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    6eba:	98 83       	st	Y, r25
    6ebc:	ce 5b       	subi	r28, 0xBE	; 190
    6ebe:	d2 40       	sbci	r29, 0x02	; 2
    6ec0:	c2 54       	subi	r28, 0x42	; 66
    6ec2:	dd 4f       	sbci	r29, 0xFD	; 253
    6ec4:	e8 81       	ld	r30, Y
    6ec6:	ce 5b       	subi	r28, 0xBE	; 190
    6ec8:	d2 40       	sbci	r29, 0x02	; 2
    6eca:	ee 23       	and	r30, r30
    6ecc:	31 f6       	brne	.-116    	; 0x6e5a <main+0x848>
	Timer_ConfigType timer0 = {TIMER0 , NORMAL , F_CPU_1024 , 0 , 0 };
    6ece:	ce 01       	movw	r24, r28
    6ed0:	86 58       	subi	r24, 0x86	; 134
    6ed2:	9d 4f       	sbci	r25, 0xFD	; 253
    6ed4:	c1 54       	subi	r28, 0x41	; 65
    6ed6:	dd 4f       	sbci	r29, 0xFD	; 253
    6ed8:	99 83       	std	Y+1, r25	; 0x01
    6eda:	88 83       	st	Y, r24
    6edc:	cf 5b       	subi	r28, 0xBF	; 191
    6ede:	d2 40       	sbci	r29, 0x02	; 2
    6ee0:	8f e2       	ldi	r24, 0x2F	; 47
    6ee2:	92 e0       	ldi	r25, 0x02	; 2
    6ee4:	cf 53       	subi	r28, 0x3F	; 63
    6ee6:	dd 4f       	sbci	r29, 0xFD	; 253
    6ee8:	99 83       	std	Y+1, r25	; 0x01
    6eea:	88 83       	st	Y, r24
    6eec:	c1 5c       	subi	r28, 0xC1	; 193
    6eee:	d2 40       	sbci	r29, 0x02	; 2
    6ef0:	97 e0       	ldi	r25, 0x07	; 7
    6ef2:	cd 53       	subi	r28, 0x3D	; 61
    6ef4:	dd 4f       	sbci	r29, 0xFD	; 253
    6ef6:	98 83       	st	Y, r25
    6ef8:	c3 5c       	subi	r28, 0xC3	; 195
    6efa:	d2 40       	sbci	r29, 0x02	; 2
    6efc:	cf 53       	subi	r28, 0x3F	; 63
    6efe:	dd 4f       	sbci	r29, 0xFD	; 253
    6f00:	e8 81       	ld	r30, Y
    6f02:	f9 81       	ldd	r31, Y+1	; 0x01
    6f04:	c1 5c       	subi	r28, 0xC1	; 193
    6f06:	d2 40       	sbci	r29, 0x02	; 2
    6f08:	00 80       	ld	r0, Z
    6f0a:	cf 53       	subi	r28, 0x3F	; 63
    6f0c:	dd 4f       	sbci	r29, 0xFD	; 253
    6f0e:	88 81       	ld	r24, Y
    6f10:	99 81       	ldd	r25, Y+1	; 0x01
    6f12:	c1 5c       	subi	r28, 0xC1	; 193
    6f14:	d2 40       	sbci	r29, 0x02	; 2
    6f16:	01 96       	adiw	r24, 0x01	; 1
    6f18:	cf 53       	subi	r28, 0x3F	; 63
    6f1a:	dd 4f       	sbci	r29, 0xFD	; 253
    6f1c:	99 83       	std	Y+1, r25	; 0x01
    6f1e:	88 83       	st	Y, r24
    6f20:	c1 5c       	subi	r28, 0xC1	; 193
    6f22:	d2 40       	sbci	r29, 0x02	; 2
    6f24:	c1 54       	subi	r28, 0x41	; 65
    6f26:	dd 4f       	sbci	r29, 0xFD	; 253
    6f28:	e8 81       	ld	r30, Y
    6f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    6f2c:	cf 5b       	subi	r28, 0xBF	; 191
    6f2e:	d2 40       	sbci	r29, 0x02	; 2
    6f30:	00 82       	st	Z, r0
    6f32:	c1 54       	subi	r28, 0x41	; 65
    6f34:	dd 4f       	sbci	r29, 0xFD	; 253
    6f36:	88 81       	ld	r24, Y
    6f38:	99 81       	ldd	r25, Y+1	; 0x01
    6f3a:	cf 5b       	subi	r28, 0xBF	; 191
    6f3c:	d2 40       	sbci	r29, 0x02	; 2
    6f3e:	01 96       	adiw	r24, 0x01	; 1
    6f40:	c1 54       	subi	r28, 0x41	; 65
    6f42:	dd 4f       	sbci	r29, 0xFD	; 253
    6f44:	99 83       	std	Y+1, r25	; 0x01
    6f46:	88 83       	st	Y, r24
    6f48:	cf 5b       	subi	r28, 0xBF	; 191
    6f4a:	d2 40       	sbci	r29, 0x02	; 2
    6f4c:	cd 53       	subi	r28, 0x3D	; 61
    6f4e:	dd 4f       	sbci	r29, 0xFD	; 253
    6f50:	98 81       	ld	r25, Y
    6f52:	c3 5c       	subi	r28, 0xC3	; 195
    6f54:	d2 40       	sbci	r29, 0x02	; 2
    6f56:	91 50       	subi	r25, 0x01	; 1
    6f58:	cd 53       	subi	r28, 0x3D	; 61
    6f5a:	dd 4f       	sbci	r29, 0xFD	; 253
    6f5c:	98 83       	st	Y, r25
    6f5e:	c3 5c       	subi	r28, 0xC3	; 195
    6f60:	d2 40       	sbci	r29, 0x02	; 2
    6f62:	cd 53       	subi	r28, 0x3D	; 61
    6f64:	dd 4f       	sbci	r29, 0xFD	; 253
    6f66:	e8 81       	ld	r30, Y
    6f68:	c3 5c       	subi	r28, 0xC3	; 195
    6f6a:	d2 40       	sbci	r29, 0x02	; 2
    6f6c:	ee 23       	and	r30, r30
    6f6e:	31 f6       	brne	.-116    	; 0x6efc <main+0x8ea>

	SET_BIT(DDRA,7);
    6f70:	aa e3       	ldi	r26, 0x3A	; 58
    6f72:	b0 e0       	ldi	r27, 0x00	; 0
    6f74:	ea e3       	ldi	r30, 0x3A	; 58
    6f76:	f0 e0       	ldi	r31, 0x00	; 0
    6f78:	80 81       	ld	r24, Z
    6f7a:	80 68       	ori	r24, 0x80	; 128
    6f7c:	8c 93       	st	X, r24
	SET_BIT(DDRA,6);
    6f7e:	aa e3       	ldi	r26, 0x3A	; 58
    6f80:	b0 e0       	ldi	r27, 0x00	; 0
    6f82:	ea e3       	ldi	r30, 0x3A	; 58
    6f84:	f0 e0       	ldi	r31, 0x00	; 0
    6f86:	80 81       	ld	r24, Z
    6f88:	80 64       	ori	r24, 0x40	; 64
    6f8a:	8c 93       	st	X, r24
	SET_BIT(DDRA,5);
    6f8c:	aa e3       	ldi	r26, 0x3A	; 58
    6f8e:	b0 e0       	ldi	r27, 0x00	; 0
    6f90:	ea e3       	ldi	r30, 0x3A	; 58
    6f92:	f0 e0       	ldi	r31, 0x00	; 0
    6f94:	80 81       	ld	r24, Z
    6f96:	80 62       	ori	r24, 0x20	; 32
    6f98:	8c 93       	st	X, r24

	uint8 i = 0;
    6f9a:	fe 01       	movw	r30, r28
    6f9c:	ea 53       	subi	r30, 0x3A	; 58
    6f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    6fa0:	10 82       	st	Z, r1
	uint8 flag1 = 0;
    6fa2:	fe 01       	movw	r30, r28
    6fa4:	eb 53       	subi	r30, 0x3B	; 59
    6fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    6fa8:	10 82       	st	Z, r1
	uint8 flag2 = 0;
    6faa:	fe 01       	movw	r30, r28
    6fac:	ec 53       	subi	r30, 0x3C	; 60
    6fae:	fe 4f       	sbci	r31, 0xFE	; 254
    6fb0:	10 82       	st	Z, r1
	uint8 trick = 0;
    6fb2:	fe 01       	movw	r30, r28
    6fb4:	ed 53       	subi	r30, 0x3D	; 61
    6fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    6fb8:	10 82       	st	Z, r1
	uint8 temp = 0;
    6fba:	fe 01       	movw	r30, r28
    6fbc:	ee 53       	subi	r30, 0x3E	; 62
    6fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    6fc0:	10 82       	st	Z, r1
	uint8 r = 0;
    6fc2:	fe 01       	movw	r30, r28
    6fc4:	ef 53       	subi	r30, 0x3F	; 63
    6fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    6fc8:	10 82       	st	Z, r1

	while(1)
	{
		/*check for temperature */
		check();
    6fca:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>

		while(1)
		{
			/*check for temperature */
			check();
    6fce:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
			/*delete lcd content */
			LCD_SendCommand(DISPLAY_CLEAR);
    6fd2:	81 e0       	ldi	r24, 0x01	; 1
    6fd4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    6fd8:	fe 01       	movw	r30, r28
    6fda:	e3 54       	subi	r30, 0x43	; 67
    6fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    6fde:	80 e0       	ldi	r24, 0x00	; 0
    6fe0:	90 e0       	ldi	r25, 0x00	; 0
    6fe2:	a0 ea       	ldi	r26, 0xA0	; 160
    6fe4:	b1 e4       	ldi	r27, 0x41	; 65
    6fe6:	80 83       	st	Z, r24
    6fe8:	91 83       	std	Z+1, r25	; 0x01
    6fea:	a2 83       	std	Z+2, r26	; 0x02
    6fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fee:	8e 01       	movw	r16, r28
    6ff0:	07 54       	subi	r16, 0x47	; 71
    6ff2:	1e 4f       	sbci	r17, 0xFE	; 254
    6ff4:	fe 01       	movw	r30, r28
    6ff6:	e3 54       	subi	r30, 0x43	; 67
    6ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    6ffa:	60 81       	ld	r22, Z
    6ffc:	71 81       	ldd	r23, Z+1	; 0x01
    6ffe:	82 81       	ldd	r24, Z+2	; 0x02
    7000:	93 81       	ldd	r25, Z+3	; 0x03
    7002:	20 e0       	ldi	r18, 0x00	; 0
    7004:	30 e0       	ldi	r19, 0x00	; 0
    7006:	4a e7       	ldi	r20, 0x7A	; 122
    7008:	55 e4       	ldi	r21, 0x45	; 69
    700a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    700e:	dc 01       	movw	r26, r24
    7010:	cb 01       	movw	r24, r22
    7012:	f8 01       	movw	r30, r16
    7014:	80 83       	st	Z, r24
    7016:	91 83       	std	Z+1, r25	; 0x01
    7018:	a2 83       	std	Z+2, r26	; 0x02
    701a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    701c:	fe 01       	movw	r30, r28
    701e:	e7 54       	subi	r30, 0x47	; 71
    7020:	fe 4f       	sbci	r31, 0xFE	; 254
    7022:	60 81       	ld	r22, Z
    7024:	71 81       	ldd	r23, Z+1	; 0x01
    7026:	82 81       	ldd	r24, Z+2	; 0x02
    7028:	93 81       	ldd	r25, Z+3	; 0x03
    702a:	20 e0       	ldi	r18, 0x00	; 0
    702c:	30 e0       	ldi	r19, 0x00	; 0
    702e:	40 e8       	ldi	r20, 0x80	; 128
    7030:	5f e3       	ldi	r21, 0x3F	; 63
    7032:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7036:	88 23       	and	r24, r24
    7038:	44 f4       	brge	.+16     	; 0x704a <main+0xa38>
		__ticks = 1;
    703a:	fe 01       	movw	r30, r28
    703c:	e9 54       	subi	r30, 0x49	; 73
    703e:	fe 4f       	sbci	r31, 0xFE	; 254
    7040:	81 e0       	ldi	r24, 0x01	; 1
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	91 83       	std	Z+1, r25	; 0x01
    7046:	80 83       	st	Z, r24
    7048:	64 c0       	rjmp	.+200    	; 0x7112 <main+0xb00>
	else if (__tmp > 65535)
    704a:	fe 01       	movw	r30, r28
    704c:	e7 54       	subi	r30, 0x47	; 71
    704e:	fe 4f       	sbci	r31, 0xFE	; 254
    7050:	60 81       	ld	r22, Z
    7052:	71 81       	ldd	r23, Z+1	; 0x01
    7054:	82 81       	ldd	r24, Z+2	; 0x02
    7056:	93 81       	ldd	r25, Z+3	; 0x03
    7058:	20 e0       	ldi	r18, 0x00	; 0
    705a:	3f ef       	ldi	r19, 0xFF	; 255
    705c:	4f e7       	ldi	r20, 0x7F	; 127
    705e:	57 e4       	ldi	r21, 0x47	; 71
    7060:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7064:	18 16       	cp	r1, r24
    7066:	0c f0       	brlt	.+2      	; 0x706a <main+0xa58>
    7068:	43 c0       	rjmp	.+134    	; 0x70f0 <main+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    706a:	fe 01       	movw	r30, r28
    706c:	e3 54       	subi	r30, 0x43	; 67
    706e:	fe 4f       	sbci	r31, 0xFE	; 254
    7070:	60 81       	ld	r22, Z
    7072:	71 81       	ldd	r23, Z+1	; 0x01
    7074:	82 81       	ldd	r24, Z+2	; 0x02
    7076:	93 81       	ldd	r25, Z+3	; 0x03
    7078:	20 e0       	ldi	r18, 0x00	; 0
    707a:	30 e0       	ldi	r19, 0x00	; 0
    707c:	40 e2       	ldi	r20, 0x20	; 32
    707e:	51 e4       	ldi	r21, 0x41	; 65
    7080:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7084:	dc 01       	movw	r26, r24
    7086:	cb 01       	movw	r24, r22
    7088:	8e 01       	movw	r16, r28
    708a:	09 54       	subi	r16, 0x49	; 73
    708c:	1e 4f       	sbci	r17, 0xFE	; 254
    708e:	bc 01       	movw	r22, r24
    7090:	cd 01       	movw	r24, r26
    7092:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7096:	dc 01       	movw	r26, r24
    7098:	cb 01       	movw	r24, r22
    709a:	f8 01       	movw	r30, r16
    709c:	91 83       	std	Z+1, r25	; 0x01
    709e:	80 83       	st	Z, r24
    70a0:	1f c0       	rjmp	.+62     	; 0x70e0 <main+0xace>
    70a2:	fe 01       	movw	r30, r28
    70a4:	eb 54       	subi	r30, 0x4B	; 75
    70a6:	fe 4f       	sbci	r31, 0xFE	; 254
    70a8:	80 e9       	ldi	r24, 0x90	; 144
    70aa:	91 e0       	ldi	r25, 0x01	; 1
    70ac:	91 83       	std	Z+1, r25	; 0x01
    70ae:	80 83       	st	Z, r24
    70b0:	fe 01       	movw	r30, r28
    70b2:	eb 54       	subi	r30, 0x4B	; 75
    70b4:	fe 4f       	sbci	r31, 0xFE	; 254
    70b6:	80 81       	ld	r24, Z
    70b8:	91 81       	ldd	r25, Z+1	; 0x01
    70ba:	01 97       	sbiw	r24, 0x01	; 1
    70bc:	f1 f7       	brne	.-4      	; 0x70ba <main+0xaa8>
    70be:	fe 01       	movw	r30, r28
    70c0:	eb 54       	subi	r30, 0x4B	; 75
    70c2:	fe 4f       	sbci	r31, 0xFE	; 254
    70c4:	91 83       	std	Z+1, r25	; 0x01
    70c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70c8:	de 01       	movw	r26, r28
    70ca:	a9 54       	subi	r26, 0x49	; 73
    70cc:	be 4f       	sbci	r27, 0xFE	; 254
    70ce:	fe 01       	movw	r30, r28
    70d0:	e9 54       	subi	r30, 0x49	; 73
    70d2:	fe 4f       	sbci	r31, 0xFE	; 254
    70d4:	80 81       	ld	r24, Z
    70d6:	91 81       	ldd	r25, Z+1	; 0x01
    70d8:	01 97       	sbiw	r24, 0x01	; 1
    70da:	11 96       	adiw	r26, 0x01	; 1
    70dc:	9c 93       	st	X, r25
    70de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70e0:	fe 01       	movw	r30, r28
    70e2:	e9 54       	subi	r30, 0x49	; 73
    70e4:	fe 4f       	sbci	r31, 0xFE	; 254
    70e6:	80 81       	ld	r24, Z
    70e8:	91 81       	ldd	r25, Z+1	; 0x01
    70ea:	00 97       	sbiw	r24, 0x00	; 0
    70ec:	d1 f6       	brne	.-76     	; 0x70a2 <main+0xa90>
    70ee:	27 c0       	rjmp	.+78     	; 0x713e <main+0xb2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70f0:	8e 01       	movw	r16, r28
    70f2:	09 54       	subi	r16, 0x49	; 73
    70f4:	1e 4f       	sbci	r17, 0xFE	; 254
    70f6:	fe 01       	movw	r30, r28
    70f8:	e7 54       	subi	r30, 0x47	; 71
    70fa:	fe 4f       	sbci	r31, 0xFE	; 254
    70fc:	60 81       	ld	r22, Z
    70fe:	71 81       	ldd	r23, Z+1	; 0x01
    7100:	82 81       	ldd	r24, Z+2	; 0x02
    7102:	93 81       	ldd	r25, Z+3	; 0x03
    7104:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7108:	dc 01       	movw	r26, r24
    710a:	cb 01       	movw	r24, r22
    710c:	f8 01       	movw	r30, r16
    710e:	91 83       	std	Z+1, r25	; 0x01
    7110:	80 83       	st	Z, r24
    7112:	de 01       	movw	r26, r28
    7114:	ad 54       	subi	r26, 0x4D	; 77
    7116:	be 4f       	sbci	r27, 0xFE	; 254
    7118:	fe 01       	movw	r30, r28
    711a:	e9 54       	subi	r30, 0x49	; 73
    711c:	fe 4f       	sbci	r31, 0xFE	; 254
    711e:	80 81       	ld	r24, Z
    7120:	91 81       	ldd	r25, Z+1	; 0x01
    7122:	8d 93       	st	X+, r24
    7124:	9c 93       	st	X, r25
    7126:	fe 01       	movw	r30, r28
    7128:	ed 54       	subi	r30, 0x4D	; 77
    712a:	fe 4f       	sbci	r31, 0xFE	; 254
    712c:	80 81       	ld	r24, Z
    712e:	91 81       	ldd	r25, Z+1	; 0x01
    7130:	01 97       	sbiw	r24, 0x01	; 1
    7132:	f1 f7       	brne	.-4      	; 0x7130 <main+0xb1e>
    7134:	fe 01       	movw	r30, r28
    7136:	ed 54       	subi	r30, 0x4D	; 77
    7138:	fe 4f       	sbci	r31, 0xFE	; 254
    713a:	91 83       	std	Z+1, r25	; 0x01
    713c:	80 83       	st	Z, r24
			_delay_ms(20);
			/*print "Enter new" in lcd */
			LCD_PrintString(fir);
    713e:	ce 01       	movw	r24, r28
    7140:	86 5f       	subi	r24, 0xF6	; 246
    7142:	9d 4f       	sbci	r25, 0xFD	; 253
    7144:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    7148:	fe 01       	movw	r30, r28
    714a:	e1 55       	subi	r30, 0x51	; 81
    714c:	fe 4f       	sbci	r31, 0xFE	; 254
    714e:	80 e0       	ldi	r24, 0x00	; 0
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	a0 ea       	ldi	r26, 0xA0	; 160
    7154:	b1 e4       	ldi	r27, 0x41	; 65
    7156:	80 83       	st	Z, r24
    7158:	91 83       	std	Z+1, r25	; 0x01
    715a:	a2 83       	std	Z+2, r26	; 0x02
    715c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    715e:	8e 01       	movw	r16, r28
    7160:	05 55       	subi	r16, 0x55	; 85
    7162:	1e 4f       	sbci	r17, 0xFE	; 254
    7164:	fe 01       	movw	r30, r28
    7166:	e1 55       	subi	r30, 0x51	; 81
    7168:	fe 4f       	sbci	r31, 0xFE	; 254
    716a:	60 81       	ld	r22, Z
    716c:	71 81       	ldd	r23, Z+1	; 0x01
    716e:	82 81       	ldd	r24, Z+2	; 0x02
    7170:	93 81       	ldd	r25, Z+3	; 0x03
    7172:	20 e0       	ldi	r18, 0x00	; 0
    7174:	30 e0       	ldi	r19, 0x00	; 0
    7176:	4a e7       	ldi	r20, 0x7A	; 122
    7178:	55 e4       	ldi	r21, 0x45	; 69
    717a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    717e:	dc 01       	movw	r26, r24
    7180:	cb 01       	movw	r24, r22
    7182:	f8 01       	movw	r30, r16
    7184:	80 83       	st	Z, r24
    7186:	91 83       	std	Z+1, r25	; 0x01
    7188:	a2 83       	std	Z+2, r26	; 0x02
    718a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    718c:	fe 01       	movw	r30, r28
    718e:	e5 55       	subi	r30, 0x55	; 85
    7190:	fe 4f       	sbci	r31, 0xFE	; 254
    7192:	60 81       	ld	r22, Z
    7194:	71 81       	ldd	r23, Z+1	; 0x01
    7196:	82 81       	ldd	r24, Z+2	; 0x02
    7198:	93 81       	ldd	r25, Z+3	; 0x03
    719a:	20 e0       	ldi	r18, 0x00	; 0
    719c:	30 e0       	ldi	r19, 0x00	; 0
    719e:	40 e8       	ldi	r20, 0x80	; 128
    71a0:	5f e3       	ldi	r21, 0x3F	; 63
    71a2:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    71a6:	88 23       	and	r24, r24
    71a8:	44 f4       	brge	.+16     	; 0x71ba <main+0xba8>
		__ticks = 1;
    71aa:	fe 01       	movw	r30, r28
    71ac:	e7 55       	subi	r30, 0x57	; 87
    71ae:	fe 4f       	sbci	r31, 0xFE	; 254
    71b0:	81 e0       	ldi	r24, 0x01	; 1
    71b2:	90 e0       	ldi	r25, 0x00	; 0
    71b4:	91 83       	std	Z+1, r25	; 0x01
    71b6:	80 83       	st	Z, r24
    71b8:	64 c0       	rjmp	.+200    	; 0x7282 <main+0xc70>
	else if (__tmp > 65535)
    71ba:	fe 01       	movw	r30, r28
    71bc:	e5 55       	subi	r30, 0x55	; 85
    71be:	fe 4f       	sbci	r31, 0xFE	; 254
    71c0:	60 81       	ld	r22, Z
    71c2:	71 81       	ldd	r23, Z+1	; 0x01
    71c4:	82 81       	ldd	r24, Z+2	; 0x02
    71c6:	93 81       	ldd	r25, Z+3	; 0x03
    71c8:	20 e0       	ldi	r18, 0x00	; 0
    71ca:	3f ef       	ldi	r19, 0xFF	; 255
    71cc:	4f e7       	ldi	r20, 0x7F	; 127
    71ce:	57 e4       	ldi	r21, 0x47	; 71
    71d0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    71d4:	18 16       	cp	r1, r24
    71d6:	0c f0       	brlt	.+2      	; 0x71da <main+0xbc8>
    71d8:	43 c0       	rjmp	.+134    	; 0x7260 <main+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71da:	fe 01       	movw	r30, r28
    71dc:	e1 55       	subi	r30, 0x51	; 81
    71de:	fe 4f       	sbci	r31, 0xFE	; 254
    71e0:	60 81       	ld	r22, Z
    71e2:	71 81       	ldd	r23, Z+1	; 0x01
    71e4:	82 81       	ldd	r24, Z+2	; 0x02
    71e6:	93 81       	ldd	r25, Z+3	; 0x03
    71e8:	20 e0       	ldi	r18, 0x00	; 0
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	40 e2       	ldi	r20, 0x20	; 32
    71ee:	51 e4       	ldi	r21, 0x41	; 65
    71f0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    71f4:	dc 01       	movw	r26, r24
    71f6:	cb 01       	movw	r24, r22
    71f8:	8e 01       	movw	r16, r28
    71fa:	07 55       	subi	r16, 0x57	; 87
    71fc:	1e 4f       	sbci	r17, 0xFE	; 254
    71fe:	bc 01       	movw	r22, r24
    7200:	cd 01       	movw	r24, r26
    7202:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7206:	dc 01       	movw	r26, r24
    7208:	cb 01       	movw	r24, r22
    720a:	f8 01       	movw	r30, r16
    720c:	91 83       	std	Z+1, r25	; 0x01
    720e:	80 83       	st	Z, r24
    7210:	1f c0       	rjmp	.+62     	; 0x7250 <main+0xc3e>
    7212:	fe 01       	movw	r30, r28
    7214:	e9 55       	subi	r30, 0x59	; 89
    7216:	fe 4f       	sbci	r31, 0xFE	; 254
    7218:	80 e9       	ldi	r24, 0x90	; 144
    721a:	91 e0       	ldi	r25, 0x01	; 1
    721c:	91 83       	std	Z+1, r25	; 0x01
    721e:	80 83       	st	Z, r24
    7220:	fe 01       	movw	r30, r28
    7222:	e9 55       	subi	r30, 0x59	; 89
    7224:	fe 4f       	sbci	r31, 0xFE	; 254
    7226:	80 81       	ld	r24, Z
    7228:	91 81       	ldd	r25, Z+1	; 0x01
    722a:	01 97       	sbiw	r24, 0x01	; 1
    722c:	f1 f7       	brne	.-4      	; 0x722a <main+0xc18>
    722e:	fe 01       	movw	r30, r28
    7230:	e9 55       	subi	r30, 0x59	; 89
    7232:	fe 4f       	sbci	r31, 0xFE	; 254
    7234:	91 83       	std	Z+1, r25	; 0x01
    7236:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7238:	de 01       	movw	r26, r28
    723a:	a7 55       	subi	r26, 0x57	; 87
    723c:	be 4f       	sbci	r27, 0xFE	; 254
    723e:	fe 01       	movw	r30, r28
    7240:	e7 55       	subi	r30, 0x57	; 87
    7242:	fe 4f       	sbci	r31, 0xFE	; 254
    7244:	80 81       	ld	r24, Z
    7246:	91 81       	ldd	r25, Z+1	; 0x01
    7248:	01 97       	sbiw	r24, 0x01	; 1
    724a:	11 96       	adiw	r26, 0x01	; 1
    724c:	9c 93       	st	X, r25
    724e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7250:	fe 01       	movw	r30, r28
    7252:	e7 55       	subi	r30, 0x57	; 87
    7254:	fe 4f       	sbci	r31, 0xFE	; 254
    7256:	80 81       	ld	r24, Z
    7258:	91 81       	ldd	r25, Z+1	; 0x01
    725a:	00 97       	sbiw	r24, 0x00	; 0
    725c:	d1 f6       	brne	.-76     	; 0x7212 <main+0xc00>
    725e:	27 c0       	rjmp	.+78     	; 0x72ae <main+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7260:	8e 01       	movw	r16, r28
    7262:	07 55       	subi	r16, 0x57	; 87
    7264:	1e 4f       	sbci	r17, 0xFE	; 254
    7266:	fe 01       	movw	r30, r28
    7268:	e5 55       	subi	r30, 0x55	; 85
    726a:	fe 4f       	sbci	r31, 0xFE	; 254
    726c:	60 81       	ld	r22, Z
    726e:	71 81       	ldd	r23, Z+1	; 0x01
    7270:	82 81       	ldd	r24, Z+2	; 0x02
    7272:	93 81       	ldd	r25, Z+3	; 0x03
    7274:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7278:	dc 01       	movw	r26, r24
    727a:	cb 01       	movw	r24, r22
    727c:	f8 01       	movw	r30, r16
    727e:	91 83       	std	Z+1, r25	; 0x01
    7280:	80 83       	st	Z, r24
    7282:	de 01       	movw	r26, r28
    7284:	ab 55       	subi	r26, 0x5B	; 91
    7286:	be 4f       	sbci	r27, 0xFE	; 254
    7288:	fe 01       	movw	r30, r28
    728a:	e7 55       	subi	r30, 0x57	; 87
    728c:	fe 4f       	sbci	r31, 0xFE	; 254
    728e:	80 81       	ld	r24, Z
    7290:	91 81       	ldd	r25, Z+1	; 0x01
    7292:	8d 93       	st	X+, r24
    7294:	9c 93       	st	X, r25
    7296:	fe 01       	movw	r30, r28
    7298:	eb 55       	subi	r30, 0x5B	; 91
    729a:	fe 4f       	sbci	r31, 0xFE	; 254
    729c:	80 81       	ld	r24, Z
    729e:	91 81       	ldd	r25, Z+1	; 0x01
    72a0:	01 97       	sbiw	r24, 0x01	; 1
    72a2:	f1 f7       	brne	.-4      	; 0x72a0 <main+0xc8e>
    72a4:	fe 01       	movw	r30, r28
    72a6:	eb 55       	subi	r30, 0x5B	; 91
    72a8:	fe 4f       	sbci	r31, 0xFE	; 254
    72aa:	91 83       	std	Z+1, r25	; 0x01
    72ac:	80 83       	st	Z, r24
			_delay_ms(20);
			/*go to next line in lcd */
			LCD_SendCommand(NEXT_LINE);
    72ae:	80 ec       	ldi	r24, 0xC0	; 192
    72b0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    72b4:	fe 01       	movw	r30, r28
    72b6:	ef 55       	subi	r30, 0x5F	; 95
    72b8:	fe 4f       	sbci	r31, 0xFE	; 254
    72ba:	80 e0       	ldi	r24, 0x00	; 0
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	a0 ea       	ldi	r26, 0xA0	; 160
    72c0:	b1 e4       	ldi	r27, 0x41	; 65
    72c2:	80 83       	st	Z, r24
    72c4:	91 83       	std	Z+1, r25	; 0x01
    72c6:	a2 83       	std	Z+2, r26	; 0x02
    72c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72ca:	8e 01       	movw	r16, r28
    72cc:	03 56       	subi	r16, 0x63	; 99
    72ce:	1e 4f       	sbci	r17, 0xFE	; 254
    72d0:	fe 01       	movw	r30, r28
    72d2:	ef 55       	subi	r30, 0x5F	; 95
    72d4:	fe 4f       	sbci	r31, 0xFE	; 254
    72d6:	60 81       	ld	r22, Z
    72d8:	71 81       	ldd	r23, Z+1	; 0x01
    72da:	82 81       	ldd	r24, Z+2	; 0x02
    72dc:	93 81       	ldd	r25, Z+3	; 0x03
    72de:	20 e0       	ldi	r18, 0x00	; 0
    72e0:	30 e0       	ldi	r19, 0x00	; 0
    72e2:	4a e7       	ldi	r20, 0x7A	; 122
    72e4:	55 e4       	ldi	r21, 0x45	; 69
    72e6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    72ea:	dc 01       	movw	r26, r24
    72ec:	cb 01       	movw	r24, r22
    72ee:	f8 01       	movw	r30, r16
    72f0:	80 83       	st	Z, r24
    72f2:	91 83       	std	Z+1, r25	; 0x01
    72f4:	a2 83       	std	Z+2, r26	; 0x02
    72f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    72f8:	fe 01       	movw	r30, r28
    72fa:	e3 56       	subi	r30, 0x63	; 99
    72fc:	fe 4f       	sbci	r31, 0xFE	; 254
    72fe:	60 81       	ld	r22, Z
    7300:	71 81       	ldd	r23, Z+1	; 0x01
    7302:	82 81       	ldd	r24, Z+2	; 0x02
    7304:	93 81       	ldd	r25, Z+3	; 0x03
    7306:	20 e0       	ldi	r18, 0x00	; 0
    7308:	30 e0       	ldi	r19, 0x00	; 0
    730a:	40 e8       	ldi	r20, 0x80	; 128
    730c:	5f e3       	ldi	r21, 0x3F	; 63
    730e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7312:	88 23       	and	r24, r24
    7314:	44 f4       	brge	.+16     	; 0x7326 <main+0xd14>
		__ticks = 1;
    7316:	fe 01       	movw	r30, r28
    7318:	e5 56       	subi	r30, 0x65	; 101
    731a:	fe 4f       	sbci	r31, 0xFE	; 254
    731c:	81 e0       	ldi	r24, 0x01	; 1
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	91 83       	std	Z+1, r25	; 0x01
    7322:	80 83       	st	Z, r24
    7324:	64 c0       	rjmp	.+200    	; 0x73ee <main+0xddc>
	else if (__tmp > 65535)
    7326:	fe 01       	movw	r30, r28
    7328:	e3 56       	subi	r30, 0x63	; 99
    732a:	fe 4f       	sbci	r31, 0xFE	; 254
    732c:	60 81       	ld	r22, Z
    732e:	71 81       	ldd	r23, Z+1	; 0x01
    7330:	82 81       	ldd	r24, Z+2	; 0x02
    7332:	93 81       	ldd	r25, Z+3	; 0x03
    7334:	20 e0       	ldi	r18, 0x00	; 0
    7336:	3f ef       	ldi	r19, 0xFF	; 255
    7338:	4f e7       	ldi	r20, 0x7F	; 127
    733a:	57 e4       	ldi	r21, 0x47	; 71
    733c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7340:	18 16       	cp	r1, r24
    7342:	0c f0       	brlt	.+2      	; 0x7346 <main+0xd34>
    7344:	43 c0       	rjmp	.+134    	; 0x73cc <main+0xdba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7346:	fe 01       	movw	r30, r28
    7348:	ef 55       	subi	r30, 0x5F	; 95
    734a:	fe 4f       	sbci	r31, 0xFE	; 254
    734c:	60 81       	ld	r22, Z
    734e:	71 81       	ldd	r23, Z+1	; 0x01
    7350:	82 81       	ldd	r24, Z+2	; 0x02
    7352:	93 81       	ldd	r25, Z+3	; 0x03
    7354:	20 e0       	ldi	r18, 0x00	; 0
    7356:	30 e0       	ldi	r19, 0x00	; 0
    7358:	40 e2       	ldi	r20, 0x20	; 32
    735a:	51 e4       	ldi	r21, 0x41	; 65
    735c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7360:	dc 01       	movw	r26, r24
    7362:	cb 01       	movw	r24, r22
    7364:	8e 01       	movw	r16, r28
    7366:	05 56       	subi	r16, 0x65	; 101
    7368:	1e 4f       	sbci	r17, 0xFE	; 254
    736a:	bc 01       	movw	r22, r24
    736c:	cd 01       	movw	r24, r26
    736e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7372:	dc 01       	movw	r26, r24
    7374:	cb 01       	movw	r24, r22
    7376:	f8 01       	movw	r30, r16
    7378:	91 83       	std	Z+1, r25	; 0x01
    737a:	80 83       	st	Z, r24
    737c:	1f c0       	rjmp	.+62     	; 0x73bc <main+0xdaa>
    737e:	fe 01       	movw	r30, r28
    7380:	e7 56       	subi	r30, 0x67	; 103
    7382:	fe 4f       	sbci	r31, 0xFE	; 254
    7384:	80 e9       	ldi	r24, 0x90	; 144
    7386:	91 e0       	ldi	r25, 0x01	; 1
    7388:	91 83       	std	Z+1, r25	; 0x01
    738a:	80 83       	st	Z, r24
    738c:	fe 01       	movw	r30, r28
    738e:	e7 56       	subi	r30, 0x67	; 103
    7390:	fe 4f       	sbci	r31, 0xFE	; 254
    7392:	80 81       	ld	r24, Z
    7394:	91 81       	ldd	r25, Z+1	; 0x01
    7396:	01 97       	sbiw	r24, 0x01	; 1
    7398:	f1 f7       	brne	.-4      	; 0x7396 <main+0xd84>
    739a:	fe 01       	movw	r30, r28
    739c:	e7 56       	subi	r30, 0x67	; 103
    739e:	fe 4f       	sbci	r31, 0xFE	; 254
    73a0:	91 83       	std	Z+1, r25	; 0x01
    73a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73a4:	de 01       	movw	r26, r28
    73a6:	a5 56       	subi	r26, 0x65	; 101
    73a8:	be 4f       	sbci	r27, 0xFE	; 254
    73aa:	fe 01       	movw	r30, r28
    73ac:	e5 56       	subi	r30, 0x65	; 101
    73ae:	fe 4f       	sbci	r31, 0xFE	; 254
    73b0:	80 81       	ld	r24, Z
    73b2:	91 81       	ldd	r25, Z+1	; 0x01
    73b4:	01 97       	sbiw	r24, 0x01	; 1
    73b6:	11 96       	adiw	r26, 0x01	; 1
    73b8:	9c 93       	st	X, r25
    73ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73bc:	fe 01       	movw	r30, r28
    73be:	e5 56       	subi	r30, 0x65	; 101
    73c0:	fe 4f       	sbci	r31, 0xFE	; 254
    73c2:	80 81       	ld	r24, Z
    73c4:	91 81       	ldd	r25, Z+1	; 0x01
    73c6:	00 97       	sbiw	r24, 0x00	; 0
    73c8:	d1 f6       	brne	.-76     	; 0x737e <main+0xd6c>
    73ca:	27 c0       	rjmp	.+78     	; 0x741a <main+0xe08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73cc:	8e 01       	movw	r16, r28
    73ce:	05 56       	subi	r16, 0x65	; 101
    73d0:	1e 4f       	sbci	r17, 0xFE	; 254
    73d2:	fe 01       	movw	r30, r28
    73d4:	e3 56       	subi	r30, 0x63	; 99
    73d6:	fe 4f       	sbci	r31, 0xFE	; 254
    73d8:	60 81       	ld	r22, Z
    73da:	71 81       	ldd	r23, Z+1	; 0x01
    73dc:	82 81       	ldd	r24, Z+2	; 0x02
    73de:	93 81       	ldd	r25, Z+3	; 0x03
    73e0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    73e4:	dc 01       	movw	r26, r24
    73e6:	cb 01       	movw	r24, r22
    73e8:	f8 01       	movw	r30, r16
    73ea:	91 83       	std	Z+1, r25	; 0x01
    73ec:	80 83       	st	Z, r24
    73ee:	de 01       	movw	r26, r28
    73f0:	a9 56       	subi	r26, 0x69	; 105
    73f2:	be 4f       	sbci	r27, 0xFE	; 254
    73f4:	fe 01       	movw	r30, r28
    73f6:	e5 56       	subi	r30, 0x65	; 101
    73f8:	fe 4f       	sbci	r31, 0xFE	; 254
    73fa:	80 81       	ld	r24, Z
    73fc:	91 81       	ldd	r25, Z+1	; 0x01
    73fe:	8d 93       	st	X+, r24
    7400:	9c 93       	st	X, r25
    7402:	fe 01       	movw	r30, r28
    7404:	e9 56       	subi	r30, 0x69	; 105
    7406:	fe 4f       	sbci	r31, 0xFE	; 254
    7408:	80 81       	ld	r24, Z
    740a:	91 81       	ldd	r25, Z+1	; 0x01
    740c:	01 97       	sbiw	r24, 0x01	; 1
    740e:	f1 f7       	brne	.-4      	; 0x740c <main+0xdfa>
    7410:	fe 01       	movw	r30, r28
    7412:	e9 56       	subi	r30, 0x69	; 105
    7414:	fe 4f       	sbci	r31, 0xFE	; 254
    7416:	91 83       	std	Z+1, r25	; 0x01
    7418:	80 83       	st	Z, r24
			_delay_ms(20);
			/* print "password" in lcd */
			LCD_PrintString(wel);
    741a:	ce 01       	movw	r24, r28
    741c:	84 5a       	subi	r24, 0xA4	; 164
    741e:	9d 4f       	sbci	r25, 0xFD	; 253
    7420:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    7424:	fe 01       	movw	r30, r28
    7426:	ed 56       	subi	r30, 0x6D	; 109
    7428:	fe 4f       	sbci	r31, 0xFE	; 254
    742a:	80 e0       	ldi	r24, 0x00	; 0
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	aa ef       	ldi	r26, 0xFA	; 250
    7430:	b3 e4       	ldi	r27, 0x43	; 67
    7432:	80 83       	st	Z, r24
    7434:	91 83       	std	Z+1, r25	; 0x01
    7436:	a2 83       	std	Z+2, r26	; 0x02
    7438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    743a:	8e 01       	movw	r16, r28
    743c:	01 57       	subi	r16, 0x71	; 113
    743e:	1e 4f       	sbci	r17, 0xFE	; 254
    7440:	fe 01       	movw	r30, r28
    7442:	ed 56       	subi	r30, 0x6D	; 109
    7444:	fe 4f       	sbci	r31, 0xFE	; 254
    7446:	60 81       	ld	r22, Z
    7448:	71 81       	ldd	r23, Z+1	; 0x01
    744a:	82 81       	ldd	r24, Z+2	; 0x02
    744c:	93 81       	ldd	r25, Z+3	; 0x03
    744e:	20 e0       	ldi	r18, 0x00	; 0
    7450:	30 e0       	ldi	r19, 0x00	; 0
    7452:	4a e7       	ldi	r20, 0x7A	; 122
    7454:	55 e4       	ldi	r21, 0x45	; 69
    7456:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    745a:	dc 01       	movw	r26, r24
    745c:	cb 01       	movw	r24, r22
    745e:	f8 01       	movw	r30, r16
    7460:	80 83       	st	Z, r24
    7462:	91 83       	std	Z+1, r25	; 0x01
    7464:	a2 83       	std	Z+2, r26	; 0x02
    7466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7468:	fe 01       	movw	r30, r28
    746a:	e1 57       	subi	r30, 0x71	; 113
    746c:	fe 4f       	sbci	r31, 0xFE	; 254
    746e:	60 81       	ld	r22, Z
    7470:	71 81       	ldd	r23, Z+1	; 0x01
    7472:	82 81       	ldd	r24, Z+2	; 0x02
    7474:	93 81       	ldd	r25, Z+3	; 0x03
    7476:	20 e0       	ldi	r18, 0x00	; 0
    7478:	30 e0       	ldi	r19, 0x00	; 0
    747a:	40 e8       	ldi	r20, 0x80	; 128
    747c:	5f e3       	ldi	r21, 0x3F	; 63
    747e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7482:	88 23       	and	r24, r24
    7484:	44 f4       	brge	.+16     	; 0x7496 <main+0xe84>
		__ticks = 1;
    7486:	fe 01       	movw	r30, r28
    7488:	e3 57       	subi	r30, 0x73	; 115
    748a:	fe 4f       	sbci	r31, 0xFE	; 254
    748c:	81 e0       	ldi	r24, 0x01	; 1
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	91 83       	std	Z+1, r25	; 0x01
    7492:	80 83       	st	Z, r24
    7494:	64 c0       	rjmp	.+200    	; 0x755e <main+0xf4c>
	else if (__tmp > 65535)
    7496:	fe 01       	movw	r30, r28
    7498:	e1 57       	subi	r30, 0x71	; 113
    749a:	fe 4f       	sbci	r31, 0xFE	; 254
    749c:	60 81       	ld	r22, Z
    749e:	71 81       	ldd	r23, Z+1	; 0x01
    74a0:	82 81       	ldd	r24, Z+2	; 0x02
    74a2:	93 81       	ldd	r25, Z+3	; 0x03
    74a4:	20 e0       	ldi	r18, 0x00	; 0
    74a6:	3f ef       	ldi	r19, 0xFF	; 255
    74a8:	4f e7       	ldi	r20, 0x7F	; 127
    74aa:	57 e4       	ldi	r21, 0x47	; 71
    74ac:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    74b0:	18 16       	cp	r1, r24
    74b2:	0c f0       	brlt	.+2      	; 0x74b6 <main+0xea4>
    74b4:	43 c0       	rjmp	.+134    	; 0x753c <main+0xf2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74b6:	fe 01       	movw	r30, r28
    74b8:	ed 56       	subi	r30, 0x6D	; 109
    74ba:	fe 4f       	sbci	r31, 0xFE	; 254
    74bc:	60 81       	ld	r22, Z
    74be:	71 81       	ldd	r23, Z+1	; 0x01
    74c0:	82 81       	ldd	r24, Z+2	; 0x02
    74c2:	93 81       	ldd	r25, Z+3	; 0x03
    74c4:	20 e0       	ldi	r18, 0x00	; 0
    74c6:	30 e0       	ldi	r19, 0x00	; 0
    74c8:	40 e2       	ldi	r20, 0x20	; 32
    74ca:	51 e4       	ldi	r21, 0x41	; 65
    74cc:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    74d0:	dc 01       	movw	r26, r24
    74d2:	cb 01       	movw	r24, r22
    74d4:	8e 01       	movw	r16, r28
    74d6:	03 57       	subi	r16, 0x73	; 115
    74d8:	1e 4f       	sbci	r17, 0xFE	; 254
    74da:	bc 01       	movw	r22, r24
    74dc:	cd 01       	movw	r24, r26
    74de:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    74e2:	dc 01       	movw	r26, r24
    74e4:	cb 01       	movw	r24, r22
    74e6:	f8 01       	movw	r30, r16
    74e8:	91 83       	std	Z+1, r25	; 0x01
    74ea:	80 83       	st	Z, r24
    74ec:	1f c0       	rjmp	.+62     	; 0x752c <main+0xf1a>
    74ee:	fe 01       	movw	r30, r28
    74f0:	e5 57       	subi	r30, 0x75	; 117
    74f2:	fe 4f       	sbci	r31, 0xFE	; 254
    74f4:	80 e9       	ldi	r24, 0x90	; 144
    74f6:	91 e0       	ldi	r25, 0x01	; 1
    74f8:	91 83       	std	Z+1, r25	; 0x01
    74fa:	80 83       	st	Z, r24
    74fc:	fe 01       	movw	r30, r28
    74fe:	e5 57       	subi	r30, 0x75	; 117
    7500:	fe 4f       	sbci	r31, 0xFE	; 254
    7502:	80 81       	ld	r24, Z
    7504:	91 81       	ldd	r25, Z+1	; 0x01
    7506:	01 97       	sbiw	r24, 0x01	; 1
    7508:	f1 f7       	brne	.-4      	; 0x7506 <main+0xef4>
    750a:	fe 01       	movw	r30, r28
    750c:	e5 57       	subi	r30, 0x75	; 117
    750e:	fe 4f       	sbci	r31, 0xFE	; 254
    7510:	91 83       	std	Z+1, r25	; 0x01
    7512:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7514:	de 01       	movw	r26, r28
    7516:	a3 57       	subi	r26, 0x73	; 115
    7518:	be 4f       	sbci	r27, 0xFE	; 254
    751a:	fe 01       	movw	r30, r28
    751c:	e3 57       	subi	r30, 0x73	; 115
    751e:	fe 4f       	sbci	r31, 0xFE	; 254
    7520:	80 81       	ld	r24, Z
    7522:	91 81       	ldd	r25, Z+1	; 0x01
    7524:	01 97       	sbiw	r24, 0x01	; 1
    7526:	11 96       	adiw	r26, 0x01	; 1
    7528:	9c 93       	st	X, r25
    752a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    752c:	fe 01       	movw	r30, r28
    752e:	e3 57       	subi	r30, 0x73	; 115
    7530:	fe 4f       	sbci	r31, 0xFE	; 254
    7532:	80 81       	ld	r24, Z
    7534:	91 81       	ldd	r25, Z+1	; 0x01
    7536:	00 97       	sbiw	r24, 0x00	; 0
    7538:	d1 f6       	brne	.-76     	; 0x74ee <main+0xedc>
    753a:	28 c0       	rjmp	.+80     	; 0x758c <main+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    753c:	8e 01       	movw	r16, r28
    753e:	03 57       	subi	r16, 0x73	; 115
    7540:	1e 4f       	sbci	r17, 0xFE	; 254
    7542:	fe 01       	movw	r30, r28
    7544:	e1 57       	subi	r30, 0x71	; 113
    7546:	fe 4f       	sbci	r31, 0xFE	; 254
    7548:	60 81       	ld	r22, Z
    754a:	71 81       	ldd	r23, Z+1	; 0x01
    754c:	82 81       	ldd	r24, Z+2	; 0x02
    754e:	93 81       	ldd	r25, Z+3	; 0x03
    7550:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7554:	dc 01       	movw	r26, r24
    7556:	cb 01       	movw	r24, r22
    7558:	f8 01       	movw	r30, r16
    755a:	91 83       	std	Z+1, r25	; 0x01
    755c:	80 83       	st	Z, r24
    755e:	de 01       	movw	r26, r28
    7560:	a7 57       	subi	r26, 0x77	; 119
    7562:	be 4f       	sbci	r27, 0xFE	; 254
    7564:	fe 01       	movw	r30, r28
    7566:	e3 57       	subi	r30, 0x73	; 115
    7568:	fe 4f       	sbci	r31, 0xFE	; 254
    756a:	80 81       	ld	r24, Z
    756c:	91 81       	ldd	r25, Z+1	; 0x01
    756e:	11 96       	adiw	r26, 0x01	; 1
    7570:	9c 93       	st	X, r25
    7572:	8e 93       	st	-X, r24
    7574:	fe 01       	movw	r30, r28
    7576:	e7 57       	subi	r30, 0x77	; 119
    7578:	fe 4f       	sbci	r31, 0xFE	; 254
    757a:	80 81       	ld	r24, Z
    757c:	91 81       	ldd	r25, Z+1	; 0x01
    757e:	01 97       	sbiw	r24, 0x01	; 1
    7580:	f1 f7       	brne	.-4      	; 0x757e <main+0xf6c>
    7582:	fe 01       	movw	r30, r28
    7584:	e7 57       	subi	r30, 0x77	; 119
    7586:	fe 4f       	sbci	r31, 0xFE	; 254
    7588:	91 83       	std	Z+1, r25	; 0x01
    758a:	80 83       	st	Z, r24
			_delay_ms(500);

			/*for loop to enter password */
			for(i=0 ; i<5 ; i++)
    758c:	fe 01       	movw	r30, r28
    758e:	ea 53       	subi	r30, 0x3A	; 58
    7590:	fe 4f       	sbci	r31, 0xFE	; 254
    7592:	10 82       	st	Z, r1
    7594:	9e c1       	rjmp	.+828    	; 0x78d2 <main+0x12c0>
			{
				/*check for temperature */
				check();
    7596:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
				num1[i] = get_Value();
    759a:	fe 01       	movw	r30, r28
    759c:	ea 53       	subi	r30, 0x3A	; 58
    759e:	fe 4f       	sbci	r31, 0xFE	; 254
    75a0:	80 81       	ld	r24, Z
    75a2:	08 2f       	mov	r16, r24
    75a4:	10 e0       	ldi	r17, 0x00	; 0
    75a6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <get_Value>
    75aa:	28 2f       	mov	r18, r24
    75ac:	ce 01       	movw	r24, r28
    75ae:	89 59       	subi	r24, 0x99	; 153
    75b0:	9d 4f       	sbci	r25, 0xFD	; 253
    75b2:	fc 01       	movw	r30, r24
    75b4:	e0 0f       	add	r30, r16
    75b6:	f1 1f       	adc	r31, r17
    75b8:	20 83       	st	Z, r18
				if(i==0)
    75ba:	fe 01       	movw	r30, r28
    75bc:	ea 53       	subi	r30, 0x3A	; 58
    75be:	fe 4f       	sbci	r31, 0xFE	; 254
    75c0:	80 81       	ld	r24, Z
    75c2:	88 23       	and	r24, r24
    75c4:	21 f4       	brne	.+8      	; 0x75ce <main+0xfbc>
					/*delete lcd content */
					LCD_SendCommand(DISPLAY_CLEAR);
    75c6:	81 e0       	ldi	r24, 0x01	; 1
    75c8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    75cc:	03 c0       	rjmp	.+6      	; 0x75d4 <main+0xfc2>
				else
					/*shift the cursor */
					LCD_SendCommand(CURSOR_SHIFT_RIGHT);
    75ce:	84 e1       	ldi	r24, 0x14	; 20
    75d0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    75d4:	fe 01       	movw	r30, r28
    75d6:	eb 57       	subi	r30, 0x7B	; 123
    75d8:	fe 4f       	sbci	r31, 0xFE	; 254
    75da:	80 e0       	ldi	r24, 0x00	; 0
    75dc:	90 e0       	ldi	r25, 0x00	; 0
    75de:	a0 ea       	ldi	r26, 0xA0	; 160
    75e0:	b1 e4       	ldi	r27, 0x41	; 65
    75e2:	80 83       	st	Z, r24
    75e4:	91 83       	std	Z+1, r25	; 0x01
    75e6:	a2 83       	std	Z+2, r26	; 0x02
    75e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    75ea:	8e 01       	movw	r16, r28
    75ec:	0f 57       	subi	r16, 0x7F	; 127
    75ee:	1e 4f       	sbci	r17, 0xFE	; 254
    75f0:	fe 01       	movw	r30, r28
    75f2:	eb 57       	subi	r30, 0x7B	; 123
    75f4:	fe 4f       	sbci	r31, 0xFE	; 254
    75f6:	60 81       	ld	r22, Z
    75f8:	71 81       	ldd	r23, Z+1	; 0x01
    75fa:	82 81       	ldd	r24, Z+2	; 0x02
    75fc:	93 81       	ldd	r25, Z+3	; 0x03
    75fe:	20 e0       	ldi	r18, 0x00	; 0
    7600:	30 e0       	ldi	r19, 0x00	; 0
    7602:	4a e7       	ldi	r20, 0x7A	; 122
    7604:	55 e4       	ldi	r21, 0x45	; 69
    7606:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    760a:	dc 01       	movw	r26, r24
    760c:	cb 01       	movw	r24, r22
    760e:	f8 01       	movw	r30, r16
    7610:	80 83       	st	Z, r24
    7612:	91 83       	std	Z+1, r25	; 0x01
    7614:	a2 83       	std	Z+2, r26	; 0x02
    7616:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7618:	fe 01       	movw	r30, r28
    761a:	ef 57       	subi	r30, 0x7F	; 127
    761c:	fe 4f       	sbci	r31, 0xFE	; 254
    761e:	60 81       	ld	r22, Z
    7620:	71 81       	ldd	r23, Z+1	; 0x01
    7622:	82 81       	ldd	r24, Z+2	; 0x02
    7624:	93 81       	ldd	r25, Z+3	; 0x03
    7626:	20 e0       	ldi	r18, 0x00	; 0
    7628:	30 e0       	ldi	r19, 0x00	; 0
    762a:	40 e8       	ldi	r20, 0x80	; 128
    762c:	5f e3       	ldi	r21, 0x3F	; 63
    762e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7632:	88 23       	and	r24, r24
    7634:	44 f4       	brge	.+16     	; 0x7646 <main+0x1034>
		__ticks = 1;
    7636:	fe 01       	movw	r30, r28
    7638:	e1 58       	subi	r30, 0x81	; 129
    763a:	fe 4f       	sbci	r31, 0xFE	; 254
    763c:	81 e0       	ldi	r24, 0x01	; 1
    763e:	90 e0       	ldi	r25, 0x00	; 0
    7640:	91 83       	std	Z+1, r25	; 0x01
    7642:	80 83       	st	Z, r24
    7644:	64 c0       	rjmp	.+200    	; 0x770e <main+0x10fc>
	else if (__tmp > 65535)
    7646:	fe 01       	movw	r30, r28
    7648:	ef 57       	subi	r30, 0x7F	; 127
    764a:	fe 4f       	sbci	r31, 0xFE	; 254
    764c:	60 81       	ld	r22, Z
    764e:	71 81       	ldd	r23, Z+1	; 0x01
    7650:	82 81       	ldd	r24, Z+2	; 0x02
    7652:	93 81       	ldd	r25, Z+3	; 0x03
    7654:	20 e0       	ldi	r18, 0x00	; 0
    7656:	3f ef       	ldi	r19, 0xFF	; 255
    7658:	4f e7       	ldi	r20, 0x7F	; 127
    765a:	57 e4       	ldi	r21, 0x47	; 71
    765c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7660:	18 16       	cp	r1, r24
    7662:	0c f0       	brlt	.+2      	; 0x7666 <main+0x1054>
    7664:	43 c0       	rjmp	.+134    	; 0x76ec <main+0x10da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7666:	fe 01       	movw	r30, r28
    7668:	eb 57       	subi	r30, 0x7B	; 123
    766a:	fe 4f       	sbci	r31, 0xFE	; 254
    766c:	60 81       	ld	r22, Z
    766e:	71 81       	ldd	r23, Z+1	; 0x01
    7670:	82 81       	ldd	r24, Z+2	; 0x02
    7672:	93 81       	ldd	r25, Z+3	; 0x03
    7674:	20 e0       	ldi	r18, 0x00	; 0
    7676:	30 e0       	ldi	r19, 0x00	; 0
    7678:	40 e2       	ldi	r20, 0x20	; 32
    767a:	51 e4       	ldi	r21, 0x41	; 65
    767c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7680:	dc 01       	movw	r26, r24
    7682:	cb 01       	movw	r24, r22
    7684:	8e 01       	movw	r16, r28
    7686:	01 58       	subi	r16, 0x81	; 129
    7688:	1e 4f       	sbci	r17, 0xFE	; 254
    768a:	bc 01       	movw	r22, r24
    768c:	cd 01       	movw	r24, r26
    768e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7692:	dc 01       	movw	r26, r24
    7694:	cb 01       	movw	r24, r22
    7696:	f8 01       	movw	r30, r16
    7698:	91 83       	std	Z+1, r25	; 0x01
    769a:	80 83       	st	Z, r24
    769c:	1f c0       	rjmp	.+62     	; 0x76dc <main+0x10ca>
    769e:	fe 01       	movw	r30, r28
    76a0:	e3 58       	subi	r30, 0x83	; 131
    76a2:	fe 4f       	sbci	r31, 0xFE	; 254
    76a4:	80 e9       	ldi	r24, 0x90	; 144
    76a6:	91 e0       	ldi	r25, 0x01	; 1
    76a8:	91 83       	std	Z+1, r25	; 0x01
    76aa:	80 83       	st	Z, r24
    76ac:	fe 01       	movw	r30, r28
    76ae:	e3 58       	subi	r30, 0x83	; 131
    76b0:	fe 4f       	sbci	r31, 0xFE	; 254
    76b2:	80 81       	ld	r24, Z
    76b4:	91 81       	ldd	r25, Z+1	; 0x01
    76b6:	01 97       	sbiw	r24, 0x01	; 1
    76b8:	f1 f7       	brne	.-4      	; 0x76b6 <main+0x10a4>
    76ba:	fe 01       	movw	r30, r28
    76bc:	e3 58       	subi	r30, 0x83	; 131
    76be:	fe 4f       	sbci	r31, 0xFE	; 254
    76c0:	91 83       	std	Z+1, r25	; 0x01
    76c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76c4:	de 01       	movw	r26, r28
    76c6:	a1 58       	subi	r26, 0x81	; 129
    76c8:	be 4f       	sbci	r27, 0xFE	; 254
    76ca:	fe 01       	movw	r30, r28
    76cc:	e1 58       	subi	r30, 0x81	; 129
    76ce:	fe 4f       	sbci	r31, 0xFE	; 254
    76d0:	80 81       	ld	r24, Z
    76d2:	91 81       	ldd	r25, Z+1	; 0x01
    76d4:	01 97       	sbiw	r24, 0x01	; 1
    76d6:	11 96       	adiw	r26, 0x01	; 1
    76d8:	9c 93       	st	X, r25
    76da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76dc:	fe 01       	movw	r30, r28
    76de:	e1 58       	subi	r30, 0x81	; 129
    76e0:	fe 4f       	sbci	r31, 0xFE	; 254
    76e2:	80 81       	ld	r24, Z
    76e4:	91 81       	ldd	r25, Z+1	; 0x01
    76e6:	00 97       	sbiw	r24, 0x00	; 0
    76e8:	d1 f6       	brne	.-76     	; 0x769e <main+0x108c>
    76ea:	27 c0       	rjmp	.+78     	; 0x773a <main+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76ec:	8e 01       	movw	r16, r28
    76ee:	01 58       	subi	r16, 0x81	; 129
    76f0:	1e 4f       	sbci	r17, 0xFE	; 254
    76f2:	fe 01       	movw	r30, r28
    76f4:	ef 57       	subi	r30, 0x7F	; 127
    76f6:	fe 4f       	sbci	r31, 0xFE	; 254
    76f8:	60 81       	ld	r22, Z
    76fa:	71 81       	ldd	r23, Z+1	; 0x01
    76fc:	82 81       	ldd	r24, Z+2	; 0x02
    76fe:	93 81       	ldd	r25, Z+3	; 0x03
    7700:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7704:	dc 01       	movw	r26, r24
    7706:	cb 01       	movw	r24, r22
    7708:	f8 01       	movw	r30, r16
    770a:	91 83       	std	Z+1, r25	; 0x01
    770c:	80 83       	st	Z, r24
    770e:	de 01       	movw	r26, r28
    7710:	a5 58       	subi	r26, 0x85	; 133
    7712:	be 4f       	sbci	r27, 0xFE	; 254
    7714:	fe 01       	movw	r30, r28
    7716:	e1 58       	subi	r30, 0x81	; 129
    7718:	fe 4f       	sbci	r31, 0xFE	; 254
    771a:	80 81       	ld	r24, Z
    771c:	91 81       	ldd	r25, Z+1	; 0x01
    771e:	8d 93       	st	X+, r24
    7720:	9c 93       	st	X, r25
    7722:	fe 01       	movw	r30, r28
    7724:	e5 58       	subi	r30, 0x85	; 133
    7726:	fe 4f       	sbci	r31, 0xFE	; 254
    7728:	80 81       	ld	r24, Z
    772a:	91 81       	ldd	r25, Z+1	; 0x01
    772c:	01 97       	sbiw	r24, 0x01	; 1
    772e:	f1 f7       	brne	.-4      	; 0x772c <main+0x111a>
    7730:	fe 01       	movw	r30, r28
    7732:	e5 58       	subi	r30, 0x85	; 133
    7734:	fe 4f       	sbci	r31, 0xFE	; 254
    7736:	91 83       	std	Z+1, r25	; 0x01
    7738:	80 83       	st	Z, r24
				_delay_ms(20);

				LCD_PrintCharacter(num1[i] + 48);
    773a:	fe 01       	movw	r30, r28
    773c:	ea 53       	subi	r30, 0x3A	; 58
    773e:	fe 4f       	sbci	r31, 0xFE	; 254
    7740:	80 81       	ld	r24, Z
    7742:	28 2f       	mov	r18, r24
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	ce 01       	movw	r24, r28
    7748:	89 59       	subi	r24, 0x99	; 153
    774a:	9d 4f       	sbci	r25, 0xFD	; 253
    774c:	fc 01       	movw	r30, r24
    774e:	e2 0f       	add	r30, r18
    7750:	f3 1f       	adc	r31, r19
    7752:	80 81       	ld	r24, Z
    7754:	80 5d       	subi	r24, 0xD0	; 208
    7756:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD_PrintCharacter>
    775a:	fe 01       	movw	r30, r28
    775c:	e9 58       	subi	r30, 0x89	; 137
    775e:	fe 4f       	sbci	r31, 0xFE	; 254
    7760:	80 e0       	ldi	r24, 0x00	; 0
    7762:	90 e0       	ldi	r25, 0x00	; 0
    7764:	aa ef       	ldi	r26, 0xFA	; 250
    7766:	b3 e4       	ldi	r27, 0x43	; 67
    7768:	80 83       	st	Z, r24
    776a:	91 83       	std	Z+1, r25	; 0x01
    776c:	a2 83       	std	Z+2, r26	; 0x02
    776e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7770:	8e 01       	movw	r16, r28
    7772:	0d 58       	subi	r16, 0x8D	; 141
    7774:	1e 4f       	sbci	r17, 0xFE	; 254
    7776:	fe 01       	movw	r30, r28
    7778:	e9 58       	subi	r30, 0x89	; 137
    777a:	fe 4f       	sbci	r31, 0xFE	; 254
    777c:	60 81       	ld	r22, Z
    777e:	71 81       	ldd	r23, Z+1	; 0x01
    7780:	82 81       	ldd	r24, Z+2	; 0x02
    7782:	93 81       	ldd	r25, Z+3	; 0x03
    7784:	20 e0       	ldi	r18, 0x00	; 0
    7786:	30 e0       	ldi	r19, 0x00	; 0
    7788:	4a e7       	ldi	r20, 0x7A	; 122
    778a:	55 e4       	ldi	r21, 0x45	; 69
    778c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7790:	dc 01       	movw	r26, r24
    7792:	cb 01       	movw	r24, r22
    7794:	f8 01       	movw	r30, r16
    7796:	80 83       	st	Z, r24
    7798:	91 83       	std	Z+1, r25	; 0x01
    779a:	a2 83       	std	Z+2, r26	; 0x02
    779c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    779e:	fe 01       	movw	r30, r28
    77a0:	ed 58       	subi	r30, 0x8D	; 141
    77a2:	fe 4f       	sbci	r31, 0xFE	; 254
    77a4:	60 81       	ld	r22, Z
    77a6:	71 81       	ldd	r23, Z+1	; 0x01
    77a8:	82 81       	ldd	r24, Z+2	; 0x02
    77aa:	93 81       	ldd	r25, Z+3	; 0x03
    77ac:	20 e0       	ldi	r18, 0x00	; 0
    77ae:	30 e0       	ldi	r19, 0x00	; 0
    77b0:	40 e8       	ldi	r20, 0x80	; 128
    77b2:	5f e3       	ldi	r21, 0x3F	; 63
    77b4:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    77b8:	88 23       	and	r24, r24
    77ba:	44 f4       	brge	.+16     	; 0x77cc <main+0x11ba>
		__ticks = 1;
    77bc:	fe 01       	movw	r30, r28
    77be:	ef 58       	subi	r30, 0x8F	; 143
    77c0:	fe 4f       	sbci	r31, 0xFE	; 254
    77c2:	81 e0       	ldi	r24, 0x01	; 1
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	91 83       	std	Z+1, r25	; 0x01
    77c8:	80 83       	st	Z, r24
    77ca:	64 c0       	rjmp	.+200    	; 0x7894 <main+0x1282>
	else if (__tmp > 65535)
    77cc:	fe 01       	movw	r30, r28
    77ce:	ed 58       	subi	r30, 0x8D	; 141
    77d0:	fe 4f       	sbci	r31, 0xFE	; 254
    77d2:	60 81       	ld	r22, Z
    77d4:	71 81       	ldd	r23, Z+1	; 0x01
    77d6:	82 81       	ldd	r24, Z+2	; 0x02
    77d8:	93 81       	ldd	r25, Z+3	; 0x03
    77da:	20 e0       	ldi	r18, 0x00	; 0
    77dc:	3f ef       	ldi	r19, 0xFF	; 255
    77de:	4f e7       	ldi	r20, 0x7F	; 127
    77e0:	57 e4       	ldi	r21, 0x47	; 71
    77e2:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    77e6:	18 16       	cp	r1, r24
    77e8:	0c f0       	brlt	.+2      	; 0x77ec <main+0x11da>
    77ea:	43 c0       	rjmp	.+134    	; 0x7872 <main+0x1260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77ec:	fe 01       	movw	r30, r28
    77ee:	e9 58       	subi	r30, 0x89	; 137
    77f0:	fe 4f       	sbci	r31, 0xFE	; 254
    77f2:	60 81       	ld	r22, Z
    77f4:	71 81       	ldd	r23, Z+1	; 0x01
    77f6:	82 81       	ldd	r24, Z+2	; 0x02
    77f8:	93 81       	ldd	r25, Z+3	; 0x03
    77fa:	20 e0       	ldi	r18, 0x00	; 0
    77fc:	30 e0       	ldi	r19, 0x00	; 0
    77fe:	40 e2       	ldi	r20, 0x20	; 32
    7800:	51 e4       	ldi	r21, 0x41	; 65
    7802:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7806:	dc 01       	movw	r26, r24
    7808:	cb 01       	movw	r24, r22
    780a:	8e 01       	movw	r16, r28
    780c:	0f 58       	subi	r16, 0x8F	; 143
    780e:	1e 4f       	sbci	r17, 0xFE	; 254
    7810:	bc 01       	movw	r22, r24
    7812:	cd 01       	movw	r24, r26
    7814:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7818:	dc 01       	movw	r26, r24
    781a:	cb 01       	movw	r24, r22
    781c:	f8 01       	movw	r30, r16
    781e:	91 83       	std	Z+1, r25	; 0x01
    7820:	80 83       	st	Z, r24
    7822:	1f c0       	rjmp	.+62     	; 0x7862 <main+0x1250>
    7824:	fe 01       	movw	r30, r28
    7826:	e1 59       	subi	r30, 0x91	; 145
    7828:	fe 4f       	sbci	r31, 0xFE	; 254
    782a:	80 e9       	ldi	r24, 0x90	; 144
    782c:	91 e0       	ldi	r25, 0x01	; 1
    782e:	91 83       	std	Z+1, r25	; 0x01
    7830:	80 83       	st	Z, r24
    7832:	fe 01       	movw	r30, r28
    7834:	e1 59       	subi	r30, 0x91	; 145
    7836:	fe 4f       	sbci	r31, 0xFE	; 254
    7838:	80 81       	ld	r24, Z
    783a:	91 81       	ldd	r25, Z+1	; 0x01
    783c:	01 97       	sbiw	r24, 0x01	; 1
    783e:	f1 f7       	brne	.-4      	; 0x783c <main+0x122a>
    7840:	fe 01       	movw	r30, r28
    7842:	e1 59       	subi	r30, 0x91	; 145
    7844:	fe 4f       	sbci	r31, 0xFE	; 254
    7846:	91 83       	std	Z+1, r25	; 0x01
    7848:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    784a:	de 01       	movw	r26, r28
    784c:	af 58       	subi	r26, 0x8F	; 143
    784e:	be 4f       	sbci	r27, 0xFE	; 254
    7850:	fe 01       	movw	r30, r28
    7852:	ef 58       	subi	r30, 0x8F	; 143
    7854:	fe 4f       	sbci	r31, 0xFE	; 254
    7856:	80 81       	ld	r24, Z
    7858:	91 81       	ldd	r25, Z+1	; 0x01
    785a:	01 97       	sbiw	r24, 0x01	; 1
    785c:	11 96       	adiw	r26, 0x01	; 1
    785e:	9c 93       	st	X, r25
    7860:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7862:	fe 01       	movw	r30, r28
    7864:	ef 58       	subi	r30, 0x8F	; 143
    7866:	fe 4f       	sbci	r31, 0xFE	; 254
    7868:	80 81       	ld	r24, Z
    786a:	91 81       	ldd	r25, Z+1	; 0x01
    786c:	00 97       	sbiw	r24, 0x00	; 0
    786e:	d1 f6       	brne	.-76     	; 0x7824 <main+0x1212>
    7870:	27 c0       	rjmp	.+78     	; 0x78c0 <main+0x12ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7872:	8e 01       	movw	r16, r28
    7874:	0f 58       	subi	r16, 0x8F	; 143
    7876:	1e 4f       	sbci	r17, 0xFE	; 254
    7878:	fe 01       	movw	r30, r28
    787a:	ed 58       	subi	r30, 0x8D	; 141
    787c:	fe 4f       	sbci	r31, 0xFE	; 254
    787e:	60 81       	ld	r22, Z
    7880:	71 81       	ldd	r23, Z+1	; 0x01
    7882:	82 81       	ldd	r24, Z+2	; 0x02
    7884:	93 81       	ldd	r25, Z+3	; 0x03
    7886:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    788a:	dc 01       	movw	r26, r24
    788c:	cb 01       	movw	r24, r22
    788e:	f8 01       	movw	r30, r16
    7890:	91 83       	std	Z+1, r25	; 0x01
    7892:	80 83       	st	Z, r24
    7894:	de 01       	movw	r26, r28
    7896:	a3 59       	subi	r26, 0x93	; 147
    7898:	be 4f       	sbci	r27, 0xFE	; 254
    789a:	fe 01       	movw	r30, r28
    789c:	ef 58       	subi	r30, 0x8F	; 143
    789e:	fe 4f       	sbci	r31, 0xFE	; 254
    78a0:	80 81       	ld	r24, Z
    78a2:	91 81       	ldd	r25, Z+1	; 0x01
    78a4:	8d 93       	st	X+, r24
    78a6:	9c 93       	st	X, r25
    78a8:	fe 01       	movw	r30, r28
    78aa:	e3 59       	subi	r30, 0x93	; 147
    78ac:	fe 4f       	sbci	r31, 0xFE	; 254
    78ae:	80 81       	ld	r24, Z
    78b0:	91 81       	ldd	r25, Z+1	; 0x01
    78b2:	01 97       	sbiw	r24, 0x01	; 1
    78b4:	f1 f7       	brne	.-4      	; 0x78b2 <main+0x12a0>
    78b6:	fe 01       	movw	r30, r28
    78b8:	e3 59       	subi	r30, 0x93	; 147
    78ba:	fe 4f       	sbci	r31, 0xFE	; 254
    78bc:	91 83       	std	Z+1, r25	; 0x01
    78be:	80 83       	st	Z, r24
			/* print "password" in lcd */
			LCD_PrintString(wel);
			_delay_ms(500);

			/*for loop to enter password */
			for(i=0 ; i<5 ; i++)
    78c0:	de 01       	movw	r26, r28
    78c2:	aa 53       	subi	r26, 0x3A	; 58
    78c4:	be 4f       	sbci	r27, 0xFE	; 254
    78c6:	fe 01       	movw	r30, r28
    78c8:	ea 53       	subi	r30, 0x3A	; 58
    78ca:	fe 4f       	sbci	r31, 0xFE	; 254
    78cc:	80 81       	ld	r24, Z
    78ce:	8f 5f       	subi	r24, 0xFF	; 255
    78d0:	8c 93       	st	X, r24
    78d2:	fe 01       	movw	r30, r28
    78d4:	ea 53       	subi	r30, 0x3A	; 58
    78d6:	fe 4f       	sbci	r31, 0xFE	; 254
    78d8:	80 81       	ld	r24, Z
    78da:	85 30       	cpi	r24, 0x05	; 5
    78dc:	08 f4       	brcc	.+2      	; 0x78e0 <main+0x12ce>
    78de:	5b ce       	rjmp	.-842    	; 0x7596 <main+0xf84>

				LCD_PrintCharacter(num1[i] + 48);
				_delay_ms(500);
			}
			/*delete lcd content */
			LCD_SendCommand(DISPLAY_CLEAR);
    78e0:	81 e0       	ldi	r24, 0x01	; 1
    78e2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    78e6:	fe 01       	movw	r30, r28
    78e8:	e7 59       	subi	r30, 0x97	; 151
    78ea:	fe 4f       	sbci	r31, 0xFE	; 254
    78ec:	80 e0       	ldi	r24, 0x00	; 0
    78ee:	90 e0       	ldi	r25, 0x00	; 0
    78f0:	a0 ea       	ldi	r26, 0xA0	; 160
    78f2:	b1 e4       	ldi	r27, 0x41	; 65
    78f4:	80 83       	st	Z, r24
    78f6:	91 83       	std	Z+1, r25	; 0x01
    78f8:	a2 83       	std	Z+2, r26	; 0x02
    78fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    78fc:	8e 01       	movw	r16, r28
    78fe:	0b 59       	subi	r16, 0x9B	; 155
    7900:	1e 4f       	sbci	r17, 0xFE	; 254
    7902:	fe 01       	movw	r30, r28
    7904:	e7 59       	subi	r30, 0x97	; 151
    7906:	fe 4f       	sbci	r31, 0xFE	; 254
    7908:	60 81       	ld	r22, Z
    790a:	71 81       	ldd	r23, Z+1	; 0x01
    790c:	82 81       	ldd	r24, Z+2	; 0x02
    790e:	93 81       	ldd	r25, Z+3	; 0x03
    7910:	20 e0       	ldi	r18, 0x00	; 0
    7912:	30 e0       	ldi	r19, 0x00	; 0
    7914:	4a e7       	ldi	r20, 0x7A	; 122
    7916:	55 e4       	ldi	r21, 0x45	; 69
    7918:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    791c:	dc 01       	movw	r26, r24
    791e:	cb 01       	movw	r24, r22
    7920:	f8 01       	movw	r30, r16
    7922:	80 83       	st	Z, r24
    7924:	91 83       	std	Z+1, r25	; 0x01
    7926:	a2 83       	std	Z+2, r26	; 0x02
    7928:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    792a:	fe 01       	movw	r30, r28
    792c:	eb 59       	subi	r30, 0x9B	; 155
    792e:	fe 4f       	sbci	r31, 0xFE	; 254
    7930:	60 81       	ld	r22, Z
    7932:	71 81       	ldd	r23, Z+1	; 0x01
    7934:	82 81       	ldd	r24, Z+2	; 0x02
    7936:	93 81       	ldd	r25, Z+3	; 0x03
    7938:	20 e0       	ldi	r18, 0x00	; 0
    793a:	30 e0       	ldi	r19, 0x00	; 0
    793c:	40 e8       	ldi	r20, 0x80	; 128
    793e:	5f e3       	ldi	r21, 0x3F	; 63
    7940:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7944:	88 23       	and	r24, r24
    7946:	44 f4       	brge	.+16     	; 0x7958 <main+0x1346>
		__ticks = 1;
    7948:	fe 01       	movw	r30, r28
    794a:	ed 59       	subi	r30, 0x9D	; 157
    794c:	fe 4f       	sbci	r31, 0xFE	; 254
    794e:	81 e0       	ldi	r24, 0x01	; 1
    7950:	90 e0       	ldi	r25, 0x00	; 0
    7952:	91 83       	std	Z+1, r25	; 0x01
    7954:	80 83       	st	Z, r24
    7956:	64 c0       	rjmp	.+200    	; 0x7a20 <main+0x140e>
	else if (__tmp > 65535)
    7958:	fe 01       	movw	r30, r28
    795a:	eb 59       	subi	r30, 0x9B	; 155
    795c:	fe 4f       	sbci	r31, 0xFE	; 254
    795e:	60 81       	ld	r22, Z
    7960:	71 81       	ldd	r23, Z+1	; 0x01
    7962:	82 81       	ldd	r24, Z+2	; 0x02
    7964:	93 81       	ldd	r25, Z+3	; 0x03
    7966:	20 e0       	ldi	r18, 0x00	; 0
    7968:	3f ef       	ldi	r19, 0xFF	; 255
    796a:	4f e7       	ldi	r20, 0x7F	; 127
    796c:	57 e4       	ldi	r21, 0x47	; 71
    796e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7972:	18 16       	cp	r1, r24
    7974:	0c f0       	brlt	.+2      	; 0x7978 <main+0x1366>
    7976:	43 c0       	rjmp	.+134    	; 0x79fe <main+0x13ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7978:	fe 01       	movw	r30, r28
    797a:	e7 59       	subi	r30, 0x97	; 151
    797c:	fe 4f       	sbci	r31, 0xFE	; 254
    797e:	60 81       	ld	r22, Z
    7980:	71 81       	ldd	r23, Z+1	; 0x01
    7982:	82 81       	ldd	r24, Z+2	; 0x02
    7984:	93 81       	ldd	r25, Z+3	; 0x03
    7986:	20 e0       	ldi	r18, 0x00	; 0
    7988:	30 e0       	ldi	r19, 0x00	; 0
    798a:	40 e2       	ldi	r20, 0x20	; 32
    798c:	51 e4       	ldi	r21, 0x41	; 65
    798e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7992:	dc 01       	movw	r26, r24
    7994:	cb 01       	movw	r24, r22
    7996:	8e 01       	movw	r16, r28
    7998:	0d 59       	subi	r16, 0x9D	; 157
    799a:	1e 4f       	sbci	r17, 0xFE	; 254
    799c:	bc 01       	movw	r22, r24
    799e:	cd 01       	movw	r24, r26
    79a0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    79a4:	dc 01       	movw	r26, r24
    79a6:	cb 01       	movw	r24, r22
    79a8:	f8 01       	movw	r30, r16
    79aa:	91 83       	std	Z+1, r25	; 0x01
    79ac:	80 83       	st	Z, r24
    79ae:	1f c0       	rjmp	.+62     	; 0x79ee <main+0x13dc>
    79b0:	fe 01       	movw	r30, r28
    79b2:	ef 59       	subi	r30, 0x9F	; 159
    79b4:	fe 4f       	sbci	r31, 0xFE	; 254
    79b6:	80 e9       	ldi	r24, 0x90	; 144
    79b8:	91 e0       	ldi	r25, 0x01	; 1
    79ba:	91 83       	std	Z+1, r25	; 0x01
    79bc:	80 83       	st	Z, r24
    79be:	fe 01       	movw	r30, r28
    79c0:	ef 59       	subi	r30, 0x9F	; 159
    79c2:	fe 4f       	sbci	r31, 0xFE	; 254
    79c4:	80 81       	ld	r24, Z
    79c6:	91 81       	ldd	r25, Z+1	; 0x01
    79c8:	01 97       	sbiw	r24, 0x01	; 1
    79ca:	f1 f7       	brne	.-4      	; 0x79c8 <main+0x13b6>
    79cc:	fe 01       	movw	r30, r28
    79ce:	ef 59       	subi	r30, 0x9F	; 159
    79d0:	fe 4f       	sbci	r31, 0xFE	; 254
    79d2:	91 83       	std	Z+1, r25	; 0x01
    79d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79d6:	de 01       	movw	r26, r28
    79d8:	ad 59       	subi	r26, 0x9D	; 157
    79da:	be 4f       	sbci	r27, 0xFE	; 254
    79dc:	fe 01       	movw	r30, r28
    79de:	ed 59       	subi	r30, 0x9D	; 157
    79e0:	fe 4f       	sbci	r31, 0xFE	; 254
    79e2:	80 81       	ld	r24, Z
    79e4:	91 81       	ldd	r25, Z+1	; 0x01
    79e6:	01 97       	sbiw	r24, 0x01	; 1
    79e8:	11 96       	adiw	r26, 0x01	; 1
    79ea:	9c 93       	st	X, r25
    79ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    79ee:	fe 01       	movw	r30, r28
    79f0:	ed 59       	subi	r30, 0x9D	; 157
    79f2:	fe 4f       	sbci	r31, 0xFE	; 254
    79f4:	80 81       	ld	r24, Z
    79f6:	91 81       	ldd	r25, Z+1	; 0x01
    79f8:	00 97       	sbiw	r24, 0x00	; 0
    79fa:	d1 f6       	brne	.-76     	; 0x79b0 <main+0x139e>
    79fc:	27 c0       	rjmp	.+78     	; 0x7a4c <main+0x143a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    79fe:	8e 01       	movw	r16, r28
    7a00:	0d 59       	subi	r16, 0x9D	; 157
    7a02:	1e 4f       	sbci	r17, 0xFE	; 254
    7a04:	fe 01       	movw	r30, r28
    7a06:	eb 59       	subi	r30, 0x9B	; 155
    7a08:	fe 4f       	sbci	r31, 0xFE	; 254
    7a0a:	60 81       	ld	r22, Z
    7a0c:	71 81       	ldd	r23, Z+1	; 0x01
    7a0e:	82 81       	ldd	r24, Z+2	; 0x02
    7a10:	93 81       	ldd	r25, Z+3	; 0x03
    7a12:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7a16:	dc 01       	movw	r26, r24
    7a18:	cb 01       	movw	r24, r22
    7a1a:	f8 01       	movw	r30, r16
    7a1c:	91 83       	std	Z+1, r25	; 0x01
    7a1e:	80 83       	st	Z, r24
    7a20:	de 01       	movw	r26, r28
    7a22:	a1 5a       	subi	r26, 0xA1	; 161
    7a24:	be 4f       	sbci	r27, 0xFE	; 254
    7a26:	fe 01       	movw	r30, r28
    7a28:	ed 59       	subi	r30, 0x9D	; 157
    7a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    7a2c:	80 81       	ld	r24, Z
    7a2e:	91 81       	ldd	r25, Z+1	; 0x01
    7a30:	8d 93       	st	X+, r24
    7a32:	9c 93       	st	X, r25
    7a34:	fe 01       	movw	r30, r28
    7a36:	e1 5a       	subi	r30, 0xA1	; 161
    7a38:	fe 4f       	sbci	r31, 0xFE	; 254
    7a3a:	80 81       	ld	r24, Z
    7a3c:	91 81       	ldd	r25, Z+1	; 0x01
    7a3e:	01 97       	sbiw	r24, 0x01	; 1
    7a40:	f1 f7       	brne	.-4      	; 0x7a3e <main+0x142c>
    7a42:	fe 01       	movw	r30, r28
    7a44:	e1 5a       	subi	r30, 0xA1	; 161
    7a46:	fe 4f       	sbci	r31, 0xFE	; 254
    7a48:	91 83       	std	Z+1, r25	; 0x01
    7a4a:	80 83       	st	Z, r24
			_delay_ms(20);
			/*print  "Please, Confirm" in lcd */
			LCD_PrintString(sec);
    7a4c:	ce 01       	movw	r24, r28
    7a4e:	8b 5e       	subi	r24, 0xEB	; 235
    7a50:	9d 4f       	sbci	r25, 0xFD	; 253
    7a52:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    7a56:	fe 01       	movw	r30, r28
    7a58:	e5 5a       	subi	r30, 0xA5	; 165
    7a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    7a5c:	80 e0       	ldi	r24, 0x00	; 0
    7a5e:	90 e0       	ldi	r25, 0x00	; 0
    7a60:	a0 ea       	ldi	r26, 0xA0	; 160
    7a62:	b1 e4       	ldi	r27, 0x41	; 65
    7a64:	80 83       	st	Z, r24
    7a66:	91 83       	std	Z+1, r25	; 0x01
    7a68:	a2 83       	std	Z+2, r26	; 0x02
    7a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a6c:	8e 01       	movw	r16, r28
    7a6e:	09 5a       	subi	r16, 0xA9	; 169
    7a70:	1e 4f       	sbci	r17, 0xFE	; 254
    7a72:	fe 01       	movw	r30, r28
    7a74:	e5 5a       	subi	r30, 0xA5	; 165
    7a76:	fe 4f       	sbci	r31, 0xFE	; 254
    7a78:	60 81       	ld	r22, Z
    7a7a:	71 81       	ldd	r23, Z+1	; 0x01
    7a7c:	82 81       	ldd	r24, Z+2	; 0x02
    7a7e:	93 81       	ldd	r25, Z+3	; 0x03
    7a80:	20 e0       	ldi	r18, 0x00	; 0
    7a82:	30 e0       	ldi	r19, 0x00	; 0
    7a84:	4a e7       	ldi	r20, 0x7A	; 122
    7a86:	55 e4       	ldi	r21, 0x45	; 69
    7a88:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7a8c:	dc 01       	movw	r26, r24
    7a8e:	cb 01       	movw	r24, r22
    7a90:	f8 01       	movw	r30, r16
    7a92:	80 83       	st	Z, r24
    7a94:	91 83       	std	Z+1, r25	; 0x01
    7a96:	a2 83       	std	Z+2, r26	; 0x02
    7a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7a9a:	fe 01       	movw	r30, r28
    7a9c:	e9 5a       	subi	r30, 0xA9	; 169
    7a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    7aa0:	60 81       	ld	r22, Z
    7aa2:	71 81       	ldd	r23, Z+1	; 0x01
    7aa4:	82 81       	ldd	r24, Z+2	; 0x02
    7aa6:	93 81       	ldd	r25, Z+3	; 0x03
    7aa8:	20 e0       	ldi	r18, 0x00	; 0
    7aaa:	30 e0       	ldi	r19, 0x00	; 0
    7aac:	40 e8       	ldi	r20, 0x80	; 128
    7aae:	5f e3       	ldi	r21, 0x3F	; 63
    7ab0:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7ab4:	88 23       	and	r24, r24
    7ab6:	44 f4       	brge	.+16     	; 0x7ac8 <main+0x14b6>
		__ticks = 1;
    7ab8:	fe 01       	movw	r30, r28
    7aba:	eb 5a       	subi	r30, 0xAB	; 171
    7abc:	fe 4f       	sbci	r31, 0xFE	; 254
    7abe:	81 e0       	ldi	r24, 0x01	; 1
    7ac0:	90 e0       	ldi	r25, 0x00	; 0
    7ac2:	91 83       	std	Z+1, r25	; 0x01
    7ac4:	80 83       	st	Z, r24
    7ac6:	64 c0       	rjmp	.+200    	; 0x7b90 <main+0x157e>
	else if (__tmp > 65535)
    7ac8:	fe 01       	movw	r30, r28
    7aca:	e9 5a       	subi	r30, 0xA9	; 169
    7acc:	fe 4f       	sbci	r31, 0xFE	; 254
    7ace:	60 81       	ld	r22, Z
    7ad0:	71 81       	ldd	r23, Z+1	; 0x01
    7ad2:	82 81       	ldd	r24, Z+2	; 0x02
    7ad4:	93 81       	ldd	r25, Z+3	; 0x03
    7ad6:	20 e0       	ldi	r18, 0x00	; 0
    7ad8:	3f ef       	ldi	r19, 0xFF	; 255
    7ada:	4f e7       	ldi	r20, 0x7F	; 127
    7adc:	57 e4       	ldi	r21, 0x47	; 71
    7ade:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7ae2:	18 16       	cp	r1, r24
    7ae4:	0c f0       	brlt	.+2      	; 0x7ae8 <main+0x14d6>
    7ae6:	43 c0       	rjmp	.+134    	; 0x7b6e <main+0x155c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ae8:	fe 01       	movw	r30, r28
    7aea:	e5 5a       	subi	r30, 0xA5	; 165
    7aec:	fe 4f       	sbci	r31, 0xFE	; 254
    7aee:	60 81       	ld	r22, Z
    7af0:	71 81       	ldd	r23, Z+1	; 0x01
    7af2:	82 81       	ldd	r24, Z+2	; 0x02
    7af4:	93 81       	ldd	r25, Z+3	; 0x03
    7af6:	20 e0       	ldi	r18, 0x00	; 0
    7af8:	30 e0       	ldi	r19, 0x00	; 0
    7afa:	40 e2       	ldi	r20, 0x20	; 32
    7afc:	51 e4       	ldi	r21, 0x41	; 65
    7afe:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7b02:	dc 01       	movw	r26, r24
    7b04:	cb 01       	movw	r24, r22
    7b06:	8e 01       	movw	r16, r28
    7b08:	0b 5a       	subi	r16, 0xAB	; 171
    7b0a:	1e 4f       	sbci	r17, 0xFE	; 254
    7b0c:	bc 01       	movw	r22, r24
    7b0e:	cd 01       	movw	r24, r26
    7b10:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7b14:	dc 01       	movw	r26, r24
    7b16:	cb 01       	movw	r24, r22
    7b18:	f8 01       	movw	r30, r16
    7b1a:	91 83       	std	Z+1, r25	; 0x01
    7b1c:	80 83       	st	Z, r24
    7b1e:	1f c0       	rjmp	.+62     	; 0x7b5e <main+0x154c>
    7b20:	fe 01       	movw	r30, r28
    7b22:	ed 5a       	subi	r30, 0xAD	; 173
    7b24:	fe 4f       	sbci	r31, 0xFE	; 254
    7b26:	80 e9       	ldi	r24, 0x90	; 144
    7b28:	91 e0       	ldi	r25, 0x01	; 1
    7b2a:	91 83       	std	Z+1, r25	; 0x01
    7b2c:	80 83       	st	Z, r24
    7b2e:	fe 01       	movw	r30, r28
    7b30:	ed 5a       	subi	r30, 0xAD	; 173
    7b32:	fe 4f       	sbci	r31, 0xFE	; 254
    7b34:	80 81       	ld	r24, Z
    7b36:	91 81       	ldd	r25, Z+1	; 0x01
    7b38:	01 97       	sbiw	r24, 0x01	; 1
    7b3a:	f1 f7       	brne	.-4      	; 0x7b38 <main+0x1526>
    7b3c:	fe 01       	movw	r30, r28
    7b3e:	ed 5a       	subi	r30, 0xAD	; 173
    7b40:	fe 4f       	sbci	r31, 0xFE	; 254
    7b42:	91 83       	std	Z+1, r25	; 0x01
    7b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b46:	de 01       	movw	r26, r28
    7b48:	ab 5a       	subi	r26, 0xAB	; 171
    7b4a:	be 4f       	sbci	r27, 0xFE	; 254
    7b4c:	fe 01       	movw	r30, r28
    7b4e:	eb 5a       	subi	r30, 0xAB	; 171
    7b50:	fe 4f       	sbci	r31, 0xFE	; 254
    7b52:	80 81       	ld	r24, Z
    7b54:	91 81       	ldd	r25, Z+1	; 0x01
    7b56:	01 97       	sbiw	r24, 0x01	; 1
    7b58:	11 96       	adiw	r26, 0x01	; 1
    7b5a:	9c 93       	st	X, r25
    7b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b5e:	fe 01       	movw	r30, r28
    7b60:	eb 5a       	subi	r30, 0xAB	; 171
    7b62:	fe 4f       	sbci	r31, 0xFE	; 254
    7b64:	80 81       	ld	r24, Z
    7b66:	91 81       	ldd	r25, Z+1	; 0x01
    7b68:	00 97       	sbiw	r24, 0x00	; 0
    7b6a:	d1 f6       	brne	.-76     	; 0x7b20 <main+0x150e>
    7b6c:	27 c0       	rjmp	.+78     	; 0x7bbc <main+0x15aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b6e:	8e 01       	movw	r16, r28
    7b70:	0b 5a       	subi	r16, 0xAB	; 171
    7b72:	1e 4f       	sbci	r17, 0xFE	; 254
    7b74:	fe 01       	movw	r30, r28
    7b76:	e9 5a       	subi	r30, 0xA9	; 169
    7b78:	fe 4f       	sbci	r31, 0xFE	; 254
    7b7a:	60 81       	ld	r22, Z
    7b7c:	71 81       	ldd	r23, Z+1	; 0x01
    7b7e:	82 81       	ldd	r24, Z+2	; 0x02
    7b80:	93 81       	ldd	r25, Z+3	; 0x03
    7b82:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7b86:	dc 01       	movw	r26, r24
    7b88:	cb 01       	movw	r24, r22
    7b8a:	f8 01       	movw	r30, r16
    7b8c:	91 83       	std	Z+1, r25	; 0x01
    7b8e:	80 83       	st	Z, r24
    7b90:	de 01       	movw	r26, r28
    7b92:	af 5a       	subi	r26, 0xAF	; 175
    7b94:	be 4f       	sbci	r27, 0xFE	; 254
    7b96:	fe 01       	movw	r30, r28
    7b98:	eb 5a       	subi	r30, 0xAB	; 171
    7b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b9c:	80 81       	ld	r24, Z
    7b9e:	91 81       	ldd	r25, Z+1	; 0x01
    7ba0:	8d 93       	st	X+, r24
    7ba2:	9c 93       	st	X, r25
    7ba4:	fe 01       	movw	r30, r28
    7ba6:	ef 5a       	subi	r30, 0xAF	; 175
    7ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    7baa:	80 81       	ld	r24, Z
    7bac:	91 81       	ldd	r25, Z+1	; 0x01
    7bae:	01 97       	sbiw	r24, 0x01	; 1
    7bb0:	f1 f7       	brne	.-4      	; 0x7bae <main+0x159c>
    7bb2:	fe 01       	movw	r30, r28
    7bb4:	ef 5a       	subi	r30, 0xAF	; 175
    7bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    7bb8:	91 83       	std	Z+1, r25	; 0x01
    7bba:	80 83       	st	Z, r24
			_delay_ms(20);
			/*go to next line in lcd */
			LCD_SendCommand(NEXT_LINE);
    7bbc:	80 ec       	ldi	r24, 0xC0	; 192
    7bbe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    7bc2:	fe 01       	movw	r30, r28
    7bc4:	e3 5b       	subi	r30, 0xB3	; 179
    7bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    7bc8:	80 e0       	ldi	r24, 0x00	; 0
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	a0 ea       	ldi	r26, 0xA0	; 160
    7bce:	b1 e4       	ldi	r27, 0x41	; 65
    7bd0:	80 83       	st	Z, r24
    7bd2:	91 83       	std	Z+1, r25	; 0x01
    7bd4:	a2 83       	std	Z+2, r26	; 0x02
    7bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7bd8:	8e 01       	movw	r16, r28
    7bda:	07 5b       	subi	r16, 0xB7	; 183
    7bdc:	1e 4f       	sbci	r17, 0xFE	; 254
    7bde:	fe 01       	movw	r30, r28
    7be0:	e3 5b       	subi	r30, 0xB3	; 179
    7be2:	fe 4f       	sbci	r31, 0xFE	; 254
    7be4:	60 81       	ld	r22, Z
    7be6:	71 81       	ldd	r23, Z+1	; 0x01
    7be8:	82 81       	ldd	r24, Z+2	; 0x02
    7bea:	93 81       	ldd	r25, Z+3	; 0x03
    7bec:	20 e0       	ldi	r18, 0x00	; 0
    7bee:	30 e0       	ldi	r19, 0x00	; 0
    7bf0:	4a e7       	ldi	r20, 0x7A	; 122
    7bf2:	55 e4       	ldi	r21, 0x45	; 69
    7bf4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7bf8:	dc 01       	movw	r26, r24
    7bfa:	cb 01       	movw	r24, r22
    7bfc:	f8 01       	movw	r30, r16
    7bfe:	80 83       	st	Z, r24
    7c00:	91 83       	std	Z+1, r25	; 0x01
    7c02:	a2 83       	std	Z+2, r26	; 0x02
    7c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7c06:	fe 01       	movw	r30, r28
    7c08:	e7 5b       	subi	r30, 0xB7	; 183
    7c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    7c0c:	60 81       	ld	r22, Z
    7c0e:	71 81       	ldd	r23, Z+1	; 0x01
    7c10:	82 81       	ldd	r24, Z+2	; 0x02
    7c12:	93 81       	ldd	r25, Z+3	; 0x03
    7c14:	20 e0       	ldi	r18, 0x00	; 0
    7c16:	30 e0       	ldi	r19, 0x00	; 0
    7c18:	40 e8       	ldi	r20, 0x80	; 128
    7c1a:	5f e3       	ldi	r21, 0x3F	; 63
    7c1c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7c20:	88 23       	and	r24, r24
    7c22:	44 f4       	brge	.+16     	; 0x7c34 <main+0x1622>
		__ticks = 1;
    7c24:	fe 01       	movw	r30, r28
    7c26:	e9 5b       	subi	r30, 0xB9	; 185
    7c28:	fe 4f       	sbci	r31, 0xFE	; 254
    7c2a:	81 e0       	ldi	r24, 0x01	; 1
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	91 83       	std	Z+1, r25	; 0x01
    7c30:	80 83       	st	Z, r24
    7c32:	64 c0       	rjmp	.+200    	; 0x7cfc <main+0x16ea>
	else if (__tmp > 65535)
    7c34:	fe 01       	movw	r30, r28
    7c36:	e7 5b       	subi	r30, 0xB7	; 183
    7c38:	fe 4f       	sbci	r31, 0xFE	; 254
    7c3a:	60 81       	ld	r22, Z
    7c3c:	71 81       	ldd	r23, Z+1	; 0x01
    7c3e:	82 81       	ldd	r24, Z+2	; 0x02
    7c40:	93 81       	ldd	r25, Z+3	; 0x03
    7c42:	20 e0       	ldi	r18, 0x00	; 0
    7c44:	3f ef       	ldi	r19, 0xFF	; 255
    7c46:	4f e7       	ldi	r20, 0x7F	; 127
    7c48:	57 e4       	ldi	r21, 0x47	; 71
    7c4a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7c4e:	18 16       	cp	r1, r24
    7c50:	0c f0       	brlt	.+2      	; 0x7c54 <main+0x1642>
    7c52:	43 c0       	rjmp	.+134    	; 0x7cda <main+0x16c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c54:	fe 01       	movw	r30, r28
    7c56:	e3 5b       	subi	r30, 0xB3	; 179
    7c58:	fe 4f       	sbci	r31, 0xFE	; 254
    7c5a:	60 81       	ld	r22, Z
    7c5c:	71 81       	ldd	r23, Z+1	; 0x01
    7c5e:	82 81       	ldd	r24, Z+2	; 0x02
    7c60:	93 81       	ldd	r25, Z+3	; 0x03
    7c62:	20 e0       	ldi	r18, 0x00	; 0
    7c64:	30 e0       	ldi	r19, 0x00	; 0
    7c66:	40 e2       	ldi	r20, 0x20	; 32
    7c68:	51 e4       	ldi	r21, 0x41	; 65
    7c6a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7c6e:	dc 01       	movw	r26, r24
    7c70:	cb 01       	movw	r24, r22
    7c72:	8e 01       	movw	r16, r28
    7c74:	09 5b       	subi	r16, 0xB9	; 185
    7c76:	1e 4f       	sbci	r17, 0xFE	; 254
    7c78:	bc 01       	movw	r22, r24
    7c7a:	cd 01       	movw	r24, r26
    7c7c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7c80:	dc 01       	movw	r26, r24
    7c82:	cb 01       	movw	r24, r22
    7c84:	f8 01       	movw	r30, r16
    7c86:	91 83       	std	Z+1, r25	; 0x01
    7c88:	80 83       	st	Z, r24
    7c8a:	1f c0       	rjmp	.+62     	; 0x7cca <main+0x16b8>
    7c8c:	fe 01       	movw	r30, r28
    7c8e:	eb 5b       	subi	r30, 0xBB	; 187
    7c90:	fe 4f       	sbci	r31, 0xFE	; 254
    7c92:	80 e9       	ldi	r24, 0x90	; 144
    7c94:	91 e0       	ldi	r25, 0x01	; 1
    7c96:	91 83       	std	Z+1, r25	; 0x01
    7c98:	80 83       	st	Z, r24
    7c9a:	fe 01       	movw	r30, r28
    7c9c:	eb 5b       	subi	r30, 0xBB	; 187
    7c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    7ca0:	80 81       	ld	r24, Z
    7ca2:	91 81       	ldd	r25, Z+1	; 0x01
    7ca4:	01 97       	sbiw	r24, 0x01	; 1
    7ca6:	f1 f7       	brne	.-4      	; 0x7ca4 <main+0x1692>
    7ca8:	fe 01       	movw	r30, r28
    7caa:	eb 5b       	subi	r30, 0xBB	; 187
    7cac:	fe 4f       	sbci	r31, 0xFE	; 254
    7cae:	91 83       	std	Z+1, r25	; 0x01
    7cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7cb2:	de 01       	movw	r26, r28
    7cb4:	a9 5b       	subi	r26, 0xB9	; 185
    7cb6:	be 4f       	sbci	r27, 0xFE	; 254
    7cb8:	fe 01       	movw	r30, r28
    7cba:	e9 5b       	subi	r30, 0xB9	; 185
    7cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    7cbe:	80 81       	ld	r24, Z
    7cc0:	91 81       	ldd	r25, Z+1	; 0x01
    7cc2:	01 97       	sbiw	r24, 0x01	; 1
    7cc4:	11 96       	adiw	r26, 0x01	; 1
    7cc6:	9c 93       	st	X, r25
    7cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7cca:	fe 01       	movw	r30, r28
    7ccc:	e9 5b       	subi	r30, 0xB9	; 185
    7cce:	fe 4f       	sbci	r31, 0xFE	; 254
    7cd0:	80 81       	ld	r24, Z
    7cd2:	91 81       	ldd	r25, Z+1	; 0x01
    7cd4:	00 97       	sbiw	r24, 0x00	; 0
    7cd6:	d1 f6       	brne	.-76     	; 0x7c8c <main+0x167a>
    7cd8:	27 c0       	rjmp	.+78     	; 0x7d28 <main+0x1716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7cda:	8e 01       	movw	r16, r28
    7cdc:	09 5b       	subi	r16, 0xB9	; 185
    7cde:	1e 4f       	sbci	r17, 0xFE	; 254
    7ce0:	fe 01       	movw	r30, r28
    7ce2:	e7 5b       	subi	r30, 0xB7	; 183
    7ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    7ce6:	60 81       	ld	r22, Z
    7ce8:	71 81       	ldd	r23, Z+1	; 0x01
    7cea:	82 81       	ldd	r24, Z+2	; 0x02
    7cec:	93 81       	ldd	r25, Z+3	; 0x03
    7cee:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7cf2:	dc 01       	movw	r26, r24
    7cf4:	cb 01       	movw	r24, r22
    7cf6:	f8 01       	movw	r30, r16
    7cf8:	91 83       	std	Z+1, r25	; 0x01
    7cfa:	80 83       	st	Z, r24
    7cfc:	de 01       	movw	r26, r28
    7cfe:	ad 5b       	subi	r26, 0xBD	; 189
    7d00:	be 4f       	sbci	r27, 0xFE	; 254
    7d02:	fe 01       	movw	r30, r28
    7d04:	e9 5b       	subi	r30, 0xB9	; 185
    7d06:	fe 4f       	sbci	r31, 0xFE	; 254
    7d08:	80 81       	ld	r24, Z
    7d0a:	91 81       	ldd	r25, Z+1	; 0x01
    7d0c:	8d 93       	st	X+, r24
    7d0e:	9c 93       	st	X, r25
    7d10:	fe 01       	movw	r30, r28
    7d12:	ed 5b       	subi	r30, 0xBD	; 189
    7d14:	fe 4f       	sbci	r31, 0xFE	; 254
    7d16:	80 81       	ld	r24, Z
    7d18:	91 81       	ldd	r25, Z+1	; 0x01
    7d1a:	01 97       	sbiw	r24, 0x01	; 1
    7d1c:	f1 f7       	brne	.-4      	; 0x7d1a <main+0x1708>
    7d1e:	fe 01       	movw	r30, r28
    7d20:	ed 5b       	subi	r30, 0xBD	; 189
    7d22:	fe 4f       	sbci	r31, 0xFE	; 254
    7d24:	91 83       	std	Z+1, r25	; 0x01
    7d26:	80 83       	st	Z, r24
			_delay_ms(20);
			/*print "it." in lcd */
			LCD_PrintString(it);
    7d28:	ce 01       	movw	r24, r28
    7d2a:	8b 5d       	subi	r24, 0xDB	; 219
    7d2c:	9d 4f       	sbci	r25, 0xFD	; 253
    7d2e:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    7d32:	fe 01       	movw	r30, r28
    7d34:	e1 5c       	subi	r30, 0xC1	; 193
    7d36:	fe 4f       	sbci	r31, 0xFE	; 254
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	90 e0       	ldi	r25, 0x00	; 0
    7d3c:	aa ef       	ldi	r26, 0xFA	; 250
    7d3e:	b3 e4       	ldi	r27, 0x43	; 67
    7d40:	80 83       	st	Z, r24
    7d42:	91 83       	std	Z+1, r25	; 0x01
    7d44:	a2 83       	std	Z+2, r26	; 0x02
    7d46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7d48:	8e 01       	movw	r16, r28
    7d4a:	05 5c       	subi	r16, 0xC5	; 197
    7d4c:	1e 4f       	sbci	r17, 0xFE	; 254
    7d4e:	fe 01       	movw	r30, r28
    7d50:	e1 5c       	subi	r30, 0xC1	; 193
    7d52:	fe 4f       	sbci	r31, 0xFE	; 254
    7d54:	60 81       	ld	r22, Z
    7d56:	71 81       	ldd	r23, Z+1	; 0x01
    7d58:	82 81       	ldd	r24, Z+2	; 0x02
    7d5a:	93 81       	ldd	r25, Z+3	; 0x03
    7d5c:	20 e0       	ldi	r18, 0x00	; 0
    7d5e:	30 e0       	ldi	r19, 0x00	; 0
    7d60:	4a e7       	ldi	r20, 0x7A	; 122
    7d62:	55 e4       	ldi	r21, 0x45	; 69
    7d64:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7d68:	dc 01       	movw	r26, r24
    7d6a:	cb 01       	movw	r24, r22
    7d6c:	f8 01       	movw	r30, r16
    7d6e:	80 83       	st	Z, r24
    7d70:	91 83       	std	Z+1, r25	; 0x01
    7d72:	a2 83       	std	Z+2, r26	; 0x02
    7d74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7d76:	fe 01       	movw	r30, r28
    7d78:	e5 5c       	subi	r30, 0xC5	; 197
    7d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    7d7c:	60 81       	ld	r22, Z
    7d7e:	71 81       	ldd	r23, Z+1	; 0x01
    7d80:	82 81       	ldd	r24, Z+2	; 0x02
    7d82:	93 81       	ldd	r25, Z+3	; 0x03
    7d84:	20 e0       	ldi	r18, 0x00	; 0
    7d86:	30 e0       	ldi	r19, 0x00	; 0
    7d88:	40 e8       	ldi	r20, 0x80	; 128
    7d8a:	5f e3       	ldi	r21, 0x3F	; 63
    7d8c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7d90:	88 23       	and	r24, r24
    7d92:	44 f4       	brge	.+16     	; 0x7da4 <main+0x1792>
		__ticks = 1;
    7d94:	fe 01       	movw	r30, r28
    7d96:	e7 5c       	subi	r30, 0xC7	; 199
    7d98:	fe 4f       	sbci	r31, 0xFE	; 254
    7d9a:	81 e0       	ldi	r24, 0x01	; 1
    7d9c:	90 e0       	ldi	r25, 0x00	; 0
    7d9e:	91 83       	std	Z+1, r25	; 0x01
    7da0:	80 83       	st	Z, r24
    7da2:	64 c0       	rjmp	.+200    	; 0x7e6c <main+0x185a>
	else if (__tmp > 65535)
    7da4:	fe 01       	movw	r30, r28
    7da6:	e5 5c       	subi	r30, 0xC5	; 197
    7da8:	fe 4f       	sbci	r31, 0xFE	; 254
    7daa:	60 81       	ld	r22, Z
    7dac:	71 81       	ldd	r23, Z+1	; 0x01
    7dae:	82 81       	ldd	r24, Z+2	; 0x02
    7db0:	93 81       	ldd	r25, Z+3	; 0x03
    7db2:	20 e0       	ldi	r18, 0x00	; 0
    7db4:	3f ef       	ldi	r19, 0xFF	; 255
    7db6:	4f e7       	ldi	r20, 0x7F	; 127
    7db8:	57 e4       	ldi	r21, 0x47	; 71
    7dba:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7dbe:	18 16       	cp	r1, r24
    7dc0:	0c f0       	brlt	.+2      	; 0x7dc4 <main+0x17b2>
    7dc2:	43 c0       	rjmp	.+134    	; 0x7e4a <main+0x1838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7dc4:	fe 01       	movw	r30, r28
    7dc6:	e1 5c       	subi	r30, 0xC1	; 193
    7dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    7dca:	60 81       	ld	r22, Z
    7dcc:	71 81       	ldd	r23, Z+1	; 0x01
    7dce:	82 81       	ldd	r24, Z+2	; 0x02
    7dd0:	93 81       	ldd	r25, Z+3	; 0x03
    7dd2:	20 e0       	ldi	r18, 0x00	; 0
    7dd4:	30 e0       	ldi	r19, 0x00	; 0
    7dd6:	40 e2       	ldi	r20, 0x20	; 32
    7dd8:	51 e4       	ldi	r21, 0x41	; 65
    7dda:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7dde:	dc 01       	movw	r26, r24
    7de0:	cb 01       	movw	r24, r22
    7de2:	8e 01       	movw	r16, r28
    7de4:	07 5c       	subi	r16, 0xC7	; 199
    7de6:	1e 4f       	sbci	r17, 0xFE	; 254
    7de8:	bc 01       	movw	r22, r24
    7dea:	cd 01       	movw	r24, r26
    7dec:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7df0:	dc 01       	movw	r26, r24
    7df2:	cb 01       	movw	r24, r22
    7df4:	f8 01       	movw	r30, r16
    7df6:	91 83       	std	Z+1, r25	; 0x01
    7df8:	80 83       	st	Z, r24
    7dfa:	1f c0       	rjmp	.+62     	; 0x7e3a <main+0x1828>
    7dfc:	fe 01       	movw	r30, r28
    7dfe:	e9 5c       	subi	r30, 0xC9	; 201
    7e00:	fe 4f       	sbci	r31, 0xFE	; 254
    7e02:	80 e9       	ldi	r24, 0x90	; 144
    7e04:	91 e0       	ldi	r25, 0x01	; 1
    7e06:	91 83       	std	Z+1, r25	; 0x01
    7e08:	80 83       	st	Z, r24
    7e0a:	fe 01       	movw	r30, r28
    7e0c:	e9 5c       	subi	r30, 0xC9	; 201
    7e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    7e10:	80 81       	ld	r24, Z
    7e12:	91 81       	ldd	r25, Z+1	; 0x01
    7e14:	01 97       	sbiw	r24, 0x01	; 1
    7e16:	f1 f7       	brne	.-4      	; 0x7e14 <main+0x1802>
    7e18:	fe 01       	movw	r30, r28
    7e1a:	e9 5c       	subi	r30, 0xC9	; 201
    7e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    7e1e:	91 83       	std	Z+1, r25	; 0x01
    7e20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e22:	de 01       	movw	r26, r28
    7e24:	a7 5c       	subi	r26, 0xC7	; 199
    7e26:	be 4f       	sbci	r27, 0xFE	; 254
    7e28:	fe 01       	movw	r30, r28
    7e2a:	e7 5c       	subi	r30, 0xC7	; 199
    7e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    7e2e:	80 81       	ld	r24, Z
    7e30:	91 81       	ldd	r25, Z+1	; 0x01
    7e32:	01 97       	sbiw	r24, 0x01	; 1
    7e34:	11 96       	adiw	r26, 0x01	; 1
    7e36:	9c 93       	st	X, r25
    7e38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e3a:	fe 01       	movw	r30, r28
    7e3c:	e7 5c       	subi	r30, 0xC7	; 199
    7e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    7e40:	80 81       	ld	r24, Z
    7e42:	91 81       	ldd	r25, Z+1	; 0x01
    7e44:	00 97       	sbiw	r24, 0x00	; 0
    7e46:	d1 f6       	brne	.-76     	; 0x7dfc <main+0x17ea>
    7e48:	28 c0       	rjmp	.+80     	; 0x7e9a <main+0x1888>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e4a:	8e 01       	movw	r16, r28
    7e4c:	07 5c       	subi	r16, 0xC7	; 199
    7e4e:	1e 4f       	sbci	r17, 0xFE	; 254
    7e50:	fe 01       	movw	r30, r28
    7e52:	e5 5c       	subi	r30, 0xC5	; 197
    7e54:	fe 4f       	sbci	r31, 0xFE	; 254
    7e56:	60 81       	ld	r22, Z
    7e58:	71 81       	ldd	r23, Z+1	; 0x01
    7e5a:	82 81       	ldd	r24, Z+2	; 0x02
    7e5c:	93 81       	ldd	r25, Z+3	; 0x03
    7e5e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7e62:	dc 01       	movw	r26, r24
    7e64:	cb 01       	movw	r24, r22
    7e66:	f8 01       	movw	r30, r16
    7e68:	91 83       	std	Z+1, r25	; 0x01
    7e6a:	80 83       	st	Z, r24
    7e6c:	de 01       	movw	r26, r28
    7e6e:	ab 5c       	subi	r26, 0xCB	; 203
    7e70:	be 4f       	sbci	r27, 0xFE	; 254
    7e72:	fe 01       	movw	r30, r28
    7e74:	e7 5c       	subi	r30, 0xC7	; 199
    7e76:	fe 4f       	sbci	r31, 0xFE	; 254
    7e78:	80 81       	ld	r24, Z
    7e7a:	91 81       	ldd	r25, Z+1	; 0x01
    7e7c:	11 96       	adiw	r26, 0x01	; 1
    7e7e:	9c 93       	st	X, r25
    7e80:	8e 93       	st	-X, r24
    7e82:	fe 01       	movw	r30, r28
    7e84:	eb 5c       	subi	r30, 0xCB	; 203
    7e86:	fe 4f       	sbci	r31, 0xFE	; 254
    7e88:	80 81       	ld	r24, Z
    7e8a:	91 81       	ldd	r25, Z+1	; 0x01
    7e8c:	01 97       	sbiw	r24, 0x01	; 1
    7e8e:	f1 f7       	brne	.-4      	; 0x7e8c <main+0x187a>
    7e90:	fe 01       	movw	r30, r28
    7e92:	eb 5c       	subi	r30, 0xCB	; 203
    7e94:	fe 4f       	sbci	r31, 0xFE	; 254
    7e96:	91 83       	std	Z+1, r25	; 0x01
    7e98:	80 83       	st	Z, r24
			_delay_ms(500);

			/* for loop to confirm password */
			for(i=0 ; i<5 ; i++)
    7e9a:	fe 01       	movw	r30, r28
    7e9c:	ea 53       	subi	r30, 0x3A	; 58
    7e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    7ea0:	10 82       	st	Z, r1
    7ea2:	9e c1       	rjmp	.+828    	; 0x81e0 <main+0x1bce>
			{
				/*check for temperature */
				check();
    7ea4:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
				num2[i] = get_Value();
    7ea8:	fe 01       	movw	r30, r28
    7eaa:	ea 53       	subi	r30, 0x3A	; 58
    7eac:	fe 4f       	sbci	r31, 0xFE	; 254
    7eae:	80 81       	ld	r24, Z
    7eb0:	08 2f       	mov	r16, r24
    7eb2:	10 e0       	ldi	r17, 0x00	; 0
    7eb4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <get_Value>
    7eb8:	28 2f       	mov	r18, r24
    7eba:	ce 01       	movw	r24, r28
    7ebc:	83 59       	subi	r24, 0x93	; 147
    7ebe:	9d 4f       	sbci	r25, 0xFD	; 253
    7ec0:	fc 01       	movw	r30, r24
    7ec2:	e0 0f       	add	r30, r16
    7ec4:	f1 1f       	adc	r31, r17
    7ec6:	20 83       	st	Z, r18
				if(i==0)
    7ec8:	fe 01       	movw	r30, r28
    7eca:	ea 53       	subi	r30, 0x3A	; 58
    7ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    7ece:	80 81       	ld	r24, Z
    7ed0:	88 23       	and	r24, r24
    7ed2:	21 f4       	brne	.+8      	; 0x7edc <main+0x18ca>
					/*delete lcd content */
					LCD_SendCommand(DISPLAY_CLEAR);
    7ed4:	81 e0       	ldi	r24, 0x01	; 1
    7ed6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    7eda:	03 c0       	rjmp	.+6      	; 0x7ee2 <main+0x18d0>
				else
					LCD_SendCommand(CURSOR_SHIFT_RIGHT);
    7edc:	84 e1       	ldi	r24, 0x14	; 20
    7ede:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    7ee2:	fe 01       	movw	r30, r28
    7ee4:	ef 5c       	subi	r30, 0xCF	; 207
    7ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    7ee8:	80 e0       	ldi	r24, 0x00	; 0
    7eea:	90 e0       	ldi	r25, 0x00	; 0
    7eec:	a0 ea       	ldi	r26, 0xA0	; 160
    7eee:	b1 e4       	ldi	r27, 0x41	; 65
    7ef0:	80 83       	st	Z, r24
    7ef2:	91 83       	std	Z+1, r25	; 0x01
    7ef4:	a2 83       	std	Z+2, r26	; 0x02
    7ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ef8:	8e 01       	movw	r16, r28
    7efa:	03 5d       	subi	r16, 0xD3	; 211
    7efc:	1e 4f       	sbci	r17, 0xFE	; 254
    7efe:	fe 01       	movw	r30, r28
    7f00:	ef 5c       	subi	r30, 0xCF	; 207
    7f02:	fe 4f       	sbci	r31, 0xFE	; 254
    7f04:	60 81       	ld	r22, Z
    7f06:	71 81       	ldd	r23, Z+1	; 0x01
    7f08:	82 81       	ldd	r24, Z+2	; 0x02
    7f0a:	93 81       	ldd	r25, Z+3	; 0x03
    7f0c:	20 e0       	ldi	r18, 0x00	; 0
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	4a e7       	ldi	r20, 0x7A	; 122
    7f12:	55 e4       	ldi	r21, 0x45	; 69
    7f14:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7f18:	dc 01       	movw	r26, r24
    7f1a:	cb 01       	movw	r24, r22
    7f1c:	f8 01       	movw	r30, r16
    7f1e:	80 83       	st	Z, r24
    7f20:	91 83       	std	Z+1, r25	; 0x01
    7f22:	a2 83       	std	Z+2, r26	; 0x02
    7f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7f26:	fe 01       	movw	r30, r28
    7f28:	e3 5d       	subi	r30, 0xD3	; 211
    7f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    7f2c:	60 81       	ld	r22, Z
    7f2e:	71 81       	ldd	r23, Z+1	; 0x01
    7f30:	82 81       	ldd	r24, Z+2	; 0x02
    7f32:	93 81       	ldd	r25, Z+3	; 0x03
    7f34:	20 e0       	ldi	r18, 0x00	; 0
    7f36:	30 e0       	ldi	r19, 0x00	; 0
    7f38:	40 e8       	ldi	r20, 0x80	; 128
    7f3a:	5f e3       	ldi	r21, 0x3F	; 63
    7f3c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    7f40:	88 23       	and	r24, r24
    7f42:	44 f4       	brge	.+16     	; 0x7f54 <main+0x1942>
		__ticks = 1;
    7f44:	fe 01       	movw	r30, r28
    7f46:	e5 5d       	subi	r30, 0xD5	; 213
    7f48:	fe 4f       	sbci	r31, 0xFE	; 254
    7f4a:	81 e0       	ldi	r24, 0x01	; 1
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	91 83       	std	Z+1, r25	; 0x01
    7f50:	80 83       	st	Z, r24
    7f52:	64 c0       	rjmp	.+200    	; 0x801c <main+0x1a0a>
	else if (__tmp > 65535)
    7f54:	fe 01       	movw	r30, r28
    7f56:	e3 5d       	subi	r30, 0xD3	; 211
    7f58:	fe 4f       	sbci	r31, 0xFE	; 254
    7f5a:	60 81       	ld	r22, Z
    7f5c:	71 81       	ldd	r23, Z+1	; 0x01
    7f5e:	82 81       	ldd	r24, Z+2	; 0x02
    7f60:	93 81       	ldd	r25, Z+3	; 0x03
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	3f ef       	ldi	r19, 0xFF	; 255
    7f66:	4f e7       	ldi	r20, 0x7F	; 127
    7f68:	57 e4       	ldi	r21, 0x47	; 71
    7f6a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    7f6e:	18 16       	cp	r1, r24
    7f70:	0c f0       	brlt	.+2      	; 0x7f74 <main+0x1962>
    7f72:	43 c0       	rjmp	.+134    	; 0x7ffa <main+0x19e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f74:	fe 01       	movw	r30, r28
    7f76:	ef 5c       	subi	r30, 0xCF	; 207
    7f78:	fe 4f       	sbci	r31, 0xFE	; 254
    7f7a:	60 81       	ld	r22, Z
    7f7c:	71 81       	ldd	r23, Z+1	; 0x01
    7f7e:	82 81       	ldd	r24, Z+2	; 0x02
    7f80:	93 81       	ldd	r25, Z+3	; 0x03
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	30 e0       	ldi	r19, 0x00	; 0
    7f86:	40 e2       	ldi	r20, 0x20	; 32
    7f88:	51 e4       	ldi	r21, 0x41	; 65
    7f8a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    7f8e:	dc 01       	movw	r26, r24
    7f90:	cb 01       	movw	r24, r22
    7f92:	8e 01       	movw	r16, r28
    7f94:	05 5d       	subi	r16, 0xD5	; 213
    7f96:	1e 4f       	sbci	r17, 0xFE	; 254
    7f98:	bc 01       	movw	r22, r24
    7f9a:	cd 01       	movw	r24, r26
    7f9c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    7fa0:	dc 01       	movw	r26, r24
    7fa2:	cb 01       	movw	r24, r22
    7fa4:	f8 01       	movw	r30, r16
    7fa6:	91 83       	std	Z+1, r25	; 0x01
    7fa8:	80 83       	st	Z, r24
    7faa:	1f c0       	rjmp	.+62     	; 0x7fea <main+0x19d8>
    7fac:	fe 01       	movw	r30, r28
    7fae:	e7 5d       	subi	r30, 0xD7	; 215
    7fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    7fb2:	80 e9       	ldi	r24, 0x90	; 144
    7fb4:	91 e0       	ldi	r25, 0x01	; 1
    7fb6:	91 83       	std	Z+1, r25	; 0x01
    7fb8:	80 83       	st	Z, r24
    7fba:	fe 01       	movw	r30, r28
    7fbc:	e7 5d       	subi	r30, 0xD7	; 215
    7fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    7fc0:	80 81       	ld	r24, Z
    7fc2:	91 81       	ldd	r25, Z+1	; 0x01
    7fc4:	01 97       	sbiw	r24, 0x01	; 1
    7fc6:	f1 f7       	brne	.-4      	; 0x7fc4 <main+0x19b2>
    7fc8:	fe 01       	movw	r30, r28
    7fca:	e7 5d       	subi	r30, 0xD7	; 215
    7fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    7fce:	91 83       	std	Z+1, r25	; 0x01
    7fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7fd2:	de 01       	movw	r26, r28
    7fd4:	a5 5d       	subi	r26, 0xD5	; 213
    7fd6:	be 4f       	sbci	r27, 0xFE	; 254
    7fd8:	fe 01       	movw	r30, r28
    7fda:	e5 5d       	subi	r30, 0xD5	; 213
    7fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    7fde:	80 81       	ld	r24, Z
    7fe0:	91 81       	ldd	r25, Z+1	; 0x01
    7fe2:	01 97       	sbiw	r24, 0x01	; 1
    7fe4:	11 96       	adiw	r26, 0x01	; 1
    7fe6:	9c 93       	st	X, r25
    7fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7fea:	fe 01       	movw	r30, r28
    7fec:	e5 5d       	subi	r30, 0xD5	; 213
    7fee:	fe 4f       	sbci	r31, 0xFE	; 254
    7ff0:	80 81       	ld	r24, Z
    7ff2:	91 81       	ldd	r25, Z+1	; 0x01
    7ff4:	00 97       	sbiw	r24, 0x00	; 0
    7ff6:	d1 f6       	brne	.-76     	; 0x7fac <main+0x199a>
    7ff8:	27 c0       	rjmp	.+78     	; 0x8048 <main+0x1a36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ffa:	8e 01       	movw	r16, r28
    7ffc:	05 5d       	subi	r16, 0xD5	; 213
    7ffe:	1e 4f       	sbci	r17, 0xFE	; 254
    8000:	fe 01       	movw	r30, r28
    8002:	e3 5d       	subi	r30, 0xD3	; 211
    8004:	fe 4f       	sbci	r31, 0xFE	; 254
    8006:	60 81       	ld	r22, Z
    8008:	71 81       	ldd	r23, Z+1	; 0x01
    800a:	82 81       	ldd	r24, Z+2	; 0x02
    800c:	93 81       	ldd	r25, Z+3	; 0x03
    800e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8012:	dc 01       	movw	r26, r24
    8014:	cb 01       	movw	r24, r22
    8016:	f8 01       	movw	r30, r16
    8018:	91 83       	std	Z+1, r25	; 0x01
    801a:	80 83       	st	Z, r24
    801c:	de 01       	movw	r26, r28
    801e:	a9 5d       	subi	r26, 0xD9	; 217
    8020:	be 4f       	sbci	r27, 0xFE	; 254
    8022:	fe 01       	movw	r30, r28
    8024:	e5 5d       	subi	r30, 0xD5	; 213
    8026:	fe 4f       	sbci	r31, 0xFE	; 254
    8028:	80 81       	ld	r24, Z
    802a:	91 81       	ldd	r25, Z+1	; 0x01
    802c:	8d 93       	st	X+, r24
    802e:	9c 93       	st	X, r25
    8030:	fe 01       	movw	r30, r28
    8032:	e9 5d       	subi	r30, 0xD9	; 217
    8034:	fe 4f       	sbci	r31, 0xFE	; 254
    8036:	80 81       	ld	r24, Z
    8038:	91 81       	ldd	r25, Z+1	; 0x01
    803a:	01 97       	sbiw	r24, 0x01	; 1
    803c:	f1 f7       	brne	.-4      	; 0x803a <main+0x1a28>
    803e:	fe 01       	movw	r30, r28
    8040:	e9 5d       	subi	r30, 0xD9	; 217
    8042:	fe 4f       	sbci	r31, 0xFE	; 254
    8044:	91 83       	std	Z+1, r25	; 0x01
    8046:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_PrintCharacter(num2[i] + 48);
    8048:	fe 01       	movw	r30, r28
    804a:	ea 53       	subi	r30, 0x3A	; 58
    804c:	fe 4f       	sbci	r31, 0xFE	; 254
    804e:	80 81       	ld	r24, Z
    8050:	28 2f       	mov	r18, r24
    8052:	30 e0       	ldi	r19, 0x00	; 0
    8054:	ce 01       	movw	r24, r28
    8056:	83 59       	subi	r24, 0x93	; 147
    8058:	9d 4f       	sbci	r25, 0xFD	; 253
    805a:	fc 01       	movw	r30, r24
    805c:	e2 0f       	add	r30, r18
    805e:	f3 1f       	adc	r31, r19
    8060:	80 81       	ld	r24, Z
    8062:	80 5d       	subi	r24, 0xD0	; 208
    8064:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD_PrintCharacter>
    8068:	fe 01       	movw	r30, r28
    806a:	ed 5d       	subi	r30, 0xDD	; 221
    806c:	fe 4f       	sbci	r31, 0xFE	; 254
    806e:	80 e0       	ldi	r24, 0x00	; 0
    8070:	90 e0       	ldi	r25, 0x00	; 0
    8072:	aa ef       	ldi	r26, 0xFA	; 250
    8074:	b3 e4       	ldi	r27, 0x43	; 67
    8076:	80 83       	st	Z, r24
    8078:	91 83       	std	Z+1, r25	; 0x01
    807a:	a2 83       	std	Z+2, r26	; 0x02
    807c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    807e:	8e 01       	movw	r16, r28
    8080:	01 5e       	subi	r16, 0xE1	; 225
    8082:	1e 4f       	sbci	r17, 0xFE	; 254
    8084:	fe 01       	movw	r30, r28
    8086:	ed 5d       	subi	r30, 0xDD	; 221
    8088:	fe 4f       	sbci	r31, 0xFE	; 254
    808a:	60 81       	ld	r22, Z
    808c:	71 81       	ldd	r23, Z+1	; 0x01
    808e:	82 81       	ldd	r24, Z+2	; 0x02
    8090:	93 81       	ldd	r25, Z+3	; 0x03
    8092:	20 e0       	ldi	r18, 0x00	; 0
    8094:	30 e0       	ldi	r19, 0x00	; 0
    8096:	4a e7       	ldi	r20, 0x7A	; 122
    8098:	55 e4       	ldi	r21, 0x45	; 69
    809a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    809e:	dc 01       	movw	r26, r24
    80a0:	cb 01       	movw	r24, r22
    80a2:	f8 01       	movw	r30, r16
    80a4:	80 83       	st	Z, r24
    80a6:	91 83       	std	Z+1, r25	; 0x01
    80a8:	a2 83       	std	Z+2, r26	; 0x02
    80aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    80ac:	fe 01       	movw	r30, r28
    80ae:	e1 5e       	subi	r30, 0xE1	; 225
    80b0:	fe 4f       	sbci	r31, 0xFE	; 254
    80b2:	60 81       	ld	r22, Z
    80b4:	71 81       	ldd	r23, Z+1	; 0x01
    80b6:	82 81       	ldd	r24, Z+2	; 0x02
    80b8:	93 81       	ldd	r25, Z+3	; 0x03
    80ba:	20 e0       	ldi	r18, 0x00	; 0
    80bc:	30 e0       	ldi	r19, 0x00	; 0
    80be:	40 e8       	ldi	r20, 0x80	; 128
    80c0:	5f e3       	ldi	r21, 0x3F	; 63
    80c2:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    80c6:	88 23       	and	r24, r24
    80c8:	44 f4       	brge	.+16     	; 0x80da <main+0x1ac8>
		__ticks = 1;
    80ca:	fe 01       	movw	r30, r28
    80cc:	e3 5e       	subi	r30, 0xE3	; 227
    80ce:	fe 4f       	sbci	r31, 0xFE	; 254
    80d0:	81 e0       	ldi	r24, 0x01	; 1
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	91 83       	std	Z+1, r25	; 0x01
    80d6:	80 83       	st	Z, r24
    80d8:	64 c0       	rjmp	.+200    	; 0x81a2 <main+0x1b90>
	else if (__tmp > 65535)
    80da:	fe 01       	movw	r30, r28
    80dc:	e1 5e       	subi	r30, 0xE1	; 225
    80de:	fe 4f       	sbci	r31, 0xFE	; 254
    80e0:	60 81       	ld	r22, Z
    80e2:	71 81       	ldd	r23, Z+1	; 0x01
    80e4:	82 81       	ldd	r24, Z+2	; 0x02
    80e6:	93 81       	ldd	r25, Z+3	; 0x03
    80e8:	20 e0       	ldi	r18, 0x00	; 0
    80ea:	3f ef       	ldi	r19, 0xFF	; 255
    80ec:	4f e7       	ldi	r20, 0x7F	; 127
    80ee:	57 e4       	ldi	r21, 0x47	; 71
    80f0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    80f4:	18 16       	cp	r1, r24
    80f6:	0c f0       	brlt	.+2      	; 0x80fa <main+0x1ae8>
    80f8:	43 c0       	rjmp	.+134    	; 0x8180 <main+0x1b6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80fa:	fe 01       	movw	r30, r28
    80fc:	ed 5d       	subi	r30, 0xDD	; 221
    80fe:	fe 4f       	sbci	r31, 0xFE	; 254
    8100:	60 81       	ld	r22, Z
    8102:	71 81       	ldd	r23, Z+1	; 0x01
    8104:	82 81       	ldd	r24, Z+2	; 0x02
    8106:	93 81       	ldd	r25, Z+3	; 0x03
    8108:	20 e0       	ldi	r18, 0x00	; 0
    810a:	30 e0       	ldi	r19, 0x00	; 0
    810c:	40 e2       	ldi	r20, 0x20	; 32
    810e:	51 e4       	ldi	r21, 0x41	; 65
    8110:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8114:	dc 01       	movw	r26, r24
    8116:	cb 01       	movw	r24, r22
    8118:	8e 01       	movw	r16, r28
    811a:	03 5e       	subi	r16, 0xE3	; 227
    811c:	1e 4f       	sbci	r17, 0xFE	; 254
    811e:	bc 01       	movw	r22, r24
    8120:	cd 01       	movw	r24, r26
    8122:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8126:	dc 01       	movw	r26, r24
    8128:	cb 01       	movw	r24, r22
    812a:	f8 01       	movw	r30, r16
    812c:	91 83       	std	Z+1, r25	; 0x01
    812e:	80 83       	st	Z, r24
    8130:	1f c0       	rjmp	.+62     	; 0x8170 <main+0x1b5e>
    8132:	fe 01       	movw	r30, r28
    8134:	e5 5e       	subi	r30, 0xE5	; 229
    8136:	fe 4f       	sbci	r31, 0xFE	; 254
    8138:	80 e9       	ldi	r24, 0x90	; 144
    813a:	91 e0       	ldi	r25, 0x01	; 1
    813c:	91 83       	std	Z+1, r25	; 0x01
    813e:	80 83       	st	Z, r24
    8140:	fe 01       	movw	r30, r28
    8142:	e5 5e       	subi	r30, 0xE5	; 229
    8144:	fe 4f       	sbci	r31, 0xFE	; 254
    8146:	80 81       	ld	r24, Z
    8148:	91 81       	ldd	r25, Z+1	; 0x01
    814a:	01 97       	sbiw	r24, 0x01	; 1
    814c:	f1 f7       	brne	.-4      	; 0x814a <main+0x1b38>
    814e:	fe 01       	movw	r30, r28
    8150:	e5 5e       	subi	r30, 0xE5	; 229
    8152:	fe 4f       	sbci	r31, 0xFE	; 254
    8154:	91 83       	std	Z+1, r25	; 0x01
    8156:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8158:	de 01       	movw	r26, r28
    815a:	a3 5e       	subi	r26, 0xE3	; 227
    815c:	be 4f       	sbci	r27, 0xFE	; 254
    815e:	fe 01       	movw	r30, r28
    8160:	e3 5e       	subi	r30, 0xE3	; 227
    8162:	fe 4f       	sbci	r31, 0xFE	; 254
    8164:	80 81       	ld	r24, Z
    8166:	91 81       	ldd	r25, Z+1	; 0x01
    8168:	01 97       	sbiw	r24, 0x01	; 1
    816a:	11 96       	adiw	r26, 0x01	; 1
    816c:	9c 93       	st	X, r25
    816e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8170:	fe 01       	movw	r30, r28
    8172:	e3 5e       	subi	r30, 0xE3	; 227
    8174:	fe 4f       	sbci	r31, 0xFE	; 254
    8176:	80 81       	ld	r24, Z
    8178:	91 81       	ldd	r25, Z+1	; 0x01
    817a:	00 97       	sbiw	r24, 0x00	; 0
    817c:	d1 f6       	brne	.-76     	; 0x8132 <main+0x1b20>
    817e:	27 c0       	rjmp	.+78     	; 0x81ce <main+0x1bbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8180:	8e 01       	movw	r16, r28
    8182:	03 5e       	subi	r16, 0xE3	; 227
    8184:	1e 4f       	sbci	r17, 0xFE	; 254
    8186:	fe 01       	movw	r30, r28
    8188:	e1 5e       	subi	r30, 0xE1	; 225
    818a:	fe 4f       	sbci	r31, 0xFE	; 254
    818c:	60 81       	ld	r22, Z
    818e:	71 81       	ldd	r23, Z+1	; 0x01
    8190:	82 81       	ldd	r24, Z+2	; 0x02
    8192:	93 81       	ldd	r25, Z+3	; 0x03
    8194:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8198:	dc 01       	movw	r26, r24
    819a:	cb 01       	movw	r24, r22
    819c:	f8 01       	movw	r30, r16
    819e:	91 83       	std	Z+1, r25	; 0x01
    81a0:	80 83       	st	Z, r24
    81a2:	de 01       	movw	r26, r28
    81a4:	a7 5e       	subi	r26, 0xE7	; 231
    81a6:	be 4f       	sbci	r27, 0xFE	; 254
    81a8:	fe 01       	movw	r30, r28
    81aa:	e3 5e       	subi	r30, 0xE3	; 227
    81ac:	fe 4f       	sbci	r31, 0xFE	; 254
    81ae:	80 81       	ld	r24, Z
    81b0:	91 81       	ldd	r25, Z+1	; 0x01
    81b2:	8d 93       	st	X+, r24
    81b4:	9c 93       	st	X, r25
    81b6:	fe 01       	movw	r30, r28
    81b8:	e7 5e       	subi	r30, 0xE7	; 231
    81ba:	fe 4f       	sbci	r31, 0xFE	; 254
    81bc:	80 81       	ld	r24, Z
    81be:	91 81       	ldd	r25, Z+1	; 0x01
    81c0:	01 97       	sbiw	r24, 0x01	; 1
    81c2:	f1 f7       	brne	.-4      	; 0x81c0 <main+0x1bae>
    81c4:	fe 01       	movw	r30, r28
    81c6:	e7 5e       	subi	r30, 0xE7	; 231
    81c8:	fe 4f       	sbci	r31, 0xFE	; 254
    81ca:	91 83       	std	Z+1, r25	; 0x01
    81cc:	80 83       	st	Z, r24
			/*print "it." in lcd */
			LCD_PrintString(it);
			_delay_ms(500);

			/* for loop to confirm password */
			for(i=0 ; i<5 ; i++)
    81ce:	de 01       	movw	r26, r28
    81d0:	aa 53       	subi	r26, 0x3A	; 58
    81d2:	be 4f       	sbci	r27, 0xFE	; 254
    81d4:	fe 01       	movw	r30, r28
    81d6:	ea 53       	subi	r30, 0x3A	; 58
    81d8:	fe 4f       	sbci	r31, 0xFE	; 254
    81da:	80 81       	ld	r24, Z
    81dc:	8f 5f       	subi	r24, 0xFF	; 255
    81de:	8c 93       	st	X, r24
    81e0:	fe 01       	movw	r30, r28
    81e2:	ea 53       	subi	r30, 0x3A	; 58
    81e4:	fe 4f       	sbci	r31, 0xFE	; 254
    81e6:	80 81       	ld	r24, Z
    81e8:	85 30       	cpi	r24, 0x05	; 5
    81ea:	08 f4       	brcc	.+2      	; 0x81ee <main+0x1bdc>
    81ec:	5b ce       	rjmp	.-842    	; 0x7ea4 <main+0x1892>
				LCD_PrintCharacter(num2[i] + 48);
				_delay_ms(500);
			}

           /* for loop to check for mismatch */
			for(i=0 ; i<5 ; i++)
    81ee:	fe 01       	movw	r30, r28
    81f0:	ea 53       	subi	r30, 0x3A	; 58
    81f2:	fe 4f       	sbci	r31, 0xFE	; 254
    81f4:	10 82       	st	Z, r1
    81f6:	a1 c1       	rjmp	.+834    	; 0x853a <main+0x1f28>
			{
				if(num1[i] != num2[i])
    81f8:	fe 01       	movw	r30, r28
    81fa:	ea 53       	subi	r30, 0x3A	; 58
    81fc:	fe 4f       	sbci	r31, 0xFE	; 254
    81fe:	80 81       	ld	r24, Z
    8200:	28 2f       	mov	r18, r24
    8202:	30 e0       	ldi	r19, 0x00	; 0
    8204:	ce 01       	movw	r24, r28
    8206:	89 59       	subi	r24, 0x99	; 153
    8208:	9d 4f       	sbci	r25, 0xFD	; 253
    820a:	fc 01       	movw	r30, r24
    820c:	e2 0f       	add	r30, r18
    820e:	f3 1f       	adc	r31, r19
    8210:	40 81       	ld	r20, Z
    8212:	fe 01       	movw	r30, r28
    8214:	ea 53       	subi	r30, 0x3A	; 58
    8216:	fe 4f       	sbci	r31, 0xFE	; 254
    8218:	80 81       	ld	r24, Z
    821a:	28 2f       	mov	r18, r24
    821c:	30 e0       	ldi	r19, 0x00	; 0
    821e:	ce 01       	movw	r24, r28
    8220:	83 59       	subi	r24, 0x93	; 147
    8222:	9d 4f       	sbci	r25, 0xFD	; 253
    8224:	fc 01       	movw	r30, r24
    8226:	e2 0f       	add	r30, r18
    8228:	f3 1f       	adc	r31, r19
    822a:	80 81       	ld	r24, Z
    822c:	48 17       	cp	r20, r24
    822e:	09 f4       	brne	.+2      	; 0x8232 <main+0x1c20>
    8230:	76 c1       	rjmp	.+748    	; 0x851e <main+0x1f0c>
				{
					/*check for temperature */
					check();
    8232:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
					/*delete lcd content */
					LCD_SendCommand(DISPLAY_CLEAR);
    8236:	81 e0       	ldi	r24, 0x01	; 1
    8238:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    823c:	fe 01       	movw	r30, r28
    823e:	eb 5e       	subi	r30, 0xEB	; 235
    8240:	fe 4f       	sbci	r31, 0xFE	; 254
    8242:	80 e0       	ldi	r24, 0x00	; 0
    8244:	90 e0       	ldi	r25, 0x00	; 0
    8246:	a0 ea       	ldi	r26, 0xA0	; 160
    8248:	b1 e4       	ldi	r27, 0x41	; 65
    824a:	80 83       	st	Z, r24
    824c:	91 83       	std	Z+1, r25	; 0x01
    824e:	a2 83       	std	Z+2, r26	; 0x02
    8250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8252:	8e 01       	movw	r16, r28
    8254:	0f 5e       	subi	r16, 0xEF	; 239
    8256:	1e 4f       	sbci	r17, 0xFE	; 254
    8258:	fe 01       	movw	r30, r28
    825a:	eb 5e       	subi	r30, 0xEB	; 235
    825c:	fe 4f       	sbci	r31, 0xFE	; 254
    825e:	60 81       	ld	r22, Z
    8260:	71 81       	ldd	r23, Z+1	; 0x01
    8262:	82 81       	ldd	r24, Z+2	; 0x02
    8264:	93 81       	ldd	r25, Z+3	; 0x03
    8266:	20 e0       	ldi	r18, 0x00	; 0
    8268:	30 e0       	ldi	r19, 0x00	; 0
    826a:	4a e7       	ldi	r20, 0x7A	; 122
    826c:	55 e4       	ldi	r21, 0x45	; 69
    826e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8272:	dc 01       	movw	r26, r24
    8274:	cb 01       	movw	r24, r22
    8276:	f8 01       	movw	r30, r16
    8278:	80 83       	st	Z, r24
    827a:	91 83       	std	Z+1, r25	; 0x01
    827c:	a2 83       	std	Z+2, r26	; 0x02
    827e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8280:	fe 01       	movw	r30, r28
    8282:	ef 5e       	subi	r30, 0xEF	; 239
    8284:	fe 4f       	sbci	r31, 0xFE	; 254
    8286:	60 81       	ld	r22, Z
    8288:	71 81       	ldd	r23, Z+1	; 0x01
    828a:	82 81       	ldd	r24, Z+2	; 0x02
    828c:	93 81       	ldd	r25, Z+3	; 0x03
    828e:	20 e0       	ldi	r18, 0x00	; 0
    8290:	30 e0       	ldi	r19, 0x00	; 0
    8292:	40 e8       	ldi	r20, 0x80	; 128
    8294:	5f e3       	ldi	r21, 0x3F	; 63
    8296:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    829a:	88 23       	and	r24, r24
    829c:	44 f4       	brge	.+16     	; 0x82ae <main+0x1c9c>
		__ticks = 1;
    829e:	fe 01       	movw	r30, r28
    82a0:	e1 5f       	subi	r30, 0xF1	; 241
    82a2:	fe 4f       	sbci	r31, 0xFE	; 254
    82a4:	81 e0       	ldi	r24, 0x01	; 1
    82a6:	90 e0       	ldi	r25, 0x00	; 0
    82a8:	91 83       	std	Z+1, r25	; 0x01
    82aa:	80 83       	st	Z, r24
    82ac:	64 c0       	rjmp	.+200    	; 0x8376 <main+0x1d64>
	else if (__tmp > 65535)
    82ae:	fe 01       	movw	r30, r28
    82b0:	ef 5e       	subi	r30, 0xEF	; 239
    82b2:	fe 4f       	sbci	r31, 0xFE	; 254
    82b4:	60 81       	ld	r22, Z
    82b6:	71 81       	ldd	r23, Z+1	; 0x01
    82b8:	82 81       	ldd	r24, Z+2	; 0x02
    82ba:	93 81       	ldd	r25, Z+3	; 0x03
    82bc:	20 e0       	ldi	r18, 0x00	; 0
    82be:	3f ef       	ldi	r19, 0xFF	; 255
    82c0:	4f e7       	ldi	r20, 0x7F	; 127
    82c2:	57 e4       	ldi	r21, 0x47	; 71
    82c4:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    82c8:	18 16       	cp	r1, r24
    82ca:	0c f0       	brlt	.+2      	; 0x82ce <main+0x1cbc>
    82cc:	43 c0       	rjmp	.+134    	; 0x8354 <main+0x1d42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    82ce:	fe 01       	movw	r30, r28
    82d0:	eb 5e       	subi	r30, 0xEB	; 235
    82d2:	fe 4f       	sbci	r31, 0xFE	; 254
    82d4:	60 81       	ld	r22, Z
    82d6:	71 81       	ldd	r23, Z+1	; 0x01
    82d8:	82 81       	ldd	r24, Z+2	; 0x02
    82da:	93 81       	ldd	r25, Z+3	; 0x03
    82dc:	20 e0       	ldi	r18, 0x00	; 0
    82de:	30 e0       	ldi	r19, 0x00	; 0
    82e0:	40 e2       	ldi	r20, 0x20	; 32
    82e2:	51 e4       	ldi	r21, 0x41	; 65
    82e4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    82e8:	dc 01       	movw	r26, r24
    82ea:	cb 01       	movw	r24, r22
    82ec:	8e 01       	movw	r16, r28
    82ee:	01 5f       	subi	r16, 0xF1	; 241
    82f0:	1e 4f       	sbci	r17, 0xFE	; 254
    82f2:	bc 01       	movw	r22, r24
    82f4:	cd 01       	movw	r24, r26
    82f6:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    82fa:	dc 01       	movw	r26, r24
    82fc:	cb 01       	movw	r24, r22
    82fe:	f8 01       	movw	r30, r16
    8300:	91 83       	std	Z+1, r25	; 0x01
    8302:	80 83       	st	Z, r24
    8304:	1f c0       	rjmp	.+62     	; 0x8344 <main+0x1d32>
    8306:	fe 01       	movw	r30, r28
    8308:	e3 5f       	subi	r30, 0xF3	; 243
    830a:	fe 4f       	sbci	r31, 0xFE	; 254
    830c:	80 e9       	ldi	r24, 0x90	; 144
    830e:	91 e0       	ldi	r25, 0x01	; 1
    8310:	91 83       	std	Z+1, r25	; 0x01
    8312:	80 83       	st	Z, r24
    8314:	fe 01       	movw	r30, r28
    8316:	e3 5f       	subi	r30, 0xF3	; 243
    8318:	fe 4f       	sbci	r31, 0xFE	; 254
    831a:	80 81       	ld	r24, Z
    831c:	91 81       	ldd	r25, Z+1	; 0x01
    831e:	01 97       	sbiw	r24, 0x01	; 1
    8320:	f1 f7       	brne	.-4      	; 0x831e <main+0x1d0c>
    8322:	fe 01       	movw	r30, r28
    8324:	e3 5f       	subi	r30, 0xF3	; 243
    8326:	fe 4f       	sbci	r31, 0xFE	; 254
    8328:	91 83       	std	Z+1, r25	; 0x01
    832a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    832c:	de 01       	movw	r26, r28
    832e:	a1 5f       	subi	r26, 0xF1	; 241
    8330:	be 4f       	sbci	r27, 0xFE	; 254
    8332:	fe 01       	movw	r30, r28
    8334:	e1 5f       	subi	r30, 0xF1	; 241
    8336:	fe 4f       	sbci	r31, 0xFE	; 254
    8338:	80 81       	ld	r24, Z
    833a:	91 81       	ldd	r25, Z+1	; 0x01
    833c:	01 97       	sbiw	r24, 0x01	; 1
    833e:	11 96       	adiw	r26, 0x01	; 1
    8340:	9c 93       	st	X, r25
    8342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8344:	fe 01       	movw	r30, r28
    8346:	e1 5f       	subi	r30, 0xF1	; 241
    8348:	fe 4f       	sbci	r31, 0xFE	; 254
    834a:	80 81       	ld	r24, Z
    834c:	91 81       	ldd	r25, Z+1	; 0x01
    834e:	00 97       	sbiw	r24, 0x00	; 0
    8350:	d1 f6       	brne	.-76     	; 0x8306 <main+0x1cf4>
    8352:	27 c0       	rjmp	.+78     	; 0x83a2 <main+0x1d90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8354:	8e 01       	movw	r16, r28
    8356:	01 5f       	subi	r16, 0xF1	; 241
    8358:	1e 4f       	sbci	r17, 0xFE	; 254
    835a:	fe 01       	movw	r30, r28
    835c:	ef 5e       	subi	r30, 0xEF	; 239
    835e:	fe 4f       	sbci	r31, 0xFE	; 254
    8360:	60 81       	ld	r22, Z
    8362:	71 81       	ldd	r23, Z+1	; 0x01
    8364:	82 81       	ldd	r24, Z+2	; 0x02
    8366:	93 81       	ldd	r25, Z+3	; 0x03
    8368:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    836c:	dc 01       	movw	r26, r24
    836e:	cb 01       	movw	r24, r22
    8370:	f8 01       	movw	r30, r16
    8372:	91 83       	std	Z+1, r25	; 0x01
    8374:	80 83       	st	Z, r24
    8376:	de 01       	movw	r26, r28
    8378:	a5 5f       	subi	r26, 0xF5	; 245
    837a:	be 4f       	sbci	r27, 0xFE	; 254
    837c:	fe 01       	movw	r30, r28
    837e:	e1 5f       	subi	r30, 0xF1	; 241
    8380:	fe 4f       	sbci	r31, 0xFE	; 254
    8382:	80 81       	ld	r24, Z
    8384:	91 81       	ldd	r25, Z+1	; 0x01
    8386:	8d 93       	st	X+, r24
    8388:	9c 93       	st	X, r25
    838a:	fe 01       	movw	r30, r28
    838c:	e5 5f       	subi	r30, 0xF5	; 245
    838e:	fe 4f       	sbci	r31, 0xFE	; 254
    8390:	80 81       	ld	r24, Z
    8392:	91 81       	ldd	r25, Z+1	; 0x01
    8394:	01 97       	sbiw	r24, 0x01	; 1
    8396:	f1 f7       	brne	.-4      	; 0x8394 <main+0x1d82>
    8398:	fe 01       	movw	r30, r28
    839a:	e5 5f       	subi	r30, 0xF5	; 245
    839c:	fe 4f       	sbci	r31, 0xFE	; 254
    839e:	91 83       	std	Z+1, r25	; 0x01
    83a0:	80 83       	st	Z, r24
					_delay_ms(20);
					/*print "Unmatched." in lcd */
					LCD_PrintString(thir);
    83a2:	ce 01       	movw	r24, r28
    83a4:	83 5d       	subi	r24, 0xD3	; 211
    83a6:	9d 4f       	sbci	r25, 0xFD	; 253
    83a8:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    83ac:	fe 01       	movw	r30, r28
    83ae:	e9 5f       	subi	r30, 0xF9	; 249
    83b0:	fe 4f       	sbci	r31, 0xFE	; 254
    83b2:	80 e0       	ldi	r24, 0x00	; 0
    83b4:	90 e0       	ldi	r25, 0x00	; 0
    83b6:	aa ef       	ldi	r26, 0xFA	; 250
    83b8:	b3 e4       	ldi	r27, 0x43	; 67
    83ba:	80 83       	st	Z, r24
    83bc:	91 83       	std	Z+1, r25	; 0x01
    83be:	a2 83       	std	Z+2, r26	; 0x02
    83c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    83c2:	8e 01       	movw	r16, r28
    83c4:	0d 5f       	subi	r16, 0xFD	; 253
    83c6:	1e 4f       	sbci	r17, 0xFE	; 254
    83c8:	fe 01       	movw	r30, r28
    83ca:	e9 5f       	subi	r30, 0xF9	; 249
    83cc:	fe 4f       	sbci	r31, 0xFE	; 254
    83ce:	60 81       	ld	r22, Z
    83d0:	71 81       	ldd	r23, Z+1	; 0x01
    83d2:	82 81       	ldd	r24, Z+2	; 0x02
    83d4:	93 81       	ldd	r25, Z+3	; 0x03
    83d6:	20 e0       	ldi	r18, 0x00	; 0
    83d8:	30 e0       	ldi	r19, 0x00	; 0
    83da:	4a e7       	ldi	r20, 0x7A	; 122
    83dc:	55 e4       	ldi	r21, 0x45	; 69
    83de:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    83e2:	dc 01       	movw	r26, r24
    83e4:	cb 01       	movw	r24, r22
    83e6:	f8 01       	movw	r30, r16
    83e8:	80 83       	st	Z, r24
    83ea:	91 83       	std	Z+1, r25	; 0x01
    83ec:	a2 83       	std	Z+2, r26	; 0x02
    83ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    83f0:	fe 01       	movw	r30, r28
    83f2:	ed 5f       	subi	r30, 0xFD	; 253
    83f4:	fe 4f       	sbci	r31, 0xFE	; 254
    83f6:	60 81       	ld	r22, Z
    83f8:	71 81       	ldd	r23, Z+1	; 0x01
    83fa:	82 81       	ldd	r24, Z+2	; 0x02
    83fc:	93 81       	ldd	r25, Z+3	; 0x03
    83fe:	20 e0       	ldi	r18, 0x00	; 0
    8400:	30 e0       	ldi	r19, 0x00	; 0
    8402:	40 e8       	ldi	r20, 0x80	; 128
    8404:	5f e3       	ldi	r21, 0x3F	; 63
    8406:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    840a:	88 23       	and	r24, r24
    840c:	44 f4       	brge	.+16     	; 0x841e <main+0x1e0c>
		__ticks = 1;
    840e:	fe 01       	movw	r30, r28
    8410:	ef 5f       	subi	r30, 0xFF	; 255
    8412:	fe 4f       	sbci	r31, 0xFE	; 254
    8414:	81 e0       	ldi	r24, 0x01	; 1
    8416:	90 e0       	ldi	r25, 0x00	; 0
    8418:	91 83       	std	Z+1, r25	; 0x01
    841a:	80 83       	st	Z, r24
    841c:	64 c0       	rjmp	.+200    	; 0x84e6 <main+0x1ed4>
	else if (__tmp > 65535)
    841e:	fe 01       	movw	r30, r28
    8420:	ed 5f       	subi	r30, 0xFD	; 253
    8422:	fe 4f       	sbci	r31, 0xFE	; 254
    8424:	60 81       	ld	r22, Z
    8426:	71 81       	ldd	r23, Z+1	; 0x01
    8428:	82 81       	ldd	r24, Z+2	; 0x02
    842a:	93 81       	ldd	r25, Z+3	; 0x03
    842c:	20 e0       	ldi	r18, 0x00	; 0
    842e:	3f ef       	ldi	r19, 0xFF	; 255
    8430:	4f e7       	ldi	r20, 0x7F	; 127
    8432:	57 e4       	ldi	r21, 0x47	; 71
    8434:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    8438:	18 16       	cp	r1, r24
    843a:	0c f0       	brlt	.+2      	; 0x843e <main+0x1e2c>
    843c:	43 c0       	rjmp	.+134    	; 0x84c4 <main+0x1eb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    843e:	fe 01       	movw	r30, r28
    8440:	e9 5f       	subi	r30, 0xF9	; 249
    8442:	fe 4f       	sbci	r31, 0xFE	; 254
    8444:	60 81       	ld	r22, Z
    8446:	71 81       	ldd	r23, Z+1	; 0x01
    8448:	82 81       	ldd	r24, Z+2	; 0x02
    844a:	93 81       	ldd	r25, Z+3	; 0x03
    844c:	20 e0       	ldi	r18, 0x00	; 0
    844e:	30 e0       	ldi	r19, 0x00	; 0
    8450:	40 e2       	ldi	r20, 0x20	; 32
    8452:	51 e4       	ldi	r21, 0x41	; 65
    8454:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8458:	dc 01       	movw	r26, r24
    845a:	cb 01       	movw	r24, r22
    845c:	8e 01       	movw	r16, r28
    845e:	0f 5f       	subi	r16, 0xFF	; 255
    8460:	1e 4f       	sbci	r17, 0xFE	; 254
    8462:	bc 01       	movw	r22, r24
    8464:	cd 01       	movw	r24, r26
    8466:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    846a:	dc 01       	movw	r26, r24
    846c:	cb 01       	movw	r24, r22
    846e:	f8 01       	movw	r30, r16
    8470:	91 83       	std	Z+1, r25	; 0x01
    8472:	80 83       	st	Z, r24
    8474:	1f c0       	rjmp	.+62     	; 0x84b4 <main+0x1ea2>
    8476:	fe 01       	movw	r30, r28
    8478:	e1 50       	subi	r30, 0x01	; 1
    847a:	ff 4f       	sbci	r31, 0xFF	; 255
    847c:	80 e9       	ldi	r24, 0x90	; 144
    847e:	91 e0       	ldi	r25, 0x01	; 1
    8480:	91 83       	std	Z+1, r25	; 0x01
    8482:	80 83       	st	Z, r24
    8484:	fe 01       	movw	r30, r28
    8486:	e1 50       	subi	r30, 0x01	; 1
    8488:	ff 4f       	sbci	r31, 0xFF	; 255
    848a:	80 81       	ld	r24, Z
    848c:	91 81       	ldd	r25, Z+1	; 0x01
    848e:	01 97       	sbiw	r24, 0x01	; 1
    8490:	f1 f7       	brne	.-4      	; 0x848e <main+0x1e7c>
    8492:	fe 01       	movw	r30, r28
    8494:	e1 50       	subi	r30, 0x01	; 1
    8496:	ff 4f       	sbci	r31, 0xFF	; 255
    8498:	91 83       	std	Z+1, r25	; 0x01
    849a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    849c:	de 01       	movw	r26, r28
    849e:	af 5f       	subi	r26, 0xFF	; 255
    84a0:	be 4f       	sbci	r27, 0xFE	; 254
    84a2:	fe 01       	movw	r30, r28
    84a4:	ef 5f       	subi	r30, 0xFF	; 255
    84a6:	fe 4f       	sbci	r31, 0xFE	; 254
    84a8:	80 81       	ld	r24, Z
    84aa:	91 81       	ldd	r25, Z+1	; 0x01
    84ac:	01 97       	sbiw	r24, 0x01	; 1
    84ae:	11 96       	adiw	r26, 0x01	; 1
    84b0:	9c 93       	st	X, r25
    84b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    84b4:	fe 01       	movw	r30, r28
    84b6:	ef 5f       	subi	r30, 0xFF	; 255
    84b8:	fe 4f       	sbci	r31, 0xFE	; 254
    84ba:	80 81       	ld	r24, Z
    84bc:	91 81       	ldd	r25, Z+1	; 0x01
    84be:	00 97       	sbiw	r24, 0x00	; 0
    84c0:	d1 f6       	brne	.-76     	; 0x8476 <main+0x1e64>
    84c2:	28 c0       	rjmp	.+80     	; 0x8514 <main+0x1f02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    84c4:	8e 01       	movw	r16, r28
    84c6:	0f 5f       	subi	r16, 0xFF	; 255
    84c8:	1e 4f       	sbci	r17, 0xFE	; 254
    84ca:	fe 01       	movw	r30, r28
    84cc:	ed 5f       	subi	r30, 0xFD	; 253
    84ce:	fe 4f       	sbci	r31, 0xFE	; 254
    84d0:	60 81       	ld	r22, Z
    84d2:	71 81       	ldd	r23, Z+1	; 0x01
    84d4:	82 81       	ldd	r24, Z+2	; 0x02
    84d6:	93 81       	ldd	r25, Z+3	; 0x03
    84d8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    84dc:	dc 01       	movw	r26, r24
    84de:	cb 01       	movw	r24, r22
    84e0:	f8 01       	movw	r30, r16
    84e2:	91 83       	std	Z+1, r25	; 0x01
    84e4:	80 83       	st	Z, r24
    84e6:	de 01       	movw	r26, r28
    84e8:	a3 50       	subi	r26, 0x03	; 3
    84ea:	bf 4f       	sbci	r27, 0xFF	; 255
    84ec:	fe 01       	movw	r30, r28
    84ee:	ef 5f       	subi	r30, 0xFF	; 255
    84f0:	fe 4f       	sbci	r31, 0xFE	; 254
    84f2:	80 81       	ld	r24, Z
    84f4:	91 81       	ldd	r25, Z+1	; 0x01
    84f6:	11 96       	adiw	r26, 0x01	; 1
    84f8:	9c 93       	st	X, r25
    84fa:	8e 93       	st	-X, r24
    84fc:	fe 01       	movw	r30, r28
    84fe:	e3 50       	subi	r30, 0x03	; 3
    8500:	ff 4f       	sbci	r31, 0xFF	; 255
    8502:	80 81       	ld	r24, Z
    8504:	91 81       	ldd	r25, Z+1	; 0x01
    8506:	01 97       	sbiw	r24, 0x01	; 1
    8508:	f1 f7       	brne	.-4      	; 0x8506 <main+0x1ef4>
    850a:	fe 01       	movw	r30, r28
    850c:	e3 50       	subi	r30, 0x03	; 3
    850e:	ff 4f       	sbci	r31, 0xFF	; 255
    8510:	91 83       	std	Z+1, r25	; 0x01
    8512:	80 83       	st	Z, r24
					_delay_ms(500);
					flag1 = 0;
    8514:	fe 01       	movw	r30, r28
    8516:	eb 53       	subi	r30, 0x3B	; 59
    8518:	fe 4f       	sbci	r31, 0xFE	; 254
    851a:	10 82       	st	Z, r1
    851c:	15 c0       	rjmp	.+42     	; 0x8548 <main+0x1f36>
					break;
				}
				else
					/*set flag1*/
					flag1 = 1;
    851e:	fe 01       	movw	r30, r28
    8520:	eb 53       	subi	r30, 0x3B	; 59
    8522:	fe 4f       	sbci	r31, 0xFE	; 254
    8524:	81 e0       	ldi	r24, 0x01	; 1
    8526:	80 83       	st	Z, r24
				LCD_PrintCharacter(num2[i] + 48);
				_delay_ms(500);
			}

           /* for loop to check for mismatch */
			for(i=0 ; i<5 ; i++)
    8528:	de 01       	movw	r26, r28
    852a:	aa 53       	subi	r26, 0x3A	; 58
    852c:	be 4f       	sbci	r27, 0xFE	; 254
    852e:	fe 01       	movw	r30, r28
    8530:	ea 53       	subi	r30, 0x3A	; 58
    8532:	fe 4f       	sbci	r31, 0xFE	; 254
    8534:	80 81       	ld	r24, Z
    8536:	8f 5f       	subi	r24, 0xFF	; 255
    8538:	8c 93       	st	X, r24
    853a:	fe 01       	movw	r30, r28
    853c:	ea 53       	subi	r30, 0x3A	; 58
    853e:	fe 4f       	sbci	r31, 0xFE	; 254
    8540:	80 81       	ld	r24, Z
    8542:	85 30       	cpi	r24, 0x05	; 5
    8544:	08 f4       	brcc	.+2      	; 0x8548 <main+0x1f36>
    8546:	58 ce       	rjmp	.-848    	; 0x81f8 <main+0x1be6>
				else
					/*set flag1*/
					flag1 = 1;
			}

			if(flag1 == 1)
    8548:	fe 01       	movw	r30, r28
    854a:	eb 53       	subi	r30, 0x3B	; 59
    854c:	fe 4f       	sbci	r31, 0xFE	; 254
    854e:	80 81       	ld	r24, Z
    8550:	81 30       	cpi	r24, 0x01	; 1
    8552:	11 f0       	breq	.+4      	; 0x8558 <main+0x1f46>
    8554:	0c 94 e7 37 	jmp	0x6fce	; 0x6fce <main+0x9bc>
				break;
		}
		/*delete lcd content */
		LCD_SendCommand(DISPLAY_CLEAR);
    8558:	81 e0       	ldi	r24, 0x01	; 1
    855a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    855e:	fe 01       	movw	r30, r28
    8560:	e7 50       	subi	r30, 0x07	; 7
    8562:	ff 4f       	sbci	r31, 0xFF	; 255
    8564:	80 e0       	ldi	r24, 0x00	; 0
    8566:	90 e0       	ldi	r25, 0x00	; 0
    8568:	a0 ea       	ldi	r26, 0xA0	; 160
    856a:	b1 e4       	ldi	r27, 0x41	; 65
    856c:	80 83       	st	Z, r24
    856e:	91 83       	std	Z+1, r25	; 0x01
    8570:	a2 83       	std	Z+2, r26	; 0x02
    8572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8574:	8e 01       	movw	r16, r28
    8576:	0b 50       	subi	r16, 0x0B	; 11
    8578:	1f 4f       	sbci	r17, 0xFF	; 255
    857a:	fe 01       	movw	r30, r28
    857c:	e7 50       	subi	r30, 0x07	; 7
    857e:	ff 4f       	sbci	r31, 0xFF	; 255
    8580:	60 81       	ld	r22, Z
    8582:	71 81       	ldd	r23, Z+1	; 0x01
    8584:	82 81       	ldd	r24, Z+2	; 0x02
    8586:	93 81       	ldd	r25, Z+3	; 0x03
    8588:	20 e0       	ldi	r18, 0x00	; 0
    858a:	30 e0       	ldi	r19, 0x00	; 0
    858c:	4a e7       	ldi	r20, 0x7A	; 122
    858e:	55 e4       	ldi	r21, 0x45	; 69
    8590:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8594:	dc 01       	movw	r26, r24
    8596:	cb 01       	movw	r24, r22
    8598:	f8 01       	movw	r30, r16
    859a:	80 83       	st	Z, r24
    859c:	91 83       	std	Z+1, r25	; 0x01
    859e:	a2 83       	std	Z+2, r26	; 0x02
    85a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    85a2:	fe 01       	movw	r30, r28
    85a4:	eb 50       	subi	r30, 0x0B	; 11
    85a6:	ff 4f       	sbci	r31, 0xFF	; 255
    85a8:	60 81       	ld	r22, Z
    85aa:	71 81       	ldd	r23, Z+1	; 0x01
    85ac:	82 81       	ldd	r24, Z+2	; 0x02
    85ae:	93 81       	ldd	r25, Z+3	; 0x03
    85b0:	20 e0       	ldi	r18, 0x00	; 0
    85b2:	30 e0       	ldi	r19, 0x00	; 0
    85b4:	40 e8       	ldi	r20, 0x80	; 128
    85b6:	5f e3       	ldi	r21, 0x3F	; 63
    85b8:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    85bc:	88 23       	and	r24, r24
    85be:	44 f4       	brge	.+16     	; 0x85d0 <main+0x1fbe>
		__ticks = 1;
    85c0:	fe 01       	movw	r30, r28
    85c2:	ed 50       	subi	r30, 0x0D	; 13
    85c4:	ff 4f       	sbci	r31, 0xFF	; 255
    85c6:	81 e0       	ldi	r24, 0x01	; 1
    85c8:	90 e0       	ldi	r25, 0x00	; 0
    85ca:	91 83       	std	Z+1, r25	; 0x01
    85cc:	80 83       	st	Z, r24
    85ce:	64 c0       	rjmp	.+200    	; 0x8698 <main+0x2086>
	else if (__tmp > 65535)
    85d0:	fe 01       	movw	r30, r28
    85d2:	eb 50       	subi	r30, 0x0B	; 11
    85d4:	ff 4f       	sbci	r31, 0xFF	; 255
    85d6:	60 81       	ld	r22, Z
    85d8:	71 81       	ldd	r23, Z+1	; 0x01
    85da:	82 81       	ldd	r24, Z+2	; 0x02
    85dc:	93 81       	ldd	r25, Z+3	; 0x03
    85de:	20 e0       	ldi	r18, 0x00	; 0
    85e0:	3f ef       	ldi	r19, 0xFF	; 255
    85e2:	4f e7       	ldi	r20, 0x7F	; 127
    85e4:	57 e4       	ldi	r21, 0x47	; 71
    85e6:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    85ea:	18 16       	cp	r1, r24
    85ec:	0c f0       	brlt	.+2      	; 0x85f0 <main+0x1fde>
    85ee:	43 c0       	rjmp	.+134    	; 0x8676 <main+0x2064>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    85f0:	fe 01       	movw	r30, r28
    85f2:	e7 50       	subi	r30, 0x07	; 7
    85f4:	ff 4f       	sbci	r31, 0xFF	; 255
    85f6:	60 81       	ld	r22, Z
    85f8:	71 81       	ldd	r23, Z+1	; 0x01
    85fa:	82 81       	ldd	r24, Z+2	; 0x02
    85fc:	93 81       	ldd	r25, Z+3	; 0x03
    85fe:	20 e0       	ldi	r18, 0x00	; 0
    8600:	30 e0       	ldi	r19, 0x00	; 0
    8602:	40 e2       	ldi	r20, 0x20	; 32
    8604:	51 e4       	ldi	r21, 0x41	; 65
    8606:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    860a:	dc 01       	movw	r26, r24
    860c:	cb 01       	movw	r24, r22
    860e:	8e 01       	movw	r16, r28
    8610:	0d 50       	subi	r16, 0x0D	; 13
    8612:	1f 4f       	sbci	r17, 0xFF	; 255
    8614:	bc 01       	movw	r22, r24
    8616:	cd 01       	movw	r24, r26
    8618:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    861c:	dc 01       	movw	r26, r24
    861e:	cb 01       	movw	r24, r22
    8620:	f8 01       	movw	r30, r16
    8622:	91 83       	std	Z+1, r25	; 0x01
    8624:	80 83       	st	Z, r24
    8626:	1f c0       	rjmp	.+62     	; 0x8666 <main+0x2054>
    8628:	fe 01       	movw	r30, r28
    862a:	ef 50       	subi	r30, 0x0F	; 15
    862c:	ff 4f       	sbci	r31, 0xFF	; 255
    862e:	80 e9       	ldi	r24, 0x90	; 144
    8630:	91 e0       	ldi	r25, 0x01	; 1
    8632:	91 83       	std	Z+1, r25	; 0x01
    8634:	80 83       	st	Z, r24
    8636:	fe 01       	movw	r30, r28
    8638:	ef 50       	subi	r30, 0x0F	; 15
    863a:	ff 4f       	sbci	r31, 0xFF	; 255
    863c:	80 81       	ld	r24, Z
    863e:	91 81       	ldd	r25, Z+1	; 0x01
    8640:	01 97       	sbiw	r24, 0x01	; 1
    8642:	f1 f7       	brne	.-4      	; 0x8640 <main+0x202e>
    8644:	fe 01       	movw	r30, r28
    8646:	ef 50       	subi	r30, 0x0F	; 15
    8648:	ff 4f       	sbci	r31, 0xFF	; 255
    864a:	91 83       	std	Z+1, r25	; 0x01
    864c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    864e:	de 01       	movw	r26, r28
    8650:	ad 50       	subi	r26, 0x0D	; 13
    8652:	bf 4f       	sbci	r27, 0xFF	; 255
    8654:	fe 01       	movw	r30, r28
    8656:	ed 50       	subi	r30, 0x0D	; 13
    8658:	ff 4f       	sbci	r31, 0xFF	; 255
    865a:	80 81       	ld	r24, Z
    865c:	91 81       	ldd	r25, Z+1	; 0x01
    865e:	01 97       	sbiw	r24, 0x01	; 1
    8660:	11 96       	adiw	r26, 0x01	; 1
    8662:	9c 93       	st	X, r25
    8664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8666:	fe 01       	movw	r30, r28
    8668:	ed 50       	subi	r30, 0x0D	; 13
    866a:	ff 4f       	sbci	r31, 0xFF	; 255
    866c:	80 81       	ld	r24, Z
    866e:	91 81       	ldd	r25, Z+1	; 0x01
    8670:	00 97       	sbiw	r24, 0x00	; 0
    8672:	d1 f6       	brne	.-76     	; 0x8628 <main+0x2016>
    8674:	27 c0       	rjmp	.+78     	; 0x86c4 <main+0x20b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8676:	8e 01       	movw	r16, r28
    8678:	0d 50       	subi	r16, 0x0D	; 13
    867a:	1f 4f       	sbci	r17, 0xFF	; 255
    867c:	fe 01       	movw	r30, r28
    867e:	eb 50       	subi	r30, 0x0B	; 11
    8680:	ff 4f       	sbci	r31, 0xFF	; 255
    8682:	60 81       	ld	r22, Z
    8684:	71 81       	ldd	r23, Z+1	; 0x01
    8686:	82 81       	ldd	r24, Z+2	; 0x02
    8688:	93 81       	ldd	r25, Z+3	; 0x03
    868a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    868e:	dc 01       	movw	r26, r24
    8690:	cb 01       	movw	r24, r22
    8692:	f8 01       	movw	r30, r16
    8694:	91 83       	std	Z+1, r25	; 0x01
    8696:	80 83       	st	Z, r24
    8698:	de 01       	movw	r26, r28
    869a:	a1 51       	subi	r26, 0x11	; 17
    869c:	bf 4f       	sbci	r27, 0xFF	; 255
    869e:	fe 01       	movw	r30, r28
    86a0:	ed 50       	subi	r30, 0x0D	; 13
    86a2:	ff 4f       	sbci	r31, 0xFF	; 255
    86a4:	80 81       	ld	r24, Z
    86a6:	91 81       	ldd	r25, Z+1	; 0x01
    86a8:	8d 93       	st	X+, r24
    86aa:	9c 93       	st	X, r25
    86ac:	fe 01       	movw	r30, r28
    86ae:	e1 51       	subi	r30, 0x11	; 17
    86b0:	ff 4f       	sbci	r31, 0xFF	; 255
    86b2:	80 81       	ld	r24, Z
    86b4:	91 81       	ldd	r25, Z+1	; 0x01
    86b6:	01 97       	sbiw	r24, 0x01	; 1
    86b8:	f1 f7       	brne	.-4      	; 0x86b6 <main+0x20a4>
    86ba:	fe 01       	movw	r30, r28
    86bc:	e1 51       	subi	r30, 0x11	; 17
    86be:	ff 4f       	sbci	r31, 0xFF	; 255
    86c0:	91 83       	std	Z+1, r25	; 0x01
    86c2:	80 83       	st	Z, r24
		_delay_ms(20);
		/*print "Confirmed." in lcd */
		LCD_PrintString(con);
    86c4:	ce 01       	movw	r24, r28
    86c6:	81 52       	subi	r24, 0x21	; 33
    86c8:	9e 4f       	sbci	r25, 0xFE	; 254
    86ca:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    86ce:	fe 01       	movw	r30, r28
    86d0:	e5 51       	subi	r30, 0x15	; 21
    86d2:	ff 4f       	sbci	r31, 0xFF	; 255
    86d4:	80 e0       	ldi	r24, 0x00	; 0
    86d6:	90 e0       	ldi	r25, 0x00	; 0
    86d8:	aa ef       	ldi	r26, 0xFA	; 250
    86da:	b3 e4       	ldi	r27, 0x43	; 67
    86dc:	80 83       	st	Z, r24
    86de:	91 83       	std	Z+1, r25	; 0x01
    86e0:	a2 83       	std	Z+2, r26	; 0x02
    86e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    86e4:	8e 01       	movw	r16, r28
    86e6:	09 51       	subi	r16, 0x19	; 25
    86e8:	1f 4f       	sbci	r17, 0xFF	; 255
    86ea:	fe 01       	movw	r30, r28
    86ec:	e5 51       	subi	r30, 0x15	; 21
    86ee:	ff 4f       	sbci	r31, 0xFF	; 255
    86f0:	60 81       	ld	r22, Z
    86f2:	71 81       	ldd	r23, Z+1	; 0x01
    86f4:	82 81       	ldd	r24, Z+2	; 0x02
    86f6:	93 81       	ldd	r25, Z+3	; 0x03
    86f8:	20 e0       	ldi	r18, 0x00	; 0
    86fa:	30 e0       	ldi	r19, 0x00	; 0
    86fc:	4a e7       	ldi	r20, 0x7A	; 122
    86fe:	55 e4       	ldi	r21, 0x45	; 69
    8700:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8704:	dc 01       	movw	r26, r24
    8706:	cb 01       	movw	r24, r22
    8708:	f8 01       	movw	r30, r16
    870a:	80 83       	st	Z, r24
    870c:	91 83       	std	Z+1, r25	; 0x01
    870e:	a2 83       	std	Z+2, r26	; 0x02
    8710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8712:	fe 01       	movw	r30, r28
    8714:	e9 51       	subi	r30, 0x19	; 25
    8716:	ff 4f       	sbci	r31, 0xFF	; 255
    8718:	60 81       	ld	r22, Z
    871a:	71 81       	ldd	r23, Z+1	; 0x01
    871c:	82 81       	ldd	r24, Z+2	; 0x02
    871e:	93 81       	ldd	r25, Z+3	; 0x03
    8720:	20 e0       	ldi	r18, 0x00	; 0
    8722:	30 e0       	ldi	r19, 0x00	; 0
    8724:	40 e8       	ldi	r20, 0x80	; 128
    8726:	5f e3       	ldi	r21, 0x3F	; 63
    8728:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    872c:	88 23       	and	r24, r24
    872e:	44 f4       	brge	.+16     	; 0x8740 <main+0x212e>
		__ticks = 1;
    8730:	fe 01       	movw	r30, r28
    8732:	eb 51       	subi	r30, 0x1B	; 27
    8734:	ff 4f       	sbci	r31, 0xFF	; 255
    8736:	81 e0       	ldi	r24, 0x01	; 1
    8738:	90 e0       	ldi	r25, 0x00	; 0
    873a:	91 83       	std	Z+1, r25	; 0x01
    873c:	80 83       	st	Z, r24
    873e:	64 c0       	rjmp	.+200    	; 0x8808 <main+0x21f6>
	else if (__tmp > 65535)
    8740:	fe 01       	movw	r30, r28
    8742:	e9 51       	subi	r30, 0x19	; 25
    8744:	ff 4f       	sbci	r31, 0xFF	; 255
    8746:	60 81       	ld	r22, Z
    8748:	71 81       	ldd	r23, Z+1	; 0x01
    874a:	82 81       	ldd	r24, Z+2	; 0x02
    874c:	93 81       	ldd	r25, Z+3	; 0x03
    874e:	20 e0       	ldi	r18, 0x00	; 0
    8750:	3f ef       	ldi	r19, 0xFF	; 255
    8752:	4f e7       	ldi	r20, 0x7F	; 127
    8754:	57 e4       	ldi	r21, 0x47	; 71
    8756:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    875a:	18 16       	cp	r1, r24
    875c:	0c f0       	brlt	.+2      	; 0x8760 <main+0x214e>
    875e:	43 c0       	rjmp	.+134    	; 0x87e6 <main+0x21d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8760:	fe 01       	movw	r30, r28
    8762:	e5 51       	subi	r30, 0x15	; 21
    8764:	ff 4f       	sbci	r31, 0xFF	; 255
    8766:	60 81       	ld	r22, Z
    8768:	71 81       	ldd	r23, Z+1	; 0x01
    876a:	82 81       	ldd	r24, Z+2	; 0x02
    876c:	93 81       	ldd	r25, Z+3	; 0x03
    876e:	20 e0       	ldi	r18, 0x00	; 0
    8770:	30 e0       	ldi	r19, 0x00	; 0
    8772:	40 e2       	ldi	r20, 0x20	; 32
    8774:	51 e4       	ldi	r21, 0x41	; 65
    8776:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    877a:	dc 01       	movw	r26, r24
    877c:	cb 01       	movw	r24, r22
    877e:	8e 01       	movw	r16, r28
    8780:	0b 51       	subi	r16, 0x1B	; 27
    8782:	1f 4f       	sbci	r17, 0xFF	; 255
    8784:	bc 01       	movw	r22, r24
    8786:	cd 01       	movw	r24, r26
    8788:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    878c:	dc 01       	movw	r26, r24
    878e:	cb 01       	movw	r24, r22
    8790:	f8 01       	movw	r30, r16
    8792:	91 83       	std	Z+1, r25	; 0x01
    8794:	80 83       	st	Z, r24
    8796:	1f c0       	rjmp	.+62     	; 0x87d6 <main+0x21c4>
    8798:	fe 01       	movw	r30, r28
    879a:	ed 51       	subi	r30, 0x1D	; 29
    879c:	ff 4f       	sbci	r31, 0xFF	; 255
    879e:	80 e9       	ldi	r24, 0x90	; 144
    87a0:	91 e0       	ldi	r25, 0x01	; 1
    87a2:	91 83       	std	Z+1, r25	; 0x01
    87a4:	80 83       	st	Z, r24
    87a6:	fe 01       	movw	r30, r28
    87a8:	ed 51       	subi	r30, 0x1D	; 29
    87aa:	ff 4f       	sbci	r31, 0xFF	; 255
    87ac:	80 81       	ld	r24, Z
    87ae:	91 81       	ldd	r25, Z+1	; 0x01
    87b0:	01 97       	sbiw	r24, 0x01	; 1
    87b2:	f1 f7       	brne	.-4      	; 0x87b0 <main+0x219e>
    87b4:	fe 01       	movw	r30, r28
    87b6:	ed 51       	subi	r30, 0x1D	; 29
    87b8:	ff 4f       	sbci	r31, 0xFF	; 255
    87ba:	91 83       	std	Z+1, r25	; 0x01
    87bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87be:	de 01       	movw	r26, r28
    87c0:	ab 51       	subi	r26, 0x1B	; 27
    87c2:	bf 4f       	sbci	r27, 0xFF	; 255
    87c4:	fe 01       	movw	r30, r28
    87c6:	eb 51       	subi	r30, 0x1B	; 27
    87c8:	ff 4f       	sbci	r31, 0xFF	; 255
    87ca:	80 81       	ld	r24, Z
    87cc:	91 81       	ldd	r25, Z+1	; 0x01
    87ce:	01 97       	sbiw	r24, 0x01	; 1
    87d0:	11 96       	adiw	r26, 0x01	; 1
    87d2:	9c 93       	st	X, r25
    87d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87d6:	fe 01       	movw	r30, r28
    87d8:	eb 51       	subi	r30, 0x1B	; 27
    87da:	ff 4f       	sbci	r31, 0xFF	; 255
    87dc:	80 81       	ld	r24, Z
    87de:	91 81       	ldd	r25, Z+1	; 0x01
    87e0:	00 97       	sbiw	r24, 0x00	; 0
    87e2:	d1 f6       	brne	.-76     	; 0x8798 <main+0x2186>
    87e4:	27 c0       	rjmp	.+78     	; 0x8834 <main+0x2222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    87e6:	8e 01       	movw	r16, r28
    87e8:	0b 51       	subi	r16, 0x1B	; 27
    87ea:	1f 4f       	sbci	r17, 0xFF	; 255
    87ec:	fe 01       	movw	r30, r28
    87ee:	e9 51       	subi	r30, 0x19	; 25
    87f0:	ff 4f       	sbci	r31, 0xFF	; 255
    87f2:	60 81       	ld	r22, Z
    87f4:	71 81       	ldd	r23, Z+1	; 0x01
    87f6:	82 81       	ldd	r24, Z+2	; 0x02
    87f8:	93 81       	ldd	r25, Z+3	; 0x03
    87fa:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    87fe:	dc 01       	movw	r26, r24
    8800:	cb 01       	movw	r24, r22
    8802:	f8 01       	movw	r30, r16
    8804:	91 83       	std	Z+1, r25	; 0x01
    8806:	80 83       	st	Z, r24
    8808:	de 01       	movw	r26, r28
    880a:	af 51       	subi	r26, 0x1F	; 31
    880c:	bf 4f       	sbci	r27, 0xFF	; 255
    880e:	fe 01       	movw	r30, r28
    8810:	eb 51       	subi	r30, 0x1B	; 27
    8812:	ff 4f       	sbci	r31, 0xFF	; 255
    8814:	80 81       	ld	r24, Z
    8816:	91 81       	ldd	r25, Z+1	; 0x01
    8818:	8d 93       	st	X+, r24
    881a:	9c 93       	st	X, r25
    881c:	fe 01       	movw	r30, r28
    881e:	ef 51       	subi	r30, 0x1F	; 31
    8820:	ff 4f       	sbci	r31, 0xFF	; 255
    8822:	80 81       	ld	r24, Z
    8824:	91 81       	ldd	r25, Z+1	; 0x01
    8826:	01 97       	sbiw	r24, 0x01	; 1
    8828:	f1 f7       	brne	.-4      	; 0x8826 <main+0x2214>
    882a:	fe 01       	movw	r30, r28
    882c:	ef 51       	subi	r30, 0x1F	; 31
    882e:	ff 4f       	sbci	r31, 0xFF	; 255
    8830:	91 83       	std	Z+1, r25	; 0x01
    8832:	80 83       	st	Z, r24


		while(1)
		{
			/*check for temperature */
			check();
    8834:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
			/*delete lcd content */
			LCD_SendCommand(DISPLAY_CLEAR);
    8838:	81 e0       	ldi	r24, 0x01	; 1
    883a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    883e:	fe 01       	movw	r30, r28
    8840:	e3 52       	subi	r30, 0x23	; 35
    8842:	ff 4f       	sbci	r31, 0xFF	; 255
    8844:	80 e0       	ldi	r24, 0x00	; 0
    8846:	90 e0       	ldi	r25, 0x00	; 0
    8848:	a0 ea       	ldi	r26, 0xA0	; 160
    884a:	b1 e4       	ldi	r27, 0x41	; 65
    884c:	80 83       	st	Z, r24
    884e:	91 83       	std	Z+1, r25	; 0x01
    8850:	a2 83       	std	Z+2, r26	; 0x02
    8852:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8854:	8e 01       	movw	r16, r28
    8856:	07 52       	subi	r16, 0x27	; 39
    8858:	1f 4f       	sbci	r17, 0xFF	; 255
    885a:	fe 01       	movw	r30, r28
    885c:	e3 52       	subi	r30, 0x23	; 35
    885e:	ff 4f       	sbci	r31, 0xFF	; 255
    8860:	60 81       	ld	r22, Z
    8862:	71 81       	ldd	r23, Z+1	; 0x01
    8864:	82 81       	ldd	r24, Z+2	; 0x02
    8866:	93 81       	ldd	r25, Z+3	; 0x03
    8868:	20 e0       	ldi	r18, 0x00	; 0
    886a:	30 e0       	ldi	r19, 0x00	; 0
    886c:	4a e7       	ldi	r20, 0x7A	; 122
    886e:	55 e4       	ldi	r21, 0x45	; 69
    8870:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8874:	dc 01       	movw	r26, r24
    8876:	cb 01       	movw	r24, r22
    8878:	f8 01       	movw	r30, r16
    887a:	80 83       	st	Z, r24
    887c:	91 83       	std	Z+1, r25	; 0x01
    887e:	a2 83       	std	Z+2, r26	; 0x02
    8880:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8882:	fe 01       	movw	r30, r28
    8884:	e7 52       	subi	r30, 0x27	; 39
    8886:	ff 4f       	sbci	r31, 0xFF	; 255
    8888:	60 81       	ld	r22, Z
    888a:	71 81       	ldd	r23, Z+1	; 0x01
    888c:	82 81       	ldd	r24, Z+2	; 0x02
    888e:	93 81       	ldd	r25, Z+3	; 0x03
    8890:	20 e0       	ldi	r18, 0x00	; 0
    8892:	30 e0       	ldi	r19, 0x00	; 0
    8894:	40 e8       	ldi	r20, 0x80	; 128
    8896:	5f e3       	ldi	r21, 0x3F	; 63
    8898:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    889c:	88 23       	and	r24, r24
    889e:	44 f4       	brge	.+16     	; 0x88b0 <main+0x229e>
		__ticks = 1;
    88a0:	fe 01       	movw	r30, r28
    88a2:	e9 52       	subi	r30, 0x29	; 41
    88a4:	ff 4f       	sbci	r31, 0xFF	; 255
    88a6:	81 e0       	ldi	r24, 0x01	; 1
    88a8:	90 e0       	ldi	r25, 0x00	; 0
    88aa:	91 83       	std	Z+1, r25	; 0x01
    88ac:	80 83       	st	Z, r24
    88ae:	64 c0       	rjmp	.+200    	; 0x8978 <main+0x2366>
	else if (__tmp > 65535)
    88b0:	fe 01       	movw	r30, r28
    88b2:	e7 52       	subi	r30, 0x27	; 39
    88b4:	ff 4f       	sbci	r31, 0xFF	; 255
    88b6:	60 81       	ld	r22, Z
    88b8:	71 81       	ldd	r23, Z+1	; 0x01
    88ba:	82 81       	ldd	r24, Z+2	; 0x02
    88bc:	93 81       	ldd	r25, Z+3	; 0x03
    88be:	20 e0       	ldi	r18, 0x00	; 0
    88c0:	3f ef       	ldi	r19, 0xFF	; 255
    88c2:	4f e7       	ldi	r20, 0x7F	; 127
    88c4:	57 e4       	ldi	r21, 0x47	; 71
    88c6:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    88ca:	18 16       	cp	r1, r24
    88cc:	0c f0       	brlt	.+2      	; 0x88d0 <main+0x22be>
    88ce:	43 c0       	rjmp	.+134    	; 0x8956 <main+0x2344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    88d0:	fe 01       	movw	r30, r28
    88d2:	e3 52       	subi	r30, 0x23	; 35
    88d4:	ff 4f       	sbci	r31, 0xFF	; 255
    88d6:	60 81       	ld	r22, Z
    88d8:	71 81       	ldd	r23, Z+1	; 0x01
    88da:	82 81       	ldd	r24, Z+2	; 0x02
    88dc:	93 81       	ldd	r25, Z+3	; 0x03
    88de:	20 e0       	ldi	r18, 0x00	; 0
    88e0:	30 e0       	ldi	r19, 0x00	; 0
    88e2:	40 e2       	ldi	r20, 0x20	; 32
    88e4:	51 e4       	ldi	r21, 0x41	; 65
    88e6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    88ea:	dc 01       	movw	r26, r24
    88ec:	cb 01       	movw	r24, r22
    88ee:	8e 01       	movw	r16, r28
    88f0:	09 52       	subi	r16, 0x29	; 41
    88f2:	1f 4f       	sbci	r17, 0xFF	; 255
    88f4:	bc 01       	movw	r22, r24
    88f6:	cd 01       	movw	r24, r26
    88f8:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    88fc:	dc 01       	movw	r26, r24
    88fe:	cb 01       	movw	r24, r22
    8900:	f8 01       	movw	r30, r16
    8902:	91 83       	std	Z+1, r25	; 0x01
    8904:	80 83       	st	Z, r24
    8906:	1f c0       	rjmp	.+62     	; 0x8946 <main+0x2334>
    8908:	fe 01       	movw	r30, r28
    890a:	eb 52       	subi	r30, 0x2B	; 43
    890c:	ff 4f       	sbci	r31, 0xFF	; 255
    890e:	80 e9       	ldi	r24, 0x90	; 144
    8910:	91 e0       	ldi	r25, 0x01	; 1
    8912:	91 83       	std	Z+1, r25	; 0x01
    8914:	80 83       	st	Z, r24
    8916:	fe 01       	movw	r30, r28
    8918:	eb 52       	subi	r30, 0x2B	; 43
    891a:	ff 4f       	sbci	r31, 0xFF	; 255
    891c:	80 81       	ld	r24, Z
    891e:	91 81       	ldd	r25, Z+1	; 0x01
    8920:	01 97       	sbiw	r24, 0x01	; 1
    8922:	f1 f7       	brne	.-4      	; 0x8920 <main+0x230e>
    8924:	fe 01       	movw	r30, r28
    8926:	eb 52       	subi	r30, 0x2B	; 43
    8928:	ff 4f       	sbci	r31, 0xFF	; 255
    892a:	91 83       	std	Z+1, r25	; 0x01
    892c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    892e:	de 01       	movw	r26, r28
    8930:	a9 52       	subi	r26, 0x29	; 41
    8932:	bf 4f       	sbci	r27, 0xFF	; 255
    8934:	fe 01       	movw	r30, r28
    8936:	e9 52       	subi	r30, 0x29	; 41
    8938:	ff 4f       	sbci	r31, 0xFF	; 255
    893a:	80 81       	ld	r24, Z
    893c:	91 81       	ldd	r25, Z+1	; 0x01
    893e:	01 97       	sbiw	r24, 0x01	; 1
    8940:	11 96       	adiw	r26, 0x01	; 1
    8942:	9c 93       	st	X, r25
    8944:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8946:	fe 01       	movw	r30, r28
    8948:	e9 52       	subi	r30, 0x29	; 41
    894a:	ff 4f       	sbci	r31, 0xFF	; 255
    894c:	80 81       	ld	r24, Z
    894e:	91 81       	ldd	r25, Z+1	; 0x01
    8950:	00 97       	sbiw	r24, 0x00	; 0
    8952:	d1 f6       	brne	.-76     	; 0x8908 <main+0x22f6>
    8954:	27 c0       	rjmp	.+78     	; 0x89a4 <main+0x2392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8956:	8e 01       	movw	r16, r28
    8958:	09 52       	subi	r16, 0x29	; 41
    895a:	1f 4f       	sbci	r17, 0xFF	; 255
    895c:	fe 01       	movw	r30, r28
    895e:	e7 52       	subi	r30, 0x27	; 39
    8960:	ff 4f       	sbci	r31, 0xFF	; 255
    8962:	60 81       	ld	r22, Z
    8964:	71 81       	ldd	r23, Z+1	; 0x01
    8966:	82 81       	ldd	r24, Z+2	; 0x02
    8968:	93 81       	ldd	r25, Z+3	; 0x03
    896a:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    896e:	dc 01       	movw	r26, r24
    8970:	cb 01       	movw	r24, r22
    8972:	f8 01       	movw	r30, r16
    8974:	91 83       	std	Z+1, r25	; 0x01
    8976:	80 83       	st	Z, r24
    8978:	de 01       	movw	r26, r28
    897a:	ad 52       	subi	r26, 0x2D	; 45
    897c:	bf 4f       	sbci	r27, 0xFF	; 255
    897e:	fe 01       	movw	r30, r28
    8980:	e9 52       	subi	r30, 0x29	; 41
    8982:	ff 4f       	sbci	r31, 0xFF	; 255
    8984:	80 81       	ld	r24, Z
    8986:	91 81       	ldd	r25, Z+1	; 0x01
    8988:	8d 93       	st	X+, r24
    898a:	9c 93       	st	X, r25
    898c:	fe 01       	movw	r30, r28
    898e:	ed 52       	subi	r30, 0x2D	; 45
    8990:	ff 4f       	sbci	r31, 0xFF	; 255
    8992:	80 81       	ld	r24, Z
    8994:	91 81       	ldd	r25, Z+1	; 0x01
    8996:	01 97       	sbiw	r24, 0x01	; 1
    8998:	f1 f7       	brne	.-4      	; 0x8996 <main+0x2384>
    899a:	fe 01       	movw	r30, r28
    899c:	ed 52       	subi	r30, 0x2D	; 45
    899e:	ff 4f       	sbci	r31, 0xFF	; 255
    89a0:	91 83       	std	Z+1, r25	; 0x01
    89a2:	80 83       	st	Z, r24
			_delay_ms(20);
			/*print "Enter password:" in lcd */
			LCD_PrintString(in);
    89a4:	ce 01       	movw	r24, r28
    89a6:	81 53       	subi	r24, 0x31	; 49
    89a8:	9e 4f       	sbci	r25, 0xFE	; 254
    89aa:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    89ae:	fe 01       	movw	r30, r28
    89b0:	e1 53       	subi	r30, 0x31	; 49
    89b2:	ff 4f       	sbci	r31, 0xFF	; 255
    89b4:	80 e0       	ldi	r24, 0x00	; 0
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	aa ef       	ldi	r26, 0xFA	; 250
    89ba:	b3 e4       	ldi	r27, 0x43	; 67
    89bc:	80 83       	st	Z, r24
    89be:	91 83       	std	Z+1, r25	; 0x01
    89c0:	a2 83       	std	Z+2, r26	; 0x02
    89c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    89c4:	8e 01       	movw	r16, r28
    89c6:	05 53       	subi	r16, 0x35	; 53
    89c8:	1f 4f       	sbci	r17, 0xFF	; 255
    89ca:	fe 01       	movw	r30, r28
    89cc:	e1 53       	subi	r30, 0x31	; 49
    89ce:	ff 4f       	sbci	r31, 0xFF	; 255
    89d0:	60 81       	ld	r22, Z
    89d2:	71 81       	ldd	r23, Z+1	; 0x01
    89d4:	82 81       	ldd	r24, Z+2	; 0x02
    89d6:	93 81       	ldd	r25, Z+3	; 0x03
    89d8:	20 e0       	ldi	r18, 0x00	; 0
    89da:	30 e0       	ldi	r19, 0x00	; 0
    89dc:	4a e7       	ldi	r20, 0x7A	; 122
    89de:	55 e4       	ldi	r21, 0x45	; 69
    89e0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    89e4:	dc 01       	movw	r26, r24
    89e6:	cb 01       	movw	r24, r22
    89e8:	f8 01       	movw	r30, r16
    89ea:	80 83       	st	Z, r24
    89ec:	91 83       	std	Z+1, r25	; 0x01
    89ee:	a2 83       	std	Z+2, r26	; 0x02
    89f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    89f2:	fe 01       	movw	r30, r28
    89f4:	e5 53       	subi	r30, 0x35	; 53
    89f6:	ff 4f       	sbci	r31, 0xFF	; 255
    89f8:	60 81       	ld	r22, Z
    89fa:	71 81       	ldd	r23, Z+1	; 0x01
    89fc:	82 81       	ldd	r24, Z+2	; 0x02
    89fe:	93 81       	ldd	r25, Z+3	; 0x03
    8a00:	20 e0       	ldi	r18, 0x00	; 0
    8a02:	30 e0       	ldi	r19, 0x00	; 0
    8a04:	40 e8       	ldi	r20, 0x80	; 128
    8a06:	5f e3       	ldi	r21, 0x3F	; 63
    8a08:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    8a0c:	88 23       	and	r24, r24
    8a0e:	44 f4       	brge	.+16     	; 0x8a20 <main+0x240e>
		__ticks = 1;
    8a10:	fe 01       	movw	r30, r28
    8a12:	e7 53       	subi	r30, 0x37	; 55
    8a14:	ff 4f       	sbci	r31, 0xFF	; 255
    8a16:	81 e0       	ldi	r24, 0x01	; 1
    8a18:	90 e0       	ldi	r25, 0x00	; 0
    8a1a:	91 83       	std	Z+1, r25	; 0x01
    8a1c:	80 83       	st	Z, r24
    8a1e:	64 c0       	rjmp	.+200    	; 0x8ae8 <main+0x24d6>
	else if (__tmp > 65535)
    8a20:	fe 01       	movw	r30, r28
    8a22:	e5 53       	subi	r30, 0x35	; 53
    8a24:	ff 4f       	sbci	r31, 0xFF	; 255
    8a26:	60 81       	ld	r22, Z
    8a28:	71 81       	ldd	r23, Z+1	; 0x01
    8a2a:	82 81       	ldd	r24, Z+2	; 0x02
    8a2c:	93 81       	ldd	r25, Z+3	; 0x03
    8a2e:	20 e0       	ldi	r18, 0x00	; 0
    8a30:	3f ef       	ldi	r19, 0xFF	; 255
    8a32:	4f e7       	ldi	r20, 0x7F	; 127
    8a34:	57 e4       	ldi	r21, 0x47	; 71
    8a36:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    8a3a:	18 16       	cp	r1, r24
    8a3c:	0c f0       	brlt	.+2      	; 0x8a40 <main+0x242e>
    8a3e:	43 c0       	rjmp	.+134    	; 0x8ac6 <main+0x24b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a40:	fe 01       	movw	r30, r28
    8a42:	e1 53       	subi	r30, 0x31	; 49
    8a44:	ff 4f       	sbci	r31, 0xFF	; 255
    8a46:	60 81       	ld	r22, Z
    8a48:	71 81       	ldd	r23, Z+1	; 0x01
    8a4a:	82 81       	ldd	r24, Z+2	; 0x02
    8a4c:	93 81       	ldd	r25, Z+3	; 0x03
    8a4e:	20 e0       	ldi	r18, 0x00	; 0
    8a50:	30 e0       	ldi	r19, 0x00	; 0
    8a52:	40 e2       	ldi	r20, 0x20	; 32
    8a54:	51 e4       	ldi	r21, 0x41	; 65
    8a56:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8a5a:	dc 01       	movw	r26, r24
    8a5c:	cb 01       	movw	r24, r22
    8a5e:	8e 01       	movw	r16, r28
    8a60:	07 53       	subi	r16, 0x37	; 55
    8a62:	1f 4f       	sbci	r17, 0xFF	; 255
    8a64:	bc 01       	movw	r22, r24
    8a66:	cd 01       	movw	r24, r26
    8a68:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8a6c:	dc 01       	movw	r26, r24
    8a6e:	cb 01       	movw	r24, r22
    8a70:	f8 01       	movw	r30, r16
    8a72:	91 83       	std	Z+1, r25	; 0x01
    8a74:	80 83       	st	Z, r24
    8a76:	1f c0       	rjmp	.+62     	; 0x8ab6 <main+0x24a4>
    8a78:	fe 01       	movw	r30, r28
    8a7a:	e9 53       	subi	r30, 0x39	; 57
    8a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    8a7e:	80 e9       	ldi	r24, 0x90	; 144
    8a80:	91 e0       	ldi	r25, 0x01	; 1
    8a82:	91 83       	std	Z+1, r25	; 0x01
    8a84:	80 83       	st	Z, r24
    8a86:	fe 01       	movw	r30, r28
    8a88:	e9 53       	subi	r30, 0x39	; 57
    8a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    8a8c:	80 81       	ld	r24, Z
    8a8e:	91 81       	ldd	r25, Z+1	; 0x01
    8a90:	01 97       	sbiw	r24, 0x01	; 1
    8a92:	f1 f7       	brne	.-4      	; 0x8a90 <main+0x247e>
    8a94:	fe 01       	movw	r30, r28
    8a96:	e9 53       	subi	r30, 0x39	; 57
    8a98:	ff 4f       	sbci	r31, 0xFF	; 255
    8a9a:	91 83       	std	Z+1, r25	; 0x01
    8a9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a9e:	de 01       	movw	r26, r28
    8aa0:	a7 53       	subi	r26, 0x37	; 55
    8aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    8aa4:	fe 01       	movw	r30, r28
    8aa6:	e7 53       	subi	r30, 0x37	; 55
    8aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    8aaa:	80 81       	ld	r24, Z
    8aac:	91 81       	ldd	r25, Z+1	; 0x01
    8aae:	01 97       	sbiw	r24, 0x01	; 1
    8ab0:	11 96       	adiw	r26, 0x01	; 1
    8ab2:	9c 93       	st	X, r25
    8ab4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8ab6:	fe 01       	movw	r30, r28
    8ab8:	e7 53       	subi	r30, 0x37	; 55
    8aba:	ff 4f       	sbci	r31, 0xFF	; 255
    8abc:	80 81       	ld	r24, Z
    8abe:	91 81       	ldd	r25, Z+1	; 0x01
    8ac0:	00 97       	sbiw	r24, 0x00	; 0
    8ac2:	d1 f6       	brne	.-76     	; 0x8a78 <main+0x2466>
    8ac4:	28 c0       	rjmp	.+80     	; 0x8b16 <main+0x2504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8ac6:	8e 01       	movw	r16, r28
    8ac8:	07 53       	subi	r16, 0x37	; 55
    8aca:	1f 4f       	sbci	r17, 0xFF	; 255
    8acc:	fe 01       	movw	r30, r28
    8ace:	e5 53       	subi	r30, 0x35	; 53
    8ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    8ad2:	60 81       	ld	r22, Z
    8ad4:	71 81       	ldd	r23, Z+1	; 0x01
    8ad6:	82 81       	ldd	r24, Z+2	; 0x02
    8ad8:	93 81       	ldd	r25, Z+3	; 0x03
    8ada:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8ade:	dc 01       	movw	r26, r24
    8ae0:	cb 01       	movw	r24, r22
    8ae2:	f8 01       	movw	r30, r16
    8ae4:	91 83       	std	Z+1, r25	; 0x01
    8ae6:	80 83       	st	Z, r24
    8ae8:	de 01       	movw	r26, r28
    8aea:	ab 53       	subi	r26, 0x3B	; 59
    8aec:	bf 4f       	sbci	r27, 0xFF	; 255
    8aee:	fe 01       	movw	r30, r28
    8af0:	e7 53       	subi	r30, 0x37	; 55
    8af2:	ff 4f       	sbci	r31, 0xFF	; 255
    8af4:	80 81       	ld	r24, Z
    8af6:	91 81       	ldd	r25, Z+1	; 0x01
    8af8:	11 96       	adiw	r26, 0x01	; 1
    8afa:	9c 93       	st	X, r25
    8afc:	8e 93       	st	-X, r24
    8afe:	fe 01       	movw	r30, r28
    8b00:	eb 53       	subi	r30, 0x3B	; 59
    8b02:	ff 4f       	sbci	r31, 0xFF	; 255
    8b04:	80 81       	ld	r24, Z
    8b06:	91 81       	ldd	r25, Z+1	; 0x01
    8b08:	01 97       	sbiw	r24, 0x01	; 1
    8b0a:	f1 f7       	brne	.-4      	; 0x8b08 <main+0x24f6>
    8b0c:	fe 01       	movw	r30, r28
    8b0e:	eb 53       	subi	r30, 0x3B	; 59
    8b10:	ff 4f       	sbci	r31, 0xFF	; 255
    8b12:	91 83       	std	Z+1, r25	; 0x01
    8b14:	80 83       	st	Z, r24
			_delay_ms(500);

			/*for loop to enter password and if is wrong enter it again till r reach 3 */
			for(r=0 ; r<3 ;r++)
    8b16:	fe 01       	movw	r30, r28
    8b18:	ef 53       	subi	r30, 0x3F	; 63
    8b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    8b1c:	10 82       	st	Z, r1
    8b1e:	f4 c4       	rjmp	.+2536   	; 0x9508 <main+0x2ef6>
			{
				/*check for temperature */
				check();
    8b20:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>

				/*for loop to enter the password */
				for(i=0 ; i<5 ; i++)
    8b24:	fe 01       	movw	r30, r28
    8b26:	ea 53       	subi	r30, 0x3A	; 58
    8b28:	fe 4f       	sbci	r31, 0xFE	; 254
    8b2a:	10 82       	st	Z, r1
    8b2c:	9e c1       	rjmp	.+828    	; 0x8e6a <main+0x2858>
				{
					/*check for temperature */
					check();
    8b2e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>
					num2[i] = get_Value();
    8b32:	fe 01       	movw	r30, r28
    8b34:	ea 53       	subi	r30, 0x3A	; 58
    8b36:	fe 4f       	sbci	r31, 0xFE	; 254
    8b38:	80 81       	ld	r24, Z
    8b3a:	08 2f       	mov	r16, r24
    8b3c:	10 e0       	ldi	r17, 0x00	; 0
    8b3e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <get_Value>
    8b42:	28 2f       	mov	r18, r24
    8b44:	ce 01       	movw	r24, r28
    8b46:	83 59       	subi	r24, 0x93	; 147
    8b48:	9d 4f       	sbci	r25, 0xFD	; 253
    8b4a:	fc 01       	movw	r30, r24
    8b4c:	e0 0f       	add	r30, r16
    8b4e:	f1 1f       	adc	r31, r17
    8b50:	20 83       	st	Z, r18
					if(i==0)
    8b52:	fe 01       	movw	r30, r28
    8b54:	ea 53       	subi	r30, 0x3A	; 58
    8b56:	fe 4f       	sbci	r31, 0xFE	; 254
    8b58:	80 81       	ld	r24, Z
    8b5a:	88 23       	and	r24, r24
    8b5c:	21 f4       	brne	.+8      	; 0x8b66 <main+0x2554>
						/*delete lcd content */
						LCD_SendCommand(DISPLAY_CLEAR);
    8b5e:	81 e0       	ldi	r24, 0x01	; 1
    8b60:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    8b64:	03 c0       	rjmp	.+6      	; 0x8b6c <main+0x255a>
					else
						LCD_SendCommand(CURSOR_SHIFT_RIGHT);
    8b66:	84 e1       	ldi	r24, 0x14	; 20
    8b68:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    8b6c:	fe 01       	movw	r30, r28
    8b6e:	ef 53       	subi	r30, 0x3F	; 63
    8b70:	ff 4f       	sbci	r31, 0xFF	; 255
    8b72:	80 e0       	ldi	r24, 0x00	; 0
    8b74:	90 e0       	ldi	r25, 0x00	; 0
    8b76:	a0 ea       	ldi	r26, 0xA0	; 160
    8b78:	b1 e4       	ldi	r27, 0x41	; 65
    8b7a:	80 83       	st	Z, r24
    8b7c:	91 83       	std	Z+1, r25	; 0x01
    8b7e:	a2 83       	std	Z+2, r26	; 0x02
    8b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8b82:	8e 01       	movw	r16, r28
    8b84:	03 54       	subi	r16, 0x43	; 67
    8b86:	1f 4f       	sbci	r17, 0xFF	; 255
    8b88:	fe 01       	movw	r30, r28
    8b8a:	ef 53       	subi	r30, 0x3F	; 63
    8b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    8b8e:	60 81       	ld	r22, Z
    8b90:	71 81       	ldd	r23, Z+1	; 0x01
    8b92:	82 81       	ldd	r24, Z+2	; 0x02
    8b94:	93 81       	ldd	r25, Z+3	; 0x03
    8b96:	20 e0       	ldi	r18, 0x00	; 0
    8b98:	30 e0       	ldi	r19, 0x00	; 0
    8b9a:	4a e7       	ldi	r20, 0x7A	; 122
    8b9c:	55 e4       	ldi	r21, 0x45	; 69
    8b9e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8ba2:	dc 01       	movw	r26, r24
    8ba4:	cb 01       	movw	r24, r22
    8ba6:	f8 01       	movw	r30, r16
    8ba8:	80 83       	st	Z, r24
    8baa:	91 83       	std	Z+1, r25	; 0x01
    8bac:	a2 83       	std	Z+2, r26	; 0x02
    8bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8bb0:	fe 01       	movw	r30, r28
    8bb2:	e3 54       	subi	r30, 0x43	; 67
    8bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    8bb6:	60 81       	ld	r22, Z
    8bb8:	71 81       	ldd	r23, Z+1	; 0x01
    8bba:	82 81       	ldd	r24, Z+2	; 0x02
    8bbc:	93 81       	ldd	r25, Z+3	; 0x03
    8bbe:	20 e0       	ldi	r18, 0x00	; 0
    8bc0:	30 e0       	ldi	r19, 0x00	; 0
    8bc2:	40 e8       	ldi	r20, 0x80	; 128
    8bc4:	5f e3       	ldi	r21, 0x3F	; 63
    8bc6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    8bca:	88 23       	and	r24, r24
    8bcc:	44 f4       	brge	.+16     	; 0x8bde <main+0x25cc>
		__ticks = 1;
    8bce:	fe 01       	movw	r30, r28
    8bd0:	e5 54       	subi	r30, 0x45	; 69
    8bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    8bd4:	81 e0       	ldi	r24, 0x01	; 1
    8bd6:	90 e0       	ldi	r25, 0x00	; 0
    8bd8:	91 83       	std	Z+1, r25	; 0x01
    8bda:	80 83       	st	Z, r24
    8bdc:	64 c0       	rjmp	.+200    	; 0x8ca6 <main+0x2694>
	else if (__tmp > 65535)
    8bde:	fe 01       	movw	r30, r28
    8be0:	e3 54       	subi	r30, 0x43	; 67
    8be2:	ff 4f       	sbci	r31, 0xFF	; 255
    8be4:	60 81       	ld	r22, Z
    8be6:	71 81       	ldd	r23, Z+1	; 0x01
    8be8:	82 81       	ldd	r24, Z+2	; 0x02
    8bea:	93 81       	ldd	r25, Z+3	; 0x03
    8bec:	20 e0       	ldi	r18, 0x00	; 0
    8bee:	3f ef       	ldi	r19, 0xFF	; 255
    8bf0:	4f e7       	ldi	r20, 0x7F	; 127
    8bf2:	57 e4       	ldi	r21, 0x47	; 71
    8bf4:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    8bf8:	18 16       	cp	r1, r24
    8bfa:	0c f0       	brlt	.+2      	; 0x8bfe <main+0x25ec>
    8bfc:	43 c0       	rjmp	.+134    	; 0x8c84 <main+0x2672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8bfe:	fe 01       	movw	r30, r28
    8c00:	ef 53       	subi	r30, 0x3F	; 63
    8c02:	ff 4f       	sbci	r31, 0xFF	; 255
    8c04:	60 81       	ld	r22, Z
    8c06:	71 81       	ldd	r23, Z+1	; 0x01
    8c08:	82 81       	ldd	r24, Z+2	; 0x02
    8c0a:	93 81       	ldd	r25, Z+3	; 0x03
    8c0c:	20 e0       	ldi	r18, 0x00	; 0
    8c0e:	30 e0       	ldi	r19, 0x00	; 0
    8c10:	40 e2       	ldi	r20, 0x20	; 32
    8c12:	51 e4       	ldi	r21, 0x41	; 65
    8c14:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8c18:	dc 01       	movw	r26, r24
    8c1a:	cb 01       	movw	r24, r22
    8c1c:	8e 01       	movw	r16, r28
    8c1e:	05 54       	subi	r16, 0x45	; 69
    8c20:	1f 4f       	sbci	r17, 0xFF	; 255
    8c22:	bc 01       	movw	r22, r24
    8c24:	cd 01       	movw	r24, r26
    8c26:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8c2a:	dc 01       	movw	r26, r24
    8c2c:	cb 01       	movw	r24, r22
    8c2e:	f8 01       	movw	r30, r16
    8c30:	91 83       	std	Z+1, r25	; 0x01
    8c32:	80 83       	st	Z, r24
    8c34:	1f c0       	rjmp	.+62     	; 0x8c74 <main+0x2662>
    8c36:	fe 01       	movw	r30, r28
    8c38:	e7 54       	subi	r30, 0x47	; 71
    8c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    8c3c:	80 e9       	ldi	r24, 0x90	; 144
    8c3e:	91 e0       	ldi	r25, 0x01	; 1
    8c40:	91 83       	std	Z+1, r25	; 0x01
    8c42:	80 83       	st	Z, r24
    8c44:	fe 01       	movw	r30, r28
    8c46:	e7 54       	subi	r30, 0x47	; 71
    8c48:	ff 4f       	sbci	r31, 0xFF	; 255
    8c4a:	80 81       	ld	r24, Z
    8c4c:	91 81       	ldd	r25, Z+1	; 0x01
    8c4e:	01 97       	sbiw	r24, 0x01	; 1
    8c50:	f1 f7       	brne	.-4      	; 0x8c4e <main+0x263c>
    8c52:	fe 01       	movw	r30, r28
    8c54:	e7 54       	subi	r30, 0x47	; 71
    8c56:	ff 4f       	sbci	r31, 0xFF	; 255
    8c58:	91 83       	std	Z+1, r25	; 0x01
    8c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c5c:	de 01       	movw	r26, r28
    8c5e:	a5 54       	subi	r26, 0x45	; 69
    8c60:	bf 4f       	sbci	r27, 0xFF	; 255
    8c62:	fe 01       	movw	r30, r28
    8c64:	e5 54       	subi	r30, 0x45	; 69
    8c66:	ff 4f       	sbci	r31, 0xFF	; 255
    8c68:	80 81       	ld	r24, Z
    8c6a:	91 81       	ldd	r25, Z+1	; 0x01
    8c6c:	01 97       	sbiw	r24, 0x01	; 1
    8c6e:	11 96       	adiw	r26, 0x01	; 1
    8c70:	9c 93       	st	X, r25
    8c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8c74:	fe 01       	movw	r30, r28
    8c76:	e5 54       	subi	r30, 0x45	; 69
    8c78:	ff 4f       	sbci	r31, 0xFF	; 255
    8c7a:	80 81       	ld	r24, Z
    8c7c:	91 81       	ldd	r25, Z+1	; 0x01
    8c7e:	00 97       	sbiw	r24, 0x00	; 0
    8c80:	d1 f6       	brne	.-76     	; 0x8c36 <main+0x2624>
    8c82:	27 c0       	rjmp	.+78     	; 0x8cd2 <main+0x26c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8c84:	8e 01       	movw	r16, r28
    8c86:	05 54       	subi	r16, 0x45	; 69
    8c88:	1f 4f       	sbci	r17, 0xFF	; 255
    8c8a:	fe 01       	movw	r30, r28
    8c8c:	e3 54       	subi	r30, 0x43	; 67
    8c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    8c90:	60 81       	ld	r22, Z
    8c92:	71 81       	ldd	r23, Z+1	; 0x01
    8c94:	82 81       	ldd	r24, Z+2	; 0x02
    8c96:	93 81       	ldd	r25, Z+3	; 0x03
    8c98:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8c9c:	dc 01       	movw	r26, r24
    8c9e:	cb 01       	movw	r24, r22
    8ca0:	f8 01       	movw	r30, r16
    8ca2:	91 83       	std	Z+1, r25	; 0x01
    8ca4:	80 83       	st	Z, r24
    8ca6:	de 01       	movw	r26, r28
    8ca8:	a9 54       	subi	r26, 0x49	; 73
    8caa:	bf 4f       	sbci	r27, 0xFF	; 255
    8cac:	fe 01       	movw	r30, r28
    8cae:	e5 54       	subi	r30, 0x45	; 69
    8cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    8cb2:	80 81       	ld	r24, Z
    8cb4:	91 81       	ldd	r25, Z+1	; 0x01
    8cb6:	8d 93       	st	X+, r24
    8cb8:	9c 93       	st	X, r25
    8cba:	fe 01       	movw	r30, r28
    8cbc:	e9 54       	subi	r30, 0x49	; 73
    8cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    8cc0:	80 81       	ld	r24, Z
    8cc2:	91 81       	ldd	r25, Z+1	; 0x01
    8cc4:	01 97       	sbiw	r24, 0x01	; 1
    8cc6:	f1 f7       	brne	.-4      	; 0x8cc4 <main+0x26b2>
    8cc8:	fe 01       	movw	r30, r28
    8cca:	e9 54       	subi	r30, 0x49	; 73
    8ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    8cce:	91 83       	std	Z+1, r25	; 0x01
    8cd0:	80 83       	st	Z, r24
					_delay_ms(20);
					LCD_PrintCharacter(num2[i] + 48);
    8cd2:	fe 01       	movw	r30, r28
    8cd4:	ea 53       	subi	r30, 0x3A	; 58
    8cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    8cd8:	80 81       	ld	r24, Z
    8cda:	28 2f       	mov	r18, r24
    8cdc:	30 e0       	ldi	r19, 0x00	; 0
    8cde:	ce 01       	movw	r24, r28
    8ce0:	83 59       	subi	r24, 0x93	; 147
    8ce2:	9d 4f       	sbci	r25, 0xFD	; 253
    8ce4:	fc 01       	movw	r30, r24
    8ce6:	e2 0f       	add	r30, r18
    8ce8:	f3 1f       	adc	r31, r19
    8cea:	80 81       	ld	r24, Z
    8cec:	80 5d       	subi	r24, 0xD0	; 208
    8cee:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD_PrintCharacter>
    8cf2:	fe 01       	movw	r30, r28
    8cf4:	ed 54       	subi	r30, 0x4D	; 77
    8cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    8cf8:	80 e0       	ldi	r24, 0x00	; 0
    8cfa:	90 e0       	ldi	r25, 0x00	; 0
    8cfc:	aa ef       	ldi	r26, 0xFA	; 250
    8cfe:	b3 e4       	ldi	r27, 0x43	; 67
    8d00:	80 83       	st	Z, r24
    8d02:	91 83       	std	Z+1, r25	; 0x01
    8d04:	a2 83       	std	Z+2, r26	; 0x02
    8d06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8d08:	8e 01       	movw	r16, r28
    8d0a:	01 55       	subi	r16, 0x51	; 81
    8d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    8d0e:	fe 01       	movw	r30, r28
    8d10:	ed 54       	subi	r30, 0x4D	; 77
    8d12:	ff 4f       	sbci	r31, 0xFF	; 255
    8d14:	60 81       	ld	r22, Z
    8d16:	71 81       	ldd	r23, Z+1	; 0x01
    8d18:	82 81       	ldd	r24, Z+2	; 0x02
    8d1a:	93 81       	ldd	r25, Z+3	; 0x03
    8d1c:	20 e0       	ldi	r18, 0x00	; 0
    8d1e:	30 e0       	ldi	r19, 0x00	; 0
    8d20:	4a e7       	ldi	r20, 0x7A	; 122
    8d22:	55 e4       	ldi	r21, 0x45	; 69
    8d24:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8d28:	dc 01       	movw	r26, r24
    8d2a:	cb 01       	movw	r24, r22
    8d2c:	f8 01       	movw	r30, r16
    8d2e:	80 83       	st	Z, r24
    8d30:	91 83       	std	Z+1, r25	; 0x01
    8d32:	a2 83       	std	Z+2, r26	; 0x02
    8d34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8d36:	fe 01       	movw	r30, r28
    8d38:	e1 55       	subi	r30, 0x51	; 81
    8d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    8d3c:	60 81       	ld	r22, Z
    8d3e:	71 81       	ldd	r23, Z+1	; 0x01
    8d40:	82 81       	ldd	r24, Z+2	; 0x02
    8d42:	93 81       	ldd	r25, Z+3	; 0x03
    8d44:	20 e0       	ldi	r18, 0x00	; 0
    8d46:	30 e0       	ldi	r19, 0x00	; 0
    8d48:	40 e8       	ldi	r20, 0x80	; 128
    8d4a:	5f e3       	ldi	r21, 0x3F	; 63
    8d4c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    8d50:	88 23       	and	r24, r24
    8d52:	44 f4       	brge	.+16     	; 0x8d64 <main+0x2752>
		__ticks = 1;
    8d54:	fe 01       	movw	r30, r28
    8d56:	e3 55       	subi	r30, 0x53	; 83
    8d58:	ff 4f       	sbci	r31, 0xFF	; 255
    8d5a:	81 e0       	ldi	r24, 0x01	; 1
    8d5c:	90 e0       	ldi	r25, 0x00	; 0
    8d5e:	91 83       	std	Z+1, r25	; 0x01
    8d60:	80 83       	st	Z, r24
    8d62:	64 c0       	rjmp	.+200    	; 0x8e2c <main+0x281a>
	else if (__tmp > 65535)
    8d64:	fe 01       	movw	r30, r28
    8d66:	e1 55       	subi	r30, 0x51	; 81
    8d68:	ff 4f       	sbci	r31, 0xFF	; 255
    8d6a:	60 81       	ld	r22, Z
    8d6c:	71 81       	ldd	r23, Z+1	; 0x01
    8d6e:	82 81       	ldd	r24, Z+2	; 0x02
    8d70:	93 81       	ldd	r25, Z+3	; 0x03
    8d72:	20 e0       	ldi	r18, 0x00	; 0
    8d74:	3f ef       	ldi	r19, 0xFF	; 255
    8d76:	4f e7       	ldi	r20, 0x7F	; 127
    8d78:	57 e4       	ldi	r21, 0x47	; 71
    8d7a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    8d7e:	18 16       	cp	r1, r24
    8d80:	0c f0       	brlt	.+2      	; 0x8d84 <main+0x2772>
    8d82:	43 c0       	rjmp	.+134    	; 0x8e0a <main+0x27f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8d84:	fe 01       	movw	r30, r28
    8d86:	ed 54       	subi	r30, 0x4D	; 77
    8d88:	ff 4f       	sbci	r31, 0xFF	; 255
    8d8a:	60 81       	ld	r22, Z
    8d8c:	71 81       	ldd	r23, Z+1	; 0x01
    8d8e:	82 81       	ldd	r24, Z+2	; 0x02
    8d90:	93 81       	ldd	r25, Z+3	; 0x03
    8d92:	20 e0       	ldi	r18, 0x00	; 0
    8d94:	30 e0       	ldi	r19, 0x00	; 0
    8d96:	40 e2       	ldi	r20, 0x20	; 32
    8d98:	51 e4       	ldi	r21, 0x41	; 65
    8d9a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8d9e:	dc 01       	movw	r26, r24
    8da0:	cb 01       	movw	r24, r22
    8da2:	8e 01       	movw	r16, r28
    8da4:	03 55       	subi	r16, 0x53	; 83
    8da6:	1f 4f       	sbci	r17, 0xFF	; 255
    8da8:	bc 01       	movw	r22, r24
    8daa:	cd 01       	movw	r24, r26
    8dac:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8db0:	dc 01       	movw	r26, r24
    8db2:	cb 01       	movw	r24, r22
    8db4:	f8 01       	movw	r30, r16
    8db6:	91 83       	std	Z+1, r25	; 0x01
    8db8:	80 83       	st	Z, r24
    8dba:	1f c0       	rjmp	.+62     	; 0x8dfa <main+0x27e8>
    8dbc:	fe 01       	movw	r30, r28
    8dbe:	e5 55       	subi	r30, 0x55	; 85
    8dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    8dc2:	80 e9       	ldi	r24, 0x90	; 144
    8dc4:	91 e0       	ldi	r25, 0x01	; 1
    8dc6:	91 83       	std	Z+1, r25	; 0x01
    8dc8:	80 83       	st	Z, r24
    8dca:	fe 01       	movw	r30, r28
    8dcc:	e5 55       	subi	r30, 0x55	; 85
    8dce:	ff 4f       	sbci	r31, 0xFF	; 255
    8dd0:	80 81       	ld	r24, Z
    8dd2:	91 81       	ldd	r25, Z+1	; 0x01
    8dd4:	01 97       	sbiw	r24, 0x01	; 1
    8dd6:	f1 f7       	brne	.-4      	; 0x8dd4 <main+0x27c2>
    8dd8:	fe 01       	movw	r30, r28
    8dda:	e5 55       	subi	r30, 0x55	; 85
    8ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    8dde:	91 83       	std	Z+1, r25	; 0x01
    8de0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8de2:	de 01       	movw	r26, r28
    8de4:	a3 55       	subi	r26, 0x53	; 83
    8de6:	bf 4f       	sbci	r27, 0xFF	; 255
    8de8:	fe 01       	movw	r30, r28
    8dea:	e3 55       	subi	r30, 0x53	; 83
    8dec:	ff 4f       	sbci	r31, 0xFF	; 255
    8dee:	80 81       	ld	r24, Z
    8df0:	91 81       	ldd	r25, Z+1	; 0x01
    8df2:	01 97       	sbiw	r24, 0x01	; 1
    8df4:	11 96       	adiw	r26, 0x01	; 1
    8df6:	9c 93       	st	X, r25
    8df8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8dfa:	fe 01       	movw	r30, r28
    8dfc:	e3 55       	subi	r30, 0x53	; 83
    8dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    8e00:	80 81       	ld	r24, Z
    8e02:	91 81       	ldd	r25, Z+1	; 0x01
    8e04:	00 97       	sbiw	r24, 0x00	; 0
    8e06:	d1 f6       	brne	.-76     	; 0x8dbc <main+0x27aa>
    8e08:	27 c0       	rjmp	.+78     	; 0x8e58 <main+0x2846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8e0a:	8e 01       	movw	r16, r28
    8e0c:	03 55       	subi	r16, 0x53	; 83
    8e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e10:	fe 01       	movw	r30, r28
    8e12:	e1 55       	subi	r30, 0x51	; 81
    8e14:	ff 4f       	sbci	r31, 0xFF	; 255
    8e16:	60 81       	ld	r22, Z
    8e18:	71 81       	ldd	r23, Z+1	; 0x01
    8e1a:	82 81       	ldd	r24, Z+2	; 0x02
    8e1c:	93 81       	ldd	r25, Z+3	; 0x03
    8e1e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8e22:	dc 01       	movw	r26, r24
    8e24:	cb 01       	movw	r24, r22
    8e26:	f8 01       	movw	r30, r16
    8e28:	91 83       	std	Z+1, r25	; 0x01
    8e2a:	80 83       	st	Z, r24
    8e2c:	de 01       	movw	r26, r28
    8e2e:	a7 55       	subi	r26, 0x57	; 87
    8e30:	bf 4f       	sbci	r27, 0xFF	; 255
    8e32:	fe 01       	movw	r30, r28
    8e34:	e3 55       	subi	r30, 0x53	; 83
    8e36:	ff 4f       	sbci	r31, 0xFF	; 255
    8e38:	80 81       	ld	r24, Z
    8e3a:	91 81       	ldd	r25, Z+1	; 0x01
    8e3c:	8d 93       	st	X+, r24
    8e3e:	9c 93       	st	X, r25
    8e40:	fe 01       	movw	r30, r28
    8e42:	e7 55       	subi	r30, 0x57	; 87
    8e44:	ff 4f       	sbci	r31, 0xFF	; 255
    8e46:	80 81       	ld	r24, Z
    8e48:	91 81       	ldd	r25, Z+1	; 0x01
    8e4a:	01 97       	sbiw	r24, 0x01	; 1
    8e4c:	f1 f7       	brne	.-4      	; 0x8e4a <main+0x2838>
    8e4e:	fe 01       	movw	r30, r28
    8e50:	e7 55       	subi	r30, 0x57	; 87
    8e52:	ff 4f       	sbci	r31, 0xFF	; 255
    8e54:	91 83       	std	Z+1, r25	; 0x01
    8e56:	80 83       	st	Z, r24
			{
				/*check for temperature */
				check();

				/*for loop to enter the password */
				for(i=0 ; i<5 ; i++)
    8e58:	de 01       	movw	r26, r28
    8e5a:	aa 53       	subi	r26, 0x3A	; 58
    8e5c:	be 4f       	sbci	r27, 0xFE	; 254
    8e5e:	fe 01       	movw	r30, r28
    8e60:	ea 53       	subi	r30, 0x3A	; 58
    8e62:	fe 4f       	sbci	r31, 0xFE	; 254
    8e64:	80 81       	ld	r24, Z
    8e66:	8f 5f       	subi	r24, 0xFF	; 255
    8e68:	8c 93       	st	X, r24
    8e6a:	fe 01       	movw	r30, r28
    8e6c:	ea 53       	subi	r30, 0x3A	; 58
    8e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    8e70:	80 81       	ld	r24, Z
    8e72:	85 30       	cpi	r24, 0x05	; 5
    8e74:	08 f4       	brcc	.+2      	; 0x8e78 <main+0x2866>
    8e76:	5b ce       	rjmp	.-842    	; 0x8b2e <main+0x251c>
					_delay_ms(20);
					LCD_PrintCharacter(num2[i] + 48);
					_delay_ms(500);
				}
				/*for loop to check mismatch */
				for(i=0 ; i<5 ; i++)
    8e78:	fe 01       	movw	r30, r28
    8e7a:	ea 53       	subi	r30, 0x3A	; 58
    8e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    8e7e:	10 82       	st	Z, r1
    8e80:	21 c3       	rjmp	.+1602   	; 0x94c4 <main+0x2eb2>
				{
					if(num1[i] != num2[i])
    8e82:	fe 01       	movw	r30, r28
    8e84:	ea 53       	subi	r30, 0x3A	; 58
    8e86:	fe 4f       	sbci	r31, 0xFE	; 254
    8e88:	80 81       	ld	r24, Z
    8e8a:	28 2f       	mov	r18, r24
    8e8c:	30 e0       	ldi	r19, 0x00	; 0
    8e8e:	ce 01       	movw	r24, r28
    8e90:	89 59       	subi	r24, 0x99	; 153
    8e92:	9d 4f       	sbci	r25, 0xFD	; 253
    8e94:	fc 01       	movw	r30, r24
    8e96:	e2 0f       	add	r30, r18
    8e98:	f3 1f       	adc	r31, r19
    8e9a:	40 81       	ld	r20, Z
    8e9c:	fe 01       	movw	r30, r28
    8e9e:	ea 53       	subi	r30, 0x3A	; 58
    8ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    8ea2:	80 81       	ld	r24, Z
    8ea4:	28 2f       	mov	r18, r24
    8ea6:	30 e0       	ldi	r19, 0x00	; 0
    8ea8:	ce 01       	movw	r24, r28
    8eaa:	83 59       	subi	r24, 0x93	; 147
    8eac:	9d 4f       	sbci	r25, 0xFD	; 253
    8eae:	fc 01       	movw	r30, r24
    8eb0:	e2 0f       	add	r30, r18
    8eb2:	f3 1f       	adc	r31, r19
    8eb4:	80 81       	ld	r24, Z
    8eb6:	48 17       	cp	r20, r24
    8eb8:	09 f4       	brne	.+2      	; 0x8ebc <main+0x28aa>
    8eba:	ef c2       	rjmp	.+1502   	; 0x949a <main+0x2e88>
					{
						/*delete lcd content */
						LCD_SendCommand(DISPLAY_CLEAR);
    8ebc:	81 e0       	ldi	r24, 0x01	; 1
    8ebe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    8ec2:	fe 01       	movw	r30, r28
    8ec4:	eb 55       	subi	r30, 0x5B	; 91
    8ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    8ec8:	80 e0       	ldi	r24, 0x00	; 0
    8eca:	90 e0       	ldi	r25, 0x00	; 0
    8ecc:	a0 ea       	ldi	r26, 0xA0	; 160
    8ece:	b1 e4       	ldi	r27, 0x41	; 65
    8ed0:	80 83       	st	Z, r24
    8ed2:	91 83       	std	Z+1, r25	; 0x01
    8ed4:	a2 83       	std	Z+2, r26	; 0x02
    8ed6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ed8:	8e 01       	movw	r16, r28
    8eda:	0f 55       	subi	r16, 0x5F	; 95
    8edc:	1f 4f       	sbci	r17, 0xFF	; 255
    8ede:	fe 01       	movw	r30, r28
    8ee0:	eb 55       	subi	r30, 0x5B	; 91
    8ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    8ee4:	60 81       	ld	r22, Z
    8ee6:	71 81       	ldd	r23, Z+1	; 0x01
    8ee8:	82 81       	ldd	r24, Z+2	; 0x02
    8eea:	93 81       	ldd	r25, Z+3	; 0x03
    8eec:	20 e0       	ldi	r18, 0x00	; 0
    8eee:	30 e0       	ldi	r19, 0x00	; 0
    8ef0:	4a e7       	ldi	r20, 0x7A	; 122
    8ef2:	55 e4       	ldi	r21, 0x45	; 69
    8ef4:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8ef8:	dc 01       	movw	r26, r24
    8efa:	cb 01       	movw	r24, r22
    8efc:	f8 01       	movw	r30, r16
    8efe:	80 83       	st	Z, r24
    8f00:	91 83       	std	Z+1, r25	; 0x01
    8f02:	a2 83       	std	Z+2, r26	; 0x02
    8f04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8f06:	fe 01       	movw	r30, r28
    8f08:	ef 55       	subi	r30, 0x5F	; 95
    8f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    8f0c:	60 81       	ld	r22, Z
    8f0e:	71 81       	ldd	r23, Z+1	; 0x01
    8f10:	82 81       	ldd	r24, Z+2	; 0x02
    8f12:	93 81       	ldd	r25, Z+3	; 0x03
    8f14:	20 e0       	ldi	r18, 0x00	; 0
    8f16:	30 e0       	ldi	r19, 0x00	; 0
    8f18:	40 e8       	ldi	r20, 0x80	; 128
    8f1a:	5f e3       	ldi	r21, 0x3F	; 63
    8f1c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    8f20:	88 23       	and	r24, r24
    8f22:	44 f4       	brge	.+16     	; 0x8f34 <main+0x2922>
		__ticks = 1;
    8f24:	fe 01       	movw	r30, r28
    8f26:	e1 56       	subi	r30, 0x61	; 97
    8f28:	ff 4f       	sbci	r31, 0xFF	; 255
    8f2a:	81 e0       	ldi	r24, 0x01	; 1
    8f2c:	90 e0       	ldi	r25, 0x00	; 0
    8f2e:	91 83       	std	Z+1, r25	; 0x01
    8f30:	80 83       	st	Z, r24
    8f32:	64 c0       	rjmp	.+200    	; 0x8ffc <main+0x29ea>
	else if (__tmp > 65535)
    8f34:	fe 01       	movw	r30, r28
    8f36:	ef 55       	subi	r30, 0x5F	; 95
    8f38:	ff 4f       	sbci	r31, 0xFF	; 255
    8f3a:	60 81       	ld	r22, Z
    8f3c:	71 81       	ldd	r23, Z+1	; 0x01
    8f3e:	82 81       	ldd	r24, Z+2	; 0x02
    8f40:	93 81       	ldd	r25, Z+3	; 0x03
    8f42:	20 e0       	ldi	r18, 0x00	; 0
    8f44:	3f ef       	ldi	r19, 0xFF	; 255
    8f46:	4f e7       	ldi	r20, 0x7F	; 127
    8f48:	57 e4       	ldi	r21, 0x47	; 71
    8f4a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    8f4e:	18 16       	cp	r1, r24
    8f50:	0c f0       	brlt	.+2      	; 0x8f54 <main+0x2942>
    8f52:	43 c0       	rjmp	.+134    	; 0x8fda <main+0x29c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8f54:	fe 01       	movw	r30, r28
    8f56:	eb 55       	subi	r30, 0x5B	; 91
    8f58:	ff 4f       	sbci	r31, 0xFF	; 255
    8f5a:	60 81       	ld	r22, Z
    8f5c:	71 81       	ldd	r23, Z+1	; 0x01
    8f5e:	82 81       	ldd	r24, Z+2	; 0x02
    8f60:	93 81       	ldd	r25, Z+3	; 0x03
    8f62:	20 e0       	ldi	r18, 0x00	; 0
    8f64:	30 e0       	ldi	r19, 0x00	; 0
    8f66:	40 e2       	ldi	r20, 0x20	; 32
    8f68:	51 e4       	ldi	r21, 0x41	; 65
    8f6a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    8f6e:	dc 01       	movw	r26, r24
    8f70:	cb 01       	movw	r24, r22
    8f72:	8e 01       	movw	r16, r28
    8f74:	01 56       	subi	r16, 0x61	; 97
    8f76:	1f 4f       	sbci	r17, 0xFF	; 255
    8f78:	bc 01       	movw	r22, r24
    8f7a:	cd 01       	movw	r24, r26
    8f7c:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8f80:	dc 01       	movw	r26, r24
    8f82:	cb 01       	movw	r24, r22
    8f84:	f8 01       	movw	r30, r16
    8f86:	91 83       	std	Z+1, r25	; 0x01
    8f88:	80 83       	st	Z, r24
    8f8a:	1f c0       	rjmp	.+62     	; 0x8fca <main+0x29b8>
    8f8c:	fe 01       	movw	r30, r28
    8f8e:	e3 56       	subi	r30, 0x63	; 99
    8f90:	ff 4f       	sbci	r31, 0xFF	; 255
    8f92:	80 e9       	ldi	r24, 0x90	; 144
    8f94:	91 e0       	ldi	r25, 0x01	; 1
    8f96:	91 83       	std	Z+1, r25	; 0x01
    8f98:	80 83       	st	Z, r24
    8f9a:	fe 01       	movw	r30, r28
    8f9c:	e3 56       	subi	r30, 0x63	; 99
    8f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    8fa0:	80 81       	ld	r24, Z
    8fa2:	91 81       	ldd	r25, Z+1	; 0x01
    8fa4:	01 97       	sbiw	r24, 0x01	; 1
    8fa6:	f1 f7       	brne	.-4      	; 0x8fa4 <main+0x2992>
    8fa8:	fe 01       	movw	r30, r28
    8faa:	e3 56       	subi	r30, 0x63	; 99
    8fac:	ff 4f       	sbci	r31, 0xFF	; 255
    8fae:	91 83       	std	Z+1, r25	; 0x01
    8fb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8fb2:	de 01       	movw	r26, r28
    8fb4:	a1 56       	subi	r26, 0x61	; 97
    8fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    8fb8:	fe 01       	movw	r30, r28
    8fba:	e1 56       	subi	r30, 0x61	; 97
    8fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    8fbe:	80 81       	ld	r24, Z
    8fc0:	91 81       	ldd	r25, Z+1	; 0x01
    8fc2:	01 97       	sbiw	r24, 0x01	; 1
    8fc4:	11 96       	adiw	r26, 0x01	; 1
    8fc6:	9c 93       	st	X, r25
    8fc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8fca:	fe 01       	movw	r30, r28
    8fcc:	e1 56       	subi	r30, 0x61	; 97
    8fce:	ff 4f       	sbci	r31, 0xFF	; 255
    8fd0:	80 81       	ld	r24, Z
    8fd2:	91 81       	ldd	r25, Z+1	; 0x01
    8fd4:	00 97       	sbiw	r24, 0x00	; 0
    8fd6:	d1 f6       	brne	.-76     	; 0x8f8c <main+0x297a>
    8fd8:	27 c0       	rjmp	.+78     	; 0x9028 <main+0x2a16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8fda:	8e 01       	movw	r16, r28
    8fdc:	01 56       	subi	r16, 0x61	; 97
    8fde:	1f 4f       	sbci	r17, 0xFF	; 255
    8fe0:	fe 01       	movw	r30, r28
    8fe2:	ef 55       	subi	r30, 0x5F	; 95
    8fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    8fe6:	60 81       	ld	r22, Z
    8fe8:	71 81       	ldd	r23, Z+1	; 0x01
    8fea:	82 81       	ldd	r24, Z+2	; 0x02
    8fec:	93 81       	ldd	r25, Z+3	; 0x03
    8fee:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    8ff2:	dc 01       	movw	r26, r24
    8ff4:	cb 01       	movw	r24, r22
    8ff6:	f8 01       	movw	r30, r16
    8ff8:	91 83       	std	Z+1, r25	; 0x01
    8ffa:	80 83       	st	Z, r24
    8ffc:	de 01       	movw	r26, r28
    8ffe:	a5 56       	subi	r26, 0x65	; 101
    9000:	bf 4f       	sbci	r27, 0xFF	; 255
    9002:	fe 01       	movw	r30, r28
    9004:	e1 56       	subi	r30, 0x61	; 97
    9006:	ff 4f       	sbci	r31, 0xFF	; 255
    9008:	80 81       	ld	r24, Z
    900a:	91 81       	ldd	r25, Z+1	; 0x01
    900c:	8d 93       	st	X+, r24
    900e:	9c 93       	st	X, r25
    9010:	fe 01       	movw	r30, r28
    9012:	e5 56       	subi	r30, 0x65	; 101
    9014:	ff 4f       	sbci	r31, 0xFF	; 255
    9016:	80 81       	ld	r24, Z
    9018:	91 81       	ldd	r25, Z+1	; 0x01
    901a:	01 97       	sbiw	r24, 0x01	; 1
    901c:	f1 f7       	brne	.-4      	; 0x901a <main+0x2a08>
    901e:	fe 01       	movw	r30, r28
    9020:	e5 56       	subi	r30, 0x65	; 101
    9022:	ff 4f       	sbci	r31, 0xFF	; 255
    9024:	91 83       	std	Z+1, r25	; 0x01
    9026:	80 83       	st	Z, r24
						_delay_ms(20);
						/*print "Wrong password." in lcd */
						LCD_PrintString(wor);
    9028:	ce 01       	movw	r24, r28
    902a:	86 51       	subi	r24, 0x16	; 22
    902c:	9e 4f       	sbci	r25, 0xFE	; 254
    902e:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    9032:	fe 01       	movw	r30, r28
    9034:	e9 56       	subi	r30, 0x69	; 105
    9036:	ff 4f       	sbci	r31, 0xFF	; 255
    9038:	80 e0       	ldi	r24, 0x00	; 0
    903a:	90 e0       	ldi	r25, 0x00	; 0
    903c:	aa ef       	ldi	r26, 0xFA	; 250
    903e:	b3 e4       	ldi	r27, 0x43	; 67
    9040:	80 83       	st	Z, r24
    9042:	91 83       	std	Z+1, r25	; 0x01
    9044:	a2 83       	std	Z+2, r26	; 0x02
    9046:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9048:	8e 01       	movw	r16, r28
    904a:	0d 56       	subi	r16, 0x6D	; 109
    904c:	1f 4f       	sbci	r17, 0xFF	; 255
    904e:	fe 01       	movw	r30, r28
    9050:	e9 56       	subi	r30, 0x69	; 105
    9052:	ff 4f       	sbci	r31, 0xFF	; 255
    9054:	60 81       	ld	r22, Z
    9056:	71 81       	ldd	r23, Z+1	; 0x01
    9058:	82 81       	ldd	r24, Z+2	; 0x02
    905a:	93 81       	ldd	r25, Z+3	; 0x03
    905c:	20 e0       	ldi	r18, 0x00	; 0
    905e:	30 e0       	ldi	r19, 0x00	; 0
    9060:	4a e7       	ldi	r20, 0x7A	; 122
    9062:	55 e4       	ldi	r21, 0x45	; 69
    9064:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9068:	dc 01       	movw	r26, r24
    906a:	cb 01       	movw	r24, r22
    906c:	f8 01       	movw	r30, r16
    906e:	80 83       	st	Z, r24
    9070:	91 83       	std	Z+1, r25	; 0x01
    9072:	a2 83       	std	Z+2, r26	; 0x02
    9074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9076:	fe 01       	movw	r30, r28
    9078:	ed 56       	subi	r30, 0x6D	; 109
    907a:	ff 4f       	sbci	r31, 0xFF	; 255
    907c:	60 81       	ld	r22, Z
    907e:	71 81       	ldd	r23, Z+1	; 0x01
    9080:	82 81       	ldd	r24, Z+2	; 0x02
    9082:	93 81       	ldd	r25, Z+3	; 0x03
    9084:	20 e0       	ldi	r18, 0x00	; 0
    9086:	30 e0       	ldi	r19, 0x00	; 0
    9088:	40 e8       	ldi	r20, 0x80	; 128
    908a:	5f e3       	ldi	r21, 0x3F	; 63
    908c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9090:	88 23       	and	r24, r24
    9092:	44 f4       	brge	.+16     	; 0x90a4 <main+0x2a92>
		__ticks = 1;
    9094:	fe 01       	movw	r30, r28
    9096:	ef 56       	subi	r30, 0x6F	; 111
    9098:	ff 4f       	sbci	r31, 0xFF	; 255
    909a:	81 e0       	ldi	r24, 0x01	; 1
    909c:	90 e0       	ldi	r25, 0x00	; 0
    909e:	91 83       	std	Z+1, r25	; 0x01
    90a0:	80 83       	st	Z, r24
    90a2:	64 c0       	rjmp	.+200    	; 0x916c <main+0x2b5a>
	else if (__tmp > 65535)
    90a4:	fe 01       	movw	r30, r28
    90a6:	ed 56       	subi	r30, 0x6D	; 109
    90a8:	ff 4f       	sbci	r31, 0xFF	; 255
    90aa:	60 81       	ld	r22, Z
    90ac:	71 81       	ldd	r23, Z+1	; 0x01
    90ae:	82 81       	ldd	r24, Z+2	; 0x02
    90b0:	93 81       	ldd	r25, Z+3	; 0x03
    90b2:	20 e0       	ldi	r18, 0x00	; 0
    90b4:	3f ef       	ldi	r19, 0xFF	; 255
    90b6:	4f e7       	ldi	r20, 0x7F	; 127
    90b8:	57 e4       	ldi	r21, 0x47	; 71
    90ba:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    90be:	18 16       	cp	r1, r24
    90c0:	0c f0       	brlt	.+2      	; 0x90c4 <main+0x2ab2>
    90c2:	43 c0       	rjmp	.+134    	; 0x914a <main+0x2b38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    90c4:	fe 01       	movw	r30, r28
    90c6:	e9 56       	subi	r30, 0x69	; 105
    90c8:	ff 4f       	sbci	r31, 0xFF	; 255
    90ca:	60 81       	ld	r22, Z
    90cc:	71 81       	ldd	r23, Z+1	; 0x01
    90ce:	82 81       	ldd	r24, Z+2	; 0x02
    90d0:	93 81       	ldd	r25, Z+3	; 0x03
    90d2:	20 e0       	ldi	r18, 0x00	; 0
    90d4:	30 e0       	ldi	r19, 0x00	; 0
    90d6:	40 e2       	ldi	r20, 0x20	; 32
    90d8:	51 e4       	ldi	r21, 0x41	; 65
    90da:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    90de:	dc 01       	movw	r26, r24
    90e0:	cb 01       	movw	r24, r22
    90e2:	8e 01       	movw	r16, r28
    90e4:	0f 56       	subi	r16, 0x6F	; 111
    90e6:	1f 4f       	sbci	r17, 0xFF	; 255
    90e8:	bc 01       	movw	r22, r24
    90ea:	cd 01       	movw	r24, r26
    90ec:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    90f0:	dc 01       	movw	r26, r24
    90f2:	cb 01       	movw	r24, r22
    90f4:	f8 01       	movw	r30, r16
    90f6:	91 83       	std	Z+1, r25	; 0x01
    90f8:	80 83       	st	Z, r24
    90fa:	1f c0       	rjmp	.+62     	; 0x913a <main+0x2b28>
    90fc:	fe 01       	movw	r30, r28
    90fe:	e1 57       	subi	r30, 0x71	; 113
    9100:	ff 4f       	sbci	r31, 0xFF	; 255
    9102:	80 e9       	ldi	r24, 0x90	; 144
    9104:	91 e0       	ldi	r25, 0x01	; 1
    9106:	91 83       	std	Z+1, r25	; 0x01
    9108:	80 83       	st	Z, r24
    910a:	fe 01       	movw	r30, r28
    910c:	e1 57       	subi	r30, 0x71	; 113
    910e:	ff 4f       	sbci	r31, 0xFF	; 255
    9110:	80 81       	ld	r24, Z
    9112:	91 81       	ldd	r25, Z+1	; 0x01
    9114:	01 97       	sbiw	r24, 0x01	; 1
    9116:	f1 f7       	brne	.-4      	; 0x9114 <main+0x2b02>
    9118:	fe 01       	movw	r30, r28
    911a:	e1 57       	subi	r30, 0x71	; 113
    911c:	ff 4f       	sbci	r31, 0xFF	; 255
    911e:	91 83       	std	Z+1, r25	; 0x01
    9120:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9122:	de 01       	movw	r26, r28
    9124:	af 56       	subi	r26, 0x6F	; 111
    9126:	bf 4f       	sbci	r27, 0xFF	; 255
    9128:	fe 01       	movw	r30, r28
    912a:	ef 56       	subi	r30, 0x6F	; 111
    912c:	ff 4f       	sbci	r31, 0xFF	; 255
    912e:	80 81       	ld	r24, Z
    9130:	91 81       	ldd	r25, Z+1	; 0x01
    9132:	01 97       	sbiw	r24, 0x01	; 1
    9134:	11 96       	adiw	r26, 0x01	; 1
    9136:	9c 93       	st	X, r25
    9138:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    913a:	fe 01       	movw	r30, r28
    913c:	ef 56       	subi	r30, 0x6F	; 111
    913e:	ff 4f       	sbci	r31, 0xFF	; 255
    9140:	80 81       	ld	r24, Z
    9142:	91 81       	ldd	r25, Z+1	; 0x01
    9144:	00 97       	sbiw	r24, 0x00	; 0
    9146:	d1 f6       	brne	.-76     	; 0x90fc <main+0x2aea>
    9148:	27 c0       	rjmp	.+78     	; 0x9198 <main+0x2b86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    914a:	8e 01       	movw	r16, r28
    914c:	0f 56       	subi	r16, 0x6F	; 111
    914e:	1f 4f       	sbci	r17, 0xFF	; 255
    9150:	fe 01       	movw	r30, r28
    9152:	ed 56       	subi	r30, 0x6D	; 109
    9154:	ff 4f       	sbci	r31, 0xFF	; 255
    9156:	60 81       	ld	r22, Z
    9158:	71 81       	ldd	r23, Z+1	; 0x01
    915a:	82 81       	ldd	r24, Z+2	; 0x02
    915c:	93 81       	ldd	r25, Z+3	; 0x03
    915e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9162:	dc 01       	movw	r26, r24
    9164:	cb 01       	movw	r24, r22
    9166:	f8 01       	movw	r30, r16
    9168:	91 83       	std	Z+1, r25	; 0x01
    916a:	80 83       	st	Z, r24
    916c:	de 01       	movw	r26, r28
    916e:	a3 57       	subi	r26, 0x73	; 115
    9170:	bf 4f       	sbci	r27, 0xFF	; 255
    9172:	fe 01       	movw	r30, r28
    9174:	ef 56       	subi	r30, 0x6F	; 111
    9176:	ff 4f       	sbci	r31, 0xFF	; 255
    9178:	80 81       	ld	r24, Z
    917a:	91 81       	ldd	r25, Z+1	; 0x01
    917c:	8d 93       	st	X+, r24
    917e:	9c 93       	st	X, r25
    9180:	fe 01       	movw	r30, r28
    9182:	e3 57       	subi	r30, 0x73	; 115
    9184:	ff 4f       	sbci	r31, 0xFF	; 255
    9186:	80 81       	ld	r24, Z
    9188:	91 81       	ldd	r25, Z+1	; 0x01
    918a:	01 97       	sbiw	r24, 0x01	; 1
    918c:	f1 f7       	brne	.-4      	; 0x918a <main+0x2b78>
    918e:	fe 01       	movw	r30, r28
    9190:	e3 57       	subi	r30, 0x73	; 115
    9192:	ff 4f       	sbci	r31, 0xFF	; 255
    9194:	91 83       	std	Z+1, r25	; 0x01
    9196:	80 83       	st	Z, r24

						_delay_ms(500);
						/*delete lcd content */
						LCD_SendCommand(DISPLAY_CLEAR);
    9198:	81 e0       	ldi	r24, 0x01	; 1
    919a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    919e:	fe 01       	movw	r30, r28
    91a0:	e7 57       	subi	r30, 0x77	; 119
    91a2:	ff 4f       	sbci	r31, 0xFF	; 255
    91a4:	80 e0       	ldi	r24, 0x00	; 0
    91a6:	90 e0       	ldi	r25, 0x00	; 0
    91a8:	a0 ea       	ldi	r26, 0xA0	; 160
    91aa:	b1 e4       	ldi	r27, 0x41	; 65
    91ac:	80 83       	st	Z, r24
    91ae:	91 83       	std	Z+1, r25	; 0x01
    91b0:	a2 83       	std	Z+2, r26	; 0x02
    91b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    91b4:	8e 01       	movw	r16, r28
    91b6:	0b 57       	subi	r16, 0x7B	; 123
    91b8:	1f 4f       	sbci	r17, 0xFF	; 255
    91ba:	fe 01       	movw	r30, r28
    91bc:	e7 57       	subi	r30, 0x77	; 119
    91be:	ff 4f       	sbci	r31, 0xFF	; 255
    91c0:	60 81       	ld	r22, Z
    91c2:	71 81       	ldd	r23, Z+1	; 0x01
    91c4:	82 81       	ldd	r24, Z+2	; 0x02
    91c6:	93 81       	ldd	r25, Z+3	; 0x03
    91c8:	20 e0       	ldi	r18, 0x00	; 0
    91ca:	30 e0       	ldi	r19, 0x00	; 0
    91cc:	4a e7       	ldi	r20, 0x7A	; 122
    91ce:	55 e4       	ldi	r21, 0x45	; 69
    91d0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    91d4:	dc 01       	movw	r26, r24
    91d6:	cb 01       	movw	r24, r22
    91d8:	f8 01       	movw	r30, r16
    91da:	80 83       	st	Z, r24
    91dc:	91 83       	std	Z+1, r25	; 0x01
    91de:	a2 83       	std	Z+2, r26	; 0x02
    91e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    91e2:	fe 01       	movw	r30, r28
    91e4:	eb 57       	subi	r30, 0x7B	; 123
    91e6:	ff 4f       	sbci	r31, 0xFF	; 255
    91e8:	60 81       	ld	r22, Z
    91ea:	71 81       	ldd	r23, Z+1	; 0x01
    91ec:	82 81       	ldd	r24, Z+2	; 0x02
    91ee:	93 81       	ldd	r25, Z+3	; 0x03
    91f0:	20 e0       	ldi	r18, 0x00	; 0
    91f2:	30 e0       	ldi	r19, 0x00	; 0
    91f4:	40 e8       	ldi	r20, 0x80	; 128
    91f6:	5f e3       	ldi	r21, 0x3F	; 63
    91f8:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    91fc:	88 23       	and	r24, r24
    91fe:	44 f4       	brge	.+16     	; 0x9210 <main+0x2bfe>
		__ticks = 1;
    9200:	fe 01       	movw	r30, r28
    9202:	ed 57       	subi	r30, 0x7D	; 125
    9204:	ff 4f       	sbci	r31, 0xFF	; 255
    9206:	81 e0       	ldi	r24, 0x01	; 1
    9208:	90 e0       	ldi	r25, 0x00	; 0
    920a:	91 83       	std	Z+1, r25	; 0x01
    920c:	80 83       	st	Z, r24
    920e:	64 c0       	rjmp	.+200    	; 0x92d8 <main+0x2cc6>
	else if (__tmp > 65535)
    9210:	fe 01       	movw	r30, r28
    9212:	eb 57       	subi	r30, 0x7B	; 123
    9214:	ff 4f       	sbci	r31, 0xFF	; 255
    9216:	60 81       	ld	r22, Z
    9218:	71 81       	ldd	r23, Z+1	; 0x01
    921a:	82 81       	ldd	r24, Z+2	; 0x02
    921c:	93 81       	ldd	r25, Z+3	; 0x03
    921e:	20 e0       	ldi	r18, 0x00	; 0
    9220:	3f ef       	ldi	r19, 0xFF	; 255
    9222:	4f e7       	ldi	r20, 0x7F	; 127
    9224:	57 e4       	ldi	r21, 0x47	; 71
    9226:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    922a:	18 16       	cp	r1, r24
    922c:	0c f0       	brlt	.+2      	; 0x9230 <main+0x2c1e>
    922e:	43 c0       	rjmp	.+134    	; 0x92b6 <main+0x2ca4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9230:	fe 01       	movw	r30, r28
    9232:	e7 57       	subi	r30, 0x77	; 119
    9234:	ff 4f       	sbci	r31, 0xFF	; 255
    9236:	60 81       	ld	r22, Z
    9238:	71 81       	ldd	r23, Z+1	; 0x01
    923a:	82 81       	ldd	r24, Z+2	; 0x02
    923c:	93 81       	ldd	r25, Z+3	; 0x03
    923e:	20 e0       	ldi	r18, 0x00	; 0
    9240:	30 e0       	ldi	r19, 0x00	; 0
    9242:	40 e2       	ldi	r20, 0x20	; 32
    9244:	51 e4       	ldi	r21, 0x41	; 65
    9246:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    924a:	dc 01       	movw	r26, r24
    924c:	cb 01       	movw	r24, r22
    924e:	8e 01       	movw	r16, r28
    9250:	0d 57       	subi	r16, 0x7D	; 125
    9252:	1f 4f       	sbci	r17, 0xFF	; 255
    9254:	bc 01       	movw	r22, r24
    9256:	cd 01       	movw	r24, r26
    9258:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    925c:	dc 01       	movw	r26, r24
    925e:	cb 01       	movw	r24, r22
    9260:	f8 01       	movw	r30, r16
    9262:	91 83       	std	Z+1, r25	; 0x01
    9264:	80 83       	st	Z, r24
    9266:	1f c0       	rjmp	.+62     	; 0x92a6 <main+0x2c94>
    9268:	fe 01       	movw	r30, r28
    926a:	ef 57       	subi	r30, 0x7F	; 127
    926c:	ff 4f       	sbci	r31, 0xFF	; 255
    926e:	80 e9       	ldi	r24, 0x90	; 144
    9270:	91 e0       	ldi	r25, 0x01	; 1
    9272:	91 83       	std	Z+1, r25	; 0x01
    9274:	80 83       	st	Z, r24
    9276:	fe 01       	movw	r30, r28
    9278:	ef 57       	subi	r30, 0x7F	; 127
    927a:	ff 4f       	sbci	r31, 0xFF	; 255
    927c:	80 81       	ld	r24, Z
    927e:	91 81       	ldd	r25, Z+1	; 0x01
    9280:	01 97       	sbiw	r24, 0x01	; 1
    9282:	f1 f7       	brne	.-4      	; 0x9280 <main+0x2c6e>
    9284:	fe 01       	movw	r30, r28
    9286:	ef 57       	subi	r30, 0x7F	; 127
    9288:	ff 4f       	sbci	r31, 0xFF	; 255
    928a:	91 83       	std	Z+1, r25	; 0x01
    928c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    928e:	de 01       	movw	r26, r28
    9290:	ad 57       	subi	r26, 0x7D	; 125
    9292:	bf 4f       	sbci	r27, 0xFF	; 255
    9294:	fe 01       	movw	r30, r28
    9296:	ed 57       	subi	r30, 0x7D	; 125
    9298:	ff 4f       	sbci	r31, 0xFF	; 255
    929a:	80 81       	ld	r24, Z
    929c:	91 81       	ldd	r25, Z+1	; 0x01
    929e:	01 97       	sbiw	r24, 0x01	; 1
    92a0:	11 96       	adiw	r26, 0x01	; 1
    92a2:	9c 93       	st	X, r25
    92a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    92a6:	fe 01       	movw	r30, r28
    92a8:	ed 57       	subi	r30, 0x7D	; 125
    92aa:	ff 4f       	sbci	r31, 0xFF	; 255
    92ac:	80 81       	ld	r24, Z
    92ae:	91 81       	ldd	r25, Z+1	; 0x01
    92b0:	00 97       	sbiw	r24, 0x00	; 0
    92b2:	d1 f6       	brne	.-76     	; 0x9268 <main+0x2c56>
    92b4:	27 c0       	rjmp	.+78     	; 0x9304 <main+0x2cf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    92b6:	8e 01       	movw	r16, r28
    92b8:	0d 57       	subi	r16, 0x7D	; 125
    92ba:	1f 4f       	sbci	r17, 0xFF	; 255
    92bc:	fe 01       	movw	r30, r28
    92be:	eb 57       	subi	r30, 0x7B	; 123
    92c0:	ff 4f       	sbci	r31, 0xFF	; 255
    92c2:	60 81       	ld	r22, Z
    92c4:	71 81       	ldd	r23, Z+1	; 0x01
    92c6:	82 81       	ldd	r24, Z+2	; 0x02
    92c8:	93 81       	ldd	r25, Z+3	; 0x03
    92ca:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    92ce:	dc 01       	movw	r26, r24
    92d0:	cb 01       	movw	r24, r22
    92d2:	f8 01       	movw	r30, r16
    92d4:	91 83       	std	Z+1, r25	; 0x01
    92d6:	80 83       	st	Z, r24
    92d8:	de 01       	movw	r26, r28
    92da:	a1 58       	subi	r26, 0x81	; 129
    92dc:	bf 4f       	sbci	r27, 0xFF	; 255
    92de:	fe 01       	movw	r30, r28
    92e0:	ed 57       	subi	r30, 0x7D	; 125
    92e2:	ff 4f       	sbci	r31, 0xFF	; 255
    92e4:	80 81       	ld	r24, Z
    92e6:	91 81       	ldd	r25, Z+1	; 0x01
    92e8:	8d 93       	st	X+, r24
    92ea:	9c 93       	st	X, r25
    92ec:	fe 01       	movw	r30, r28
    92ee:	e1 58       	subi	r30, 0x81	; 129
    92f0:	ff 4f       	sbci	r31, 0xFF	; 255
    92f2:	80 81       	ld	r24, Z
    92f4:	91 81       	ldd	r25, Z+1	; 0x01
    92f6:	01 97       	sbiw	r24, 0x01	; 1
    92f8:	f1 f7       	brne	.-4      	; 0x92f6 <main+0x2ce4>
    92fa:	fe 01       	movw	r30, r28
    92fc:	e1 58       	subi	r30, 0x81	; 129
    92fe:	ff 4f       	sbci	r31, 0xFF	; 255
    9300:	91 83       	std	Z+1, r25	; 0x01
    9302:	80 83       	st	Z, r24
						_delay_ms(20);

						/*print number of attempts left */
						LCD_PrintCharacter((2-r) + 48 );
    9304:	fe 01       	movw	r30, r28
    9306:	ef 53       	subi	r30, 0x3F	; 63
    9308:	fe 4f       	sbci	r31, 0xFE	; 254
    930a:	92 e3       	ldi	r25, 0x32	; 50
    930c:	80 81       	ld	r24, Z
    930e:	f9 2f       	mov	r31, r25
    9310:	f8 1b       	sub	r31, r24
    9312:	8f 2f       	mov	r24, r31
    9314:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD_PrintCharacter>
						LCD_SendCommand(CURSOR_SHIFT_RIGHT);
    9318:	84 e1       	ldi	r24, 0x14	; 20
    931a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
						/*print " Attempts left." in lcd */
						LCD_PrintString(stl);
    931e:	ce 01       	movw	r24, r28
    9320:	86 50       	subi	r24, 0x06	; 6
    9322:	9e 4f       	sbci	r25, 0xFE	; 254
    9324:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    9328:	fe 01       	movw	r30, r28
    932a:	e5 58       	subi	r30, 0x85	; 133
    932c:	ff 4f       	sbci	r31, 0xFF	; 255
    932e:	80 e0       	ldi	r24, 0x00	; 0
    9330:	90 e0       	ldi	r25, 0x00	; 0
    9332:	aa ef       	ldi	r26, 0xFA	; 250
    9334:	b3 e4       	ldi	r27, 0x43	; 67
    9336:	80 83       	st	Z, r24
    9338:	91 83       	std	Z+1, r25	; 0x01
    933a:	a2 83       	std	Z+2, r26	; 0x02
    933c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    933e:	8e 01       	movw	r16, r28
    9340:	09 58       	subi	r16, 0x89	; 137
    9342:	1f 4f       	sbci	r17, 0xFF	; 255
    9344:	fe 01       	movw	r30, r28
    9346:	e5 58       	subi	r30, 0x85	; 133
    9348:	ff 4f       	sbci	r31, 0xFF	; 255
    934a:	60 81       	ld	r22, Z
    934c:	71 81       	ldd	r23, Z+1	; 0x01
    934e:	82 81       	ldd	r24, Z+2	; 0x02
    9350:	93 81       	ldd	r25, Z+3	; 0x03
    9352:	20 e0       	ldi	r18, 0x00	; 0
    9354:	30 e0       	ldi	r19, 0x00	; 0
    9356:	4a e7       	ldi	r20, 0x7A	; 122
    9358:	55 e4       	ldi	r21, 0x45	; 69
    935a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    935e:	dc 01       	movw	r26, r24
    9360:	cb 01       	movw	r24, r22
    9362:	f8 01       	movw	r30, r16
    9364:	80 83       	st	Z, r24
    9366:	91 83       	std	Z+1, r25	; 0x01
    9368:	a2 83       	std	Z+2, r26	; 0x02
    936a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    936c:	fe 01       	movw	r30, r28
    936e:	e9 58       	subi	r30, 0x89	; 137
    9370:	ff 4f       	sbci	r31, 0xFF	; 255
    9372:	60 81       	ld	r22, Z
    9374:	71 81       	ldd	r23, Z+1	; 0x01
    9376:	82 81       	ldd	r24, Z+2	; 0x02
    9378:	93 81       	ldd	r25, Z+3	; 0x03
    937a:	20 e0       	ldi	r18, 0x00	; 0
    937c:	30 e0       	ldi	r19, 0x00	; 0
    937e:	40 e8       	ldi	r20, 0x80	; 128
    9380:	5f e3       	ldi	r21, 0x3F	; 63
    9382:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9386:	88 23       	and	r24, r24
    9388:	44 f4       	brge	.+16     	; 0x939a <main+0x2d88>
		__ticks = 1;
    938a:	fe 01       	movw	r30, r28
    938c:	eb 58       	subi	r30, 0x8B	; 139
    938e:	ff 4f       	sbci	r31, 0xFF	; 255
    9390:	81 e0       	ldi	r24, 0x01	; 1
    9392:	90 e0       	ldi	r25, 0x00	; 0
    9394:	91 83       	std	Z+1, r25	; 0x01
    9396:	80 83       	st	Z, r24
    9398:	64 c0       	rjmp	.+200    	; 0x9462 <main+0x2e50>
	else if (__tmp > 65535)
    939a:	fe 01       	movw	r30, r28
    939c:	e9 58       	subi	r30, 0x89	; 137
    939e:	ff 4f       	sbci	r31, 0xFF	; 255
    93a0:	60 81       	ld	r22, Z
    93a2:	71 81       	ldd	r23, Z+1	; 0x01
    93a4:	82 81       	ldd	r24, Z+2	; 0x02
    93a6:	93 81       	ldd	r25, Z+3	; 0x03
    93a8:	20 e0       	ldi	r18, 0x00	; 0
    93aa:	3f ef       	ldi	r19, 0xFF	; 255
    93ac:	4f e7       	ldi	r20, 0x7F	; 127
    93ae:	57 e4       	ldi	r21, 0x47	; 71
    93b0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    93b4:	18 16       	cp	r1, r24
    93b6:	0c f0       	brlt	.+2      	; 0x93ba <main+0x2da8>
    93b8:	43 c0       	rjmp	.+134    	; 0x9440 <main+0x2e2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    93ba:	fe 01       	movw	r30, r28
    93bc:	e5 58       	subi	r30, 0x85	; 133
    93be:	ff 4f       	sbci	r31, 0xFF	; 255
    93c0:	60 81       	ld	r22, Z
    93c2:	71 81       	ldd	r23, Z+1	; 0x01
    93c4:	82 81       	ldd	r24, Z+2	; 0x02
    93c6:	93 81       	ldd	r25, Z+3	; 0x03
    93c8:	20 e0       	ldi	r18, 0x00	; 0
    93ca:	30 e0       	ldi	r19, 0x00	; 0
    93cc:	40 e2       	ldi	r20, 0x20	; 32
    93ce:	51 e4       	ldi	r21, 0x41	; 65
    93d0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    93d4:	dc 01       	movw	r26, r24
    93d6:	cb 01       	movw	r24, r22
    93d8:	8e 01       	movw	r16, r28
    93da:	0b 58       	subi	r16, 0x8B	; 139
    93dc:	1f 4f       	sbci	r17, 0xFF	; 255
    93de:	bc 01       	movw	r22, r24
    93e0:	cd 01       	movw	r24, r26
    93e2:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    93e6:	dc 01       	movw	r26, r24
    93e8:	cb 01       	movw	r24, r22
    93ea:	f8 01       	movw	r30, r16
    93ec:	91 83       	std	Z+1, r25	; 0x01
    93ee:	80 83       	st	Z, r24
    93f0:	1f c0       	rjmp	.+62     	; 0x9430 <main+0x2e1e>
    93f2:	fe 01       	movw	r30, r28
    93f4:	ed 58       	subi	r30, 0x8D	; 141
    93f6:	ff 4f       	sbci	r31, 0xFF	; 255
    93f8:	80 e9       	ldi	r24, 0x90	; 144
    93fa:	91 e0       	ldi	r25, 0x01	; 1
    93fc:	91 83       	std	Z+1, r25	; 0x01
    93fe:	80 83       	st	Z, r24
    9400:	fe 01       	movw	r30, r28
    9402:	ed 58       	subi	r30, 0x8D	; 141
    9404:	ff 4f       	sbci	r31, 0xFF	; 255
    9406:	80 81       	ld	r24, Z
    9408:	91 81       	ldd	r25, Z+1	; 0x01
    940a:	01 97       	sbiw	r24, 0x01	; 1
    940c:	f1 f7       	brne	.-4      	; 0x940a <main+0x2df8>
    940e:	fe 01       	movw	r30, r28
    9410:	ed 58       	subi	r30, 0x8D	; 141
    9412:	ff 4f       	sbci	r31, 0xFF	; 255
    9414:	91 83       	std	Z+1, r25	; 0x01
    9416:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9418:	de 01       	movw	r26, r28
    941a:	ab 58       	subi	r26, 0x8B	; 139
    941c:	bf 4f       	sbci	r27, 0xFF	; 255
    941e:	fe 01       	movw	r30, r28
    9420:	eb 58       	subi	r30, 0x8B	; 139
    9422:	ff 4f       	sbci	r31, 0xFF	; 255
    9424:	80 81       	ld	r24, Z
    9426:	91 81       	ldd	r25, Z+1	; 0x01
    9428:	01 97       	sbiw	r24, 0x01	; 1
    942a:	11 96       	adiw	r26, 0x01	; 1
    942c:	9c 93       	st	X, r25
    942e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9430:	fe 01       	movw	r30, r28
    9432:	eb 58       	subi	r30, 0x8B	; 139
    9434:	ff 4f       	sbci	r31, 0xFF	; 255
    9436:	80 81       	ld	r24, Z
    9438:	91 81       	ldd	r25, Z+1	; 0x01
    943a:	00 97       	sbiw	r24, 0x00	; 0
    943c:	d1 f6       	brne	.-76     	; 0x93f2 <main+0x2de0>
    943e:	28 c0       	rjmp	.+80     	; 0x9490 <main+0x2e7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9440:	8e 01       	movw	r16, r28
    9442:	0b 58       	subi	r16, 0x8B	; 139
    9444:	1f 4f       	sbci	r17, 0xFF	; 255
    9446:	fe 01       	movw	r30, r28
    9448:	e9 58       	subi	r30, 0x89	; 137
    944a:	ff 4f       	sbci	r31, 0xFF	; 255
    944c:	60 81       	ld	r22, Z
    944e:	71 81       	ldd	r23, Z+1	; 0x01
    9450:	82 81       	ldd	r24, Z+2	; 0x02
    9452:	93 81       	ldd	r25, Z+3	; 0x03
    9454:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9458:	dc 01       	movw	r26, r24
    945a:	cb 01       	movw	r24, r22
    945c:	f8 01       	movw	r30, r16
    945e:	91 83       	std	Z+1, r25	; 0x01
    9460:	80 83       	st	Z, r24
    9462:	de 01       	movw	r26, r28
    9464:	af 58       	subi	r26, 0x8F	; 143
    9466:	bf 4f       	sbci	r27, 0xFF	; 255
    9468:	fe 01       	movw	r30, r28
    946a:	eb 58       	subi	r30, 0x8B	; 139
    946c:	ff 4f       	sbci	r31, 0xFF	; 255
    946e:	80 81       	ld	r24, Z
    9470:	91 81       	ldd	r25, Z+1	; 0x01
    9472:	11 96       	adiw	r26, 0x01	; 1
    9474:	9c 93       	st	X, r25
    9476:	8e 93       	st	-X, r24
    9478:	fe 01       	movw	r30, r28
    947a:	ef 58       	subi	r30, 0x8F	; 143
    947c:	ff 4f       	sbci	r31, 0xFF	; 255
    947e:	80 81       	ld	r24, Z
    9480:	91 81       	ldd	r25, Z+1	; 0x01
    9482:	01 97       	sbiw	r24, 0x01	; 1
    9484:	f1 f7       	brne	.-4      	; 0x9482 <main+0x2e70>
    9486:	fe 01       	movw	r30, r28
    9488:	ef 58       	subi	r30, 0x8F	; 143
    948a:	ff 4f       	sbci	r31, 0xFF	; 255
    948c:	91 83       	std	Z+1, r25	; 0x01
    948e:	80 83       	st	Z, r24
						_delay_ms(500);
						flag2 = 0;
    9490:	fe 01       	movw	r30, r28
    9492:	ec 53       	subi	r30, 0x3C	; 60
    9494:	fe 4f       	sbci	r31, 0xFE	; 254
    9496:	10 82       	st	Z, r1
    9498:	1c c0       	rjmp	.+56     	; 0x94d2 <main+0x2ec0>
						break;
					}
					/*to break the loop */
					else if(i == 4)
    949a:	fe 01       	movw	r30, r28
    949c:	ea 53       	subi	r30, 0x3A	; 58
    949e:	fe 4f       	sbci	r31, 0xFE	; 254
    94a0:	80 81       	ld	r24, Z
    94a2:	84 30       	cpi	r24, 0x04	; 4
    94a4:	31 f4       	brne	.+12     	; 0x94b2 <main+0x2ea0>
					{
						flag2 = 1;
    94a6:	fe 01       	movw	r30, r28
    94a8:	ec 53       	subi	r30, 0x3C	; 60
    94aa:	fe 4f       	sbci	r31, 0xFE	; 254
    94ac:	81 e0       	ldi	r24, 0x01	; 1
    94ae:	80 83       	st	Z, r24
    94b0:	10 c0       	rjmp	.+32     	; 0x94d2 <main+0x2ec0>
					_delay_ms(20);
					LCD_PrintCharacter(num2[i] + 48);
					_delay_ms(500);
				}
				/*for loop to check mismatch */
				for(i=0 ; i<5 ; i++)
    94b2:	de 01       	movw	r26, r28
    94b4:	aa 53       	subi	r26, 0x3A	; 58
    94b6:	be 4f       	sbci	r27, 0xFE	; 254
    94b8:	fe 01       	movw	r30, r28
    94ba:	ea 53       	subi	r30, 0x3A	; 58
    94bc:	fe 4f       	sbci	r31, 0xFE	; 254
    94be:	80 81       	ld	r24, Z
    94c0:	8f 5f       	subi	r24, 0xFF	; 255
    94c2:	8c 93       	st	X, r24
    94c4:	fe 01       	movw	r30, r28
    94c6:	ea 53       	subi	r30, 0x3A	; 58
    94c8:	fe 4f       	sbci	r31, 0xFE	; 254
    94ca:	80 81       	ld	r24, Z
    94cc:	85 30       	cpi	r24, 0x05	; 5
    94ce:	08 f4       	brcc	.+2      	; 0x94d2 <main+0x2ec0>
    94d0:	d8 cc       	rjmp	.-1616   	; 0x8e82 <main+0x2870>
					{
						flag2 = 1;
						break;
					}
				}
				if(flag2 == 1)
    94d2:	fe 01       	movw	r30, r28
    94d4:	ec 53       	subi	r30, 0x3C	; 60
    94d6:	fe 4f       	sbci	r31, 0xFE	; 254
    94d8:	80 81       	ld	r24, Z
    94da:	81 30       	cpi	r24, 0x01	; 1
    94dc:	e1 f0       	breq	.+56     	; 0x9516 <main+0x2f04>
				{break;}
				else if(flag2 == 0 && r==2)
    94de:	fe 01       	movw	r30, r28
    94e0:	ec 53       	subi	r30, 0x3C	; 60
    94e2:	fe 4f       	sbci	r31, 0xFE	; 254
    94e4:	80 81       	ld	r24, Z
    94e6:	88 23       	and	r24, r24
    94e8:	31 f4       	brne	.+12     	; 0x94f6 <main+0x2ee4>
    94ea:	fe 01       	movw	r30, r28
    94ec:	ef 53       	subi	r30, 0x3F	; 63
    94ee:	fe 4f       	sbci	r31, 0xFE	; 254
    94f0:	80 81       	ld	r24, Z
    94f2:	82 30       	cpi	r24, 0x02	; 2
    94f4:	81 f0       	breq	.+32     	; 0x9516 <main+0x2f04>
			/*print "Enter password:" in lcd */
			LCD_PrintString(in);
			_delay_ms(500);

			/*for loop to enter password and if is wrong enter it again till r reach 3 */
			for(r=0 ; r<3 ;r++)
    94f6:	de 01       	movw	r26, r28
    94f8:	af 53       	subi	r26, 0x3F	; 63
    94fa:	be 4f       	sbci	r27, 0xFE	; 254
    94fc:	fe 01       	movw	r30, r28
    94fe:	ef 53       	subi	r30, 0x3F	; 63
    9500:	fe 4f       	sbci	r31, 0xFE	; 254
    9502:	80 81       	ld	r24, Z
    9504:	8f 5f       	subi	r24, 0xFF	; 255
    9506:	8c 93       	st	X, r24
    9508:	fe 01       	movw	r30, r28
    950a:	ef 53       	subi	r30, 0x3F	; 63
    950c:	fe 4f       	sbci	r31, 0xFE	; 254
    950e:	80 81       	ld	r24, Z
    9510:	83 30       	cpi	r24, 0x03	; 3
    9512:	08 f4       	brcc	.+2      	; 0x9516 <main+0x2f04>
    9514:	05 cb       	rjmp	.-2550   	; 0x8b20 <main+0x250e>
				if(flag2 == 1)
				{break;}
				else if(flag2 == 0 && r==2)
				{break;}
			}
			if(flag2 == 0)
    9516:	fe 01       	movw	r30, r28
    9518:	ec 53       	subi	r30, 0x3C	; 60
    951a:	fe 4f       	sbci	r31, 0xFE	; 254
    951c:	80 81       	ld	r24, Z
    951e:	88 23       	and	r24, r24
    9520:	09 f0       	breq	.+2      	; 0x9524 <main+0x2f12>
    9522:	8c c1       	rjmp	.+792    	; 0x983c <main+0x322a>
			{
				/*check for temperature */
				check();
    9524:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <check>

				Timer_init(&timer0);
    9528:	ce 01       	movw	r24, r28
    952a:	86 58       	subi	r24, 0x86	; 134
    952c:	9d 4f       	sbci	r25, 0xFD	; 253
    952e:	0e 94 3b 31 	call	0x6276	; 0x6276 <Timer_init>
				/*delete lcd content */
				LCD_SendCommand(DISPLAY_CLEAR);
    9532:	81 e0       	ldi	r24, 0x01	; 1
    9534:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    9538:	fe 01       	movw	r30, r28
    953a:	e3 59       	subi	r30, 0x93	; 147
    953c:	ff 4f       	sbci	r31, 0xFF	; 255
    953e:	80 e0       	ldi	r24, 0x00	; 0
    9540:	90 e0       	ldi	r25, 0x00	; 0
    9542:	a0 ea       	ldi	r26, 0xA0	; 160
    9544:	b1 e4       	ldi	r27, 0x41	; 65
    9546:	80 83       	st	Z, r24
    9548:	91 83       	std	Z+1, r25	; 0x01
    954a:	a2 83       	std	Z+2, r26	; 0x02
    954c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    954e:	8e 01       	movw	r16, r28
    9550:	07 59       	subi	r16, 0x97	; 151
    9552:	1f 4f       	sbci	r17, 0xFF	; 255
    9554:	fe 01       	movw	r30, r28
    9556:	e3 59       	subi	r30, 0x93	; 147
    9558:	ff 4f       	sbci	r31, 0xFF	; 255
    955a:	60 81       	ld	r22, Z
    955c:	71 81       	ldd	r23, Z+1	; 0x01
    955e:	82 81       	ldd	r24, Z+2	; 0x02
    9560:	93 81       	ldd	r25, Z+3	; 0x03
    9562:	20 e0       	ldi	r18, 0x00	; 0
    9564:	30 e0       	ldi	r19, 0x00	; 0
    9566:	4a e7       	ldi	r20, 0x7A	; 122
    9568:	55 e4       	ldi	r21, 0x45	; 69
    956a:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    956e:	dc 01       	movw	r26, r24
    9570:	cb 01       	movw	r24, r22
    9572:	f8 01       	movw	r30, r16
    9574:	80 83       	st	Z, r24
    9576:	91 83       	std	Z+1, r25	; 0x01
    9578:	a2 83       	std	Z+2, r26	; 0x02
    957a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    957c:	fe 01       	movw	r30, r28
    957e:	e7 59       	subi	r30, 0x97	; 151
    9580:	ff 4f       	sbci	r31, 0xFF	; 255
    9582:	60 81       	ld	r22, Z
    9584:	71 81       	ldd	r23, Z+1	; 0x01
    9586:	82 81       	ldd	r24, Z+2	; 0x02
    9588:	93 81       	ldd	r25, Z+3	; 0x03
    958a:	20 e0       	ldi	r18, 0x00	; 0
    958c:	30 e0       	ldi	r19, 0x00	; 0
    958e:	40 e8       	ldi	r20, 0x80	; 128
    9590:	5f e3       	ldi	r21, 0x3F	; 63
    9592:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9596:	88 23       	and	r24, r24
    9598:	44 f4       	brge	.+16     	; 0x95aa <main+0x2f98>
		__ticks = 1;
    959a:	fe 01       	movw	r30, r28
    959c:	e9 59       	subi	r30, 0x99	; 153
    959e:	ff 4f       	sbci	r31, 0xFF	; 255
    95a0:	81 e0       	ldi	r24, 0x01	; 1
    95a2:	90 e0       	ldi	r25, 0x00	; 0
    95a4:	91 83       	std	Z+1, r25	; 0x01
    95a6:	80 83       	st	Z, r24
    95a8:	64 c0       	rjmp	.+200    	; 0x9672 <main+0x3060>
	else if (__tmp > 65535)
    95aa:	fe 01       	movw	r30, r28
    95ac:	e7 59       	subi	r30, 0x97	; 151
    95ae:	ff 4f       	sbci	r31, 0xFF	; 255
    95b0:	60 81       	ld	r22, Z
    95b2:	71 81       	ldd	r23, Z+1	; 0x01
    95b4:	82 81       	ldd	r24, Z+2	; 0x02
    95b6:	93 81       	ldd	r25, Z+3	; 0x03
    95b8:	20 e0       	ldi	r18, 0x00	; 0
    95ba:	3f ef       	ldi	r19, 0xFF	; 255
    95bc:	4f e7       	ldi	r20, 0x7F	; 127
    95be:	57 e4       	ldi	r21, 0x47	; 71
    95c0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    95c4:	18 16       	cp	r1, r24
    95c6:	0c f0       	brlt	.+2      	; 0x95ca <main+0x2fb8>
    95c8:	43 c0       	rjmp	.+134    	; 0x9650 <main+0x303e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    95ca:	fe 01       	movw	r30, r28
    95cc:	e3 59       	subi	r30, 0x93	; 147
    95ce:	ff 4f       	sbci	r31, 0xFF	; 255
    95d0:	60 81       	ld	r22, Z
    95d2:	71 81       	ldd	r23, Z+1	; 0x01
    95d4:	82 81       	ldd	r24, Z+2	; 0x02
    95d6:	93 81       	ldd	r25, Z+3	; 0x03
    95d8:	20 e0       	ldi	r18, 0x00	; 0
    95da:	30 e0       	ldi	r19, 0x00	; 0
    95dc:	40 e2       	ldi	r20, 0x20	; 32
    95de:	51 e4       	ldi	r21, 0x41	; 65
    95e0:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    95e4:	dc 01       	movw	r26, r24
    95e6:	cb 01       	movw	r24, r22
    95e8:	8e 01       	movw	r16, r28
    95ea:	09 59       	subi	r16, 0x99	; 153
    95ec:	1f 4f       	sbci	r17, 0xFF	; 255
    95ee:	bc 01       	movw	r22, r24
    95f0:	cd 01       	movw	r24, r26
    95f2:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    95f6:	dc 01       	movw	r26, r24
    95f8:	cb 01       	movw	r24, r22
    95fa:	f8 01       	movw	r30, r16
    95fc:	91 83       	std	Z+1, r25	; 0x01
    95fe:	80 83       	st	Z, r24
    9600:	1f c0       	rjmp	.+62     	; 0x9640 <main+0x302e>
    9602:	fe 01       	movw	r30, r28
    9604:	eb 59       	subi	r30, 0x9B	; 155
    9606:	ff 4f       	sbci	r31, 0xFF	; 255
    9608:	80 e9       	ldi	r24, 0x90	; 144
    960a:	91 e0       	ldi	r25, 0x01	; 1
    960c:	91 83       	std	Z+1, r25	; 0x01
    960e:	80 83       	st	Z, r24
    9610:	fe 01       	movw	r30, r28
    9612:	eb 59       	subi	r30, 0x9B	; 155
    9614:	ff 4f       	sbci	r31, 0xFF	; 255
    9616:	80 81       	ld	r24, Z
    9618:	91 81       	ldd	r25, Z+1	; 0x01
    961a:	01 97       	sbiw	r24, 0x01	; 1
    961c:	f1 f7       	brne	.-4      	; 0x961a <main+0x3008>
    961e:	fe 01       	movw	r30, r28
    9620:	eb 59       	subi	r30, 0x9B	; 155
    9622:	ff 4f       	sbci	r31, 0xFF	; 255
    9624:	91 83       	std	Z+1, r25	; 0x01
    9626:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9628:	de 01       	movw	r26, r28
    962a:	a9 59       	subi	r26, 0x99	; 153
    962c:	bf 4f       	sbci	r27, 0xFF	; 255
    962e:	fe 01       	movw	r30, r28
    9630:	e9 59       	subi	r30, 0x99	; 153
    9632:	ff 4f       	sbci	r31, 0xFF	; 255
    9634:	80 81       	ld	r24, Z
    9636:	91 81       	ldd	r25, Z+1	; 0x01
    9638:	01 97       	sbiw	r24, 0x01	; 1
    963a:	11 96       	adiw	r26, 0x01	; 1
    963c:	9c 93       	st	X, r25
    963e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9640:	fe 01       	movw	r30, r28
    9642:	e9 59       	subi	r30, 0x99	; 153
    9644:	ff 4f       	sbci	r31, 0xFF	; 255
    9646:	80 81       	ld	r24, Z
    9648:	91 81       	ldd	r25, Z+1	; 0x01
    964a:	00 97       	sbiw	r24, 0x00	; 0
    964c:	d1 f6       	brne	.-76     	; 0x9602 <main+0x2ff0>
    964e:	27 c0       	rjmp	.+78     	; 0x969e <main+0x308c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9650:	8e 01       	movw	r16, r28
    9652:	09 59       	subi	r16, 0x99	; 153
    9654:	1f 4f       	sbci	r17, 0xFF	; 255
    9656:	fe 01       	movw	r30, r28
    9658:	e7 59       	subi	r30, 0x97	; 151
    965a:	ff 4f       	sbci	r31, 0xFF	; 255
    965c:	60 81       	ld	r22, Z
    965e:	71 81       	ldd	r23, Z+1	; 0x01
    9660:	82 81       	ldd	r24, Z+2	; 0x02
    9662:	93 81       	ldd	r25, Z+3	; 0x03
    9664:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9668:	dc 01       	movw	r26, r24
    966a:	cb 01       	movw	r24, r22
    966c:	f8 01       	movw	r30, r16
    966e:	91 83       	std	Z+1, r25	; 0x01
    9670:	80 83       	st	Z, r24
    9672:	de 01       	movw	r26, r28
    9674:	ad 59       	subi	r26, 0x9D	; 157
    9676:	bf 4f       	sbci	r27, 0xFF	; 255
    9678:	fe 01       	movw	r30, r28
    967a:	e9 59       	subi	r30, 0x99	; 153
    967c:	ff 4f       	sbci	r31, 0xFF	; 255
    967e:	80 81       	ld	r24, Z
    9680:	91 81       	ldd	r25, Z+1	; 0x01
    9682:	8d 93       	st	X+, r24
    9684:	9c 93       	st	X, r25
    9686:	fe 01       	movw	r30, r28
    9688:	ed 59       	subi	r30, 0x9D	; 157
    968a:	ff 4f       	sbci	r31, 0xFF	; 255
    968c:	80 81       	ld	r24, Z
    968e:	91 81       	ldd	r25, Z+1	; 0x01
    9690:	01 97       	sbiw	r24, 0x01	; 1
    9692:	f1 f7       	brne	.-4      	; 0x9690 <main+0x307e>
    9694:	fe 01       	movw	r30, r28
    9696:	ed 59       	subi	r30, 0x9D	; 157
    9698:	ff 4f       	sbci	r31, 0xFF	; 255
    969a:	91 83       	std	Z+1, r25	; 0x01
    969c:	80 83       	st	Z, r24
				_delay_ms(20);
				/*print "Theft attempted." in lcd */
				LCD_PrintString(th);
    969e:	ce 01       	movw	r24, r28
    96a0:	88 5c       	subi	r24, 0xC8	; 200
    96a2:	9d 4f       	sbci	r25, 0xFD	; 253
    96a4:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    96a8:	bc c0       	rjmp	.+376    	; 0x9822 <main+0x3210>
				while(trick<23)
    96aa:	fe 01       	movw	r30, r28
    96ac:	e1 5a       	subi	r30, 0xA1	; 161
    96ae:	ff 4f       	sbci	r31, 0xFF	; 255
    96b0:	80 e0       	ldi	r24, 0x00	; 0
    96b2:	90 e0       	ldi	r25, 0x00	; 0
    96b4:	aa e7       	ldi	r26, 0x7A	; 122
    96b6:	b4 e4       	ldi	r27, 0x44	; 68
    96b8:	80 83       	st	Z, r24
    96ba:	91 83       	std	Z+1, r25	; 0x01
    96bc:	a2 83       	std	Z+2, r26	; 0x02
    96be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    96c0:	8e 01       	movw	r16, r28
    96c2:	05 5a       	subi	r16, 0xA5	; 165
    96c4:	1f 4f       	sbci	r17, 0xFF	; 255
    96c6:	fe 01       	movw	r30, r28
    96c8:	e1 5a       	subi	r30, 0xA1	; 161
    96ca:	ff 4f       	sbci	r31, 0xFF	; 255
    96cc:	60 81       	ld	r22, Z
    96ce:	71 81       	ldd	r23, Z+1	; 0x01
    96d0:	82 81       	ldd	r24, Z+2	; 0x02
    96d2:	93 81       	ldd	r25, Z+3	; 0x03
    96d4:	20 e0       	ldi	r18, 0x00	; 0
    96d6:	30 e0       	ldi	r19, 0x00	; 0
    96d8:	4a e7       	ldi	r20, 0x7A	; 122
    96da:	55 e4       	ldi	r21, 0x45	; 69
    96dc:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    96e0:	dc 01       	movw	r26, r24
    96e2:	cb 01       	movw	r24, r22
    96e4:	f8 01       	movw	r30, r16
    96e6:	80 83       	st	Z, r24
    96e8:	91 83       	std	Z+1, r25	; 0x01
    96ea:	a2 83       	std	Z+2, r26	; 0x02
    96ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    96ee:	fe 01       	movw	r30, r28
    96f0:	e5 5a       	subi	r30, 0xA5	; 165
    96f2:	ff 4f       	sbci	r31, 0xFF	; 255
    96f4:	60 81       	ld	r22, Z
    96f6:	71 81       	ldd	r23, Z+1	; 0x01
    96f8:	82 81       	ldd	r24, Z+2	; 0x02
    96fa:	93 81       	ldd	r25, Z+3	; 0x03
    96fc:	20 e0       	ldi	r18, 0x00	; 0
    96fe:	30 e0       	ldi	r19, 0x00	; 0
    9700:	40 e8       	ldi	r20, 0x80	; 128
    9702:	5f e3       	ldi	r21, 0x3F	; 63
    9704:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9708:	88 23       	and	r24, r24
    970a:	44 f4       	brge	.+16     	; 0x971c <main+0x310a>
		__ticks = 1;
    970c:	fe 01       	movw	r30, r28
    970e:	e7 5a       	subi	r30, 0xA7	; 167
    9710:	ff 4f       	sbci	r31, 0xFF	; 255
    9712:	81 e0       	ldi	r24, 0x01	; 1
    9714:	90 e0       	ldi	r25, 0x00	; 0
    9716:	91 83       	std	Z+1, r25	; 0x01
    9718:	80 83       	st	Z, r24
    971a:	64 c0       	rjmp	.+200    	; 0x97e4 <main+0x31d2>
	else if (__tmp > 65535)
    971c:	fe 01       	movw	r30, r28
    971e:	e5 5a       	subi	r30, 0xA5	; 165
    9720:	ff 4f       	sbci	r31, 0xFF	; 255
    9722:	60 81       	ld	r22, Z
    9724:	71 81       	ldd	r23, Z+1	; 0x01
    9726:	82 81       	ldd	r24, Z+2	; 0x02
    9728:	93 81       	ldd	r25, Z+3	; 0x03
    972a:	20 e0       	ldi	r18, 0x00	; 0
    972c:	3f ef       	ldi	r19, 0xFF	; 255
    972e:	4f e7       	ldi	r20, 0x7F	; 127
    9730:	57 e4       	ldi	r21, 0x47	; 71
    9732:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9736:	18 16       	cp	r1, r24
    9738:	0c f0       	brlt	.+2      	; 0x973c <main+0x312a>
    973a:	43 c0       	rjmp	.+134    	; 0x97c2 <main+0x31b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    973c:	fe 01       	movw	r30, r28
    973e:	e1 5a       	subi	r30, 0xA1	; 161
    9740:	ff 4f       	sbci	r31, 0xFF	; 255
    9742:	60 81       	ld	r22, Z
    9744:	71 81       	ldd	r23, Z+1	; 0x01
    9746:	82 81       	ldd	r24, Z+2	; 0x02
    9748:	93 81       	ldd	r25, Z+3	; 0x03
    974a:	20 e0       	ldi	r18, 0x00	; 0
    974c:	30 e0       	ldi	r19, 0x00	; 0
    974e:	40 e2       	ldi	r20, 0x20	; 32
    9750:	51 e4       	ldi	r21, 0x41	; 65
    9752:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9756:	dc 01       	movw	r26, r24
    9758:	cb 01       	movw	r24, r22
    975a:	8e 01       	movw	r16, r28
    975c:	07 5a       	subi	r16, 0xA7	; 167
    975e:	1f 4f       	sbci	r17, 0xFF	; 255
    9760:	bc 01       	movw	r22, r24
    9762:	cd 01       	movw	r24, r26
    9764:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9768:	dc 01       	movw	r26, r24
    976a:	cb 01       	movw	r24, r22
    976c:	f8 01       	movw	r30, r16
    976e:	91 83       	std	Z+1, r25	; 0x01
    9770:	80 83       	st	Z, r24
    9772:	1f c0       	rjmp	.+62     	; 0x97b2 <main+0x31a0>
    9774:	fe 01       	movw	r30, r28
    9776:	e9 5a       	subi	r30, 0xA9	; 169
    9778:	ff 4f       	sbci	r31, 0xFF	; 255
    977a:	80 e9       	ldi	r24, 0x90	; 144
    977c:	91 e0       	ldi	r25, 0x01	; 1
    977e:	91 83       	std	Z+1, r25	; 0x01
    9780:	80 83       	st	Z, r24
    9782:	fe 01       	movw	r30, r28
    9784:	e9 5a       	subi	r30, 0xA9	; 169
    9786:	ff 4f       	sbci	r31, 0xFF	; 255
    9788:	80 81       	ld	r24, Z
    978a:	91 81       	ldd	r25, Z+1	; 0x01
    978c:	01 97       	sbiw	r24, 0x01	; 1
    978e:	f1 f7       	brne	.-4      	; 0x978c <main+0x317a>
    9790:	fe 01       	movw	r30, r28
    9792:	e9 5a       	subi	r30, 0xA9	; 169
    9794:	ff 4f       	sbci	r31, 0xFF	; 255
    9796:	91 83       	std	Z+1, r25	; 0x01
    9798:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    979a:	de 01       	movw	r26, r28
    979c:	a7 5a       	subi	r26, 0xA7	; 167
    979e:	bf 4f       	sbci	r27, 0xFF	; 255
    97a0:	fe 01       	movw	r30, r28
    97a2:	e7 5a       	subi	r30, 0xA7	; 167
    97a4:	ff 4f       	sbci	r31, 0xFF	; 255
    97a6:	80 81       	ld	r24, Z
    97a8:	91 81       	ldd	r25, Z+1	; 0x01
    97aa:	01 97       	sbiw	r24, 0x01	; 1
    97ac:	11 96       	adiw	r26, 0x01	; 1
    97ae:	9c 93       	st	X, r25
    97b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    97b2:	fe 01       	movw	r30, r28
    97b4:	e7 5a       	subi	r30, 0xA7	; 167
    97b6:	ff 4f       	sbci	r31, 0xFF	; 255
    97b8:	80 81       	ld	r24, Z
    97ba:	91 81       	ldd	r25, Z+1	; 0x01
    97bc:	00 97       	sbiw	r24, 0x00	; 0
    97be:	d1 f6       	brne	.-76     	; 0x9774 <main+0x3162>
    97c0:	27 c0       	rjmp	.+78     	; 0x9810 <main+0x31fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    97c2:	8e 01       	movw	r16, r28
    97c4:	07 5a       	subi	r16, 0xA7	; 167
    97c6:	1f 4f       	sbci	r17, 0xFF	; 255
    97c8:	fe 01       	movw	r30, r28
    97ca:	e5 5a       	subi	r30, 0xA5	; 165
    97cc:	ff 4f       	sbci	r31, 0xFF	; 255
    97ce:	60 81       	ld	r22, Z
    97d0:	71 81       	ldd	r23, Z+1	; 0x01
    97d2:	82 81       	ldd	r24, Z+2	; 0x02
    97d4:	93 81       	ldd	r25, Z+3	; 0x03
    97d6:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    97da:	dc 01       	movw	r26, r24
    97dc:	cb 01       	movw	r24, r22
    97de:	f8 01       	movw	r30, r16
    97e0:	91 83       	std	Z+1, r25	; 0x01
    97e2:	80 83       	st	Z, r24
    97e4:	de 01       	movw	r26, r28
    97e6:	ab 5a       	subi	r26, 0xAB	; 171
    97e8:	bf 4f       	sbci	r27, 0xFF	; 255
    97ea:	fe 01       	movw	r30, r28
    97ec:	e7 5a       	subi	r30, 0xA7	; 167
    97ee:	ff 4f       	sbci	r31, 0xFF	; 255
    97f0:	80 81       	ld	r24, Z
    97f2:	91 81       	ldd	r25, Z+1	; 0x01
    97f4:	8d 93       	st	X+, r24
    97f6:	9c 93       	st	X, r25
    97f8:	fe 01       	movw	r30, r28
    97fa:	eb 5a       	subi	r30, 0xAB	; 171
    97fc:	ff 4f       	sbci	r31, 0xFF	; 255
    97fe:	80 81       	ld	r24, Z
    9800:	91 81       	ldd	r25, Z+1	; 0x01
    9802:	01 97       	sbiw	r24, 0x01	; 1
    9804:	f1 f7       	brne	.-4      	; 0x9802 <main+0x31f0>
    9806:	fe 01       	movw	r30, r28
    9808:	eb 5a       	subi	r30, 0xAB	; 171
    980a:	ff 4f       	sbci	r31, 0xFF	; 255
    980c:	91 83       	std	Z+1, r25	; 0x01
    980e:	80 83       	st	Z, r24
				{
					_delay_ms(1000);
					trick++;
    9810:	de 01       	movw	r26, r28
    9812:	ad 53       	subi	r26, 0x3D	; 61
    9814:	be 4f       	sbci	r27, 0xFE	; 254
    9816:	fe 01       	movw	r30, r28
    9818:	ed 53       	subi	r30, 0x3D	; 61
    981a:	fe 4f       	sbci	r31, 0xFE	; 254
    981c:	80 81       	ld	r24, Z
    981e:	8f 5f       	subi	r24, 0xFF	; 255
    9820:	8c 93       	st	X, r24
				/*delete lcd content */
				LCD_SendCommand(DISPLAY_CLEAR);
				_delay_ms(20);
				/*print "Theft attempted." in lcd */
				LCD_PrintString(th);
				while(trick<23)
    9822:	fe 01       	movw	r30, r28
    9824:	ed 53       	subi	r30, 0x3D	; 61
    9826:	fe 4f       	sbci	r31, 0xFE	; 254
    9828:	80 81       	ld	r24, Z
    982a:	87 31       	cpi	r24, 0x17	; 23
    982c:	08 f4       	brcc	.+2      	; 0x9830 <main+0x321e>
    982e:	3d cf       	rjmp	.-390    	; 0x96aa <main+0x3098>
				{
					_delay_ms(1000);
					trick++;
				}
				trick = 0;
    9830:	fe 01       	movw	r30, r28
    9832:	ed 53       	subi	r30, 0x3D	; 61
    9834:	fe 4f       	sbci	r31, 0xFE	; 254
    9836:	10 82       	st	Z, r1
    9838:	0c 94 1a 44 	jmp	0x8834	; 0x8834 <main+0x2222>
			}

			else if(flag2 == 1)
    983c:	fe 01       	movw	r30, r28
    983e:	ec 53       	subi	r30, 0x3C	; 60
    9840:	fe 4f       	sbci	r31, 0xFE	; 254
    9842:	80 81       	ld	r24, Z
    9844:	81 30       	cpi	r24, 0x01	; 1
    9846:	11 f0       	breq	.+4      	; 0x984c <main+0x323a>
    9848:	0c 94 1a 44 	jmp	0x8834	; 0x8834 <main+0x2222>
			{
				/*chaeck presence of light */
				LDR_check();
    984c:	0e 94 12 28 	call	0x5024	; 0x5024 <LDR_check>
				/*read temperature */
				temp = LM35_readtemp();
    9850:	0e 94 df 2c 	call	0x59be	; 0x59be <LM35_readtemp>
    9854:	fe 01       	movw	r30, r28
    9856:	ee 53       	subi	r30, 0x3E	; 62
    9858:	fe 4f       	sbci	r31, 0xFE	; 254
    985a:	80 83       	st	Z, r24
				/*timer2 on */
				Timer_init(&timer2);
    985c:	ce 01       	movw	r24, r28
    985e:	8d 58       	subi	r24, 0x8D	; 141
    9860:	9d 4f       	sbci	r25, 0xFD	; 253
    9862:	0e 94 3b 31 	call	0x6276	; 0x6276 <Timer_init>
				/*delete lcd content */
				LCD_SendCommand(DISPLAY_CLEAR);
    9866:	81 e0       	ldi	r24, 0x01	; 1
    9868:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    986c:	fe 01       	movw	r30, r28
    986e:	ef 5a       	subi	r30, 0xAF	; 175
    9870:	ff 4f       	sbci	r31, 0xFF	; 255
    9872:	80 e0       	ldi	r24, 0x00	; 0
    9874:	90 e0       	ldi	r25, 0x00	; 0
    9876:	a0 ea       	ldi	r26, 0xA0	; 160
    9878:	b1 e4       	ldi	r27, 0x41	; 65
    987a:	80 83       	st	Z, r24
    987c:	91 83       	std	Z+1, r25	; 0x01
    987e:	a2 83       	std	Z+2, r26	; 0x02
    9880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9882:	8e 01       	movw	r16, r28
    9884:	03 5b       	subi	r16, 0xB3	; 179
    9886:	1f 4f       	sbci	r17, 0xFF	; 255
    9888:	fe 01       	movw	r30, r28
    988a:	ef 5a       	subi	r30, 0xAF	; 175
    988c:	ff 4f       	sbci	r31, 0xFF	; 255
    988e:	60 81       	ld	r22, Z
    9890:	71 81       	ldd	r23, Z+1	; 0x01
    9892:	82 81       	ldd	r24, Z+2	; 0x02
    9894:	93 81       	ldd	r25, Z+3	; 0x03
    9896:	20 e0       	ldi	r18, 0x00	; 0
    9898:	30 e0       	ldi	r19, 0x00	; 0
    989a:	4a e7       	ldi	r20, 0x7A	; 122
    989c:	55 e4       	ldi	r21, 0x45	; 69
    989e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    98a2:	dc 01       	movw	r26, r24
    98a4:	cb 01       	movw	r24, r22
    98a6:	f8 01       	movw	r30, r16
    98a8:	80 83       	st	Z, r24
    98aa:	91 83       	std	Z+1, r25	; 0x01
    98ac:	a2 83       	std	Z+2, r26	; 0x02
    98ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    98b0:	fe 01       	movw	r30, r28
    98b2:	e3 5b       	subi	r30, 0xB3	; 179
    98b4:	ff 4f       	sbci	r31, 0xFF	; 255
    98b6:	60 81       	ld	r22, Z
    98b8:	71 81       	ldd	r23, Z+1	; 0x01
    98ba:	82 81       	ldd	r24, Z+2	; 0x02
    98bc:	93 81       	ldd	r25, Z+3	; 0x03
    98be:	20 e0       	ldi	r18, 0x00	; 0
    98c0:	30 e0       	ldi	r19, 0x00	; 0
    98c2:	40 e8       	ldi	r20, 0x80	; 128
    98c4:	5f e3       	ldi	r21, 0x3F	; 63
    98c6:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    98ca:	88 23       	and	r24, r24
    98cc:	44 f4       	brge	.+16     	; 0x98de <main+0x32cc>
		__ticks = 1;
    98ce:	fe 01       	movw	r30, r28
    98d0:	e5 5b       	subi	r30, 0xB5	; 181
    98d2:	ff 4f       	sbci	r31, 0xFF	; 255
    98d4:	81 e0       	ldi	r24, 0x01	; 1
    98d6:	90 e0       	ldi	r25, 0x00	; 0
    98d8:	91 83       	std	Z+1, r25	; 0x01
    98da:	80 83       	st	Z, r24
    98dc:	64 c0       	rjmp	.+200    	; 0x99a6 <main+0x3394>
	else if (__tmp > 65535)
    98de:	fe 01       	movw	r30, r28
    98e0:	e3 5b       	subi	r30, 0xB3	; 179
    98e2:	ff 4f       	sbci	r31, 0xFF	; 255
    98e4:	60 81       	ld	r22, Z
    98e6:	71 81       	ldd	r23, Z+1	; 0x01
    98e8:	82 81       	ldd	r24, Z+2	; 0x02
    98ea:	93 81       	ldd	r25, Z+3	; 0x03
    98ec:	20 e0       	ldi	r18, 0x00	; 0
    98ee:	3f ef       	ldi	r19, 0xFF	; 255
    98f0:	4f e7       	ldi	r20, 0x7F	; 127
    98f2:	57 e4       	ldi	r21, 0x47	; 71
    98f4:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    98f8:	18 16       	cp	r1, r24
    98fa:	0c f0       	brlt	.+2      	; 0x98fe <main+0x32ec>
    98fc:	43 c0       	rjmp	.+134    	; 0x9984 <main+0x3372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    98fe:	fe 01       	movw	r30, r28
    9900:	ef 5a       	subi	r30, 0xAF	; 175
    9902:	ff 4f       	sbci	r31, 0xFF	; 255
    9904:	60 81       	ld	r22, Z
    9906:	71 81       	ldd	r23, Z+1	; 0x01
    9908:	82 81       	ldd	r24, Z+2	; 0x02
    990a:	93 81       	ldd	r25, Z+3	; 0x03
    990c:	20 e0       	ldi	r18, 0x00	; 0
    990e:	30 e0       	ldi	r19, 0x00	; 0
    9910:	40 e2       	ldi	r20, 0x20	; 32
    9912:	51 e4       	ldi	r21, 0x41	; 65
    9914:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9918:	dc 01       	movw	r26, r24
    991a:	cb 01       	movw	r24, r22
    991c:	8e 01       	movw	r16, r28
    991e:	05 5b       	subi	r16, 0xB5	; 181
    9920:	1f 4f       	sbci	r17, 0xFF	; 255
    9922:	bc 01       	movw	r22, r24
    9924:	cd 01       	movw	r24, r26
    9926:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    992a:	dc 01       	movw	r26, r24
    992c:	cb 01       	movw	r24, r22
    992e:	f8 01       	movw	r30, r16
    9930:	91 83       	std	Z+1, r25	; 0x01
    9932:	80 83       	st	Z, r24
    9934:	1f c0       	rjmp	.+62     	; 0x9974 <main+0x3362>
    9936:	fe 01       	movw	r30, r28
    9938:	e7 5b       	subi	r30, 0xB7	; 183
    993a:	ff 4f       	sbci	r31, 0xFF	; 255
    993c:	80 e9       	ldi	r24, 0x90	; 144
    993e:	91 e0       	ldi	r25, 0x01	; 1
    9940:	91 83       	std	Z+1, r25	; 0x01
    9942:	80 83       	st	Z, r24
    9944:	fe 01       	movw	r30, r28
    9946:	e7 5b       	subi	r30, 0xB7	; 183
    9948:	ff 4f       	sbci	r31, 0xFF	; 255
    994a:	80 81       	ld	r24, Z
    994c:	91 81       	ldd	r25, Z+1	; 0x01
    994e:	01 97       	sbiw	r24, 0x01	; 1
    9950:	f1 f7       	brne	.-4      	; 0x994e <main+0x333c>
    9952:	fe 01       	movw	r30, r28
    9954:	e7 5b       	subi	r30, 0xB7	; 183
    9956:	ff 4f       	sbci	r31, 0xFF	; 255
    9958:	91 83       	std	Z+1, r25	; 0x01
    995a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    995c:	de 01       	movw	r26, r28
    995e:	a5 5b       	subi	r26, 0xB5	; 181
    9960:	bf 4f       	sbci	r27, 0xFF	; 255
    9962:	fe 01       	movw	r30, r28
    9964:	e5 5b       	subi	r30, 0xB5	; 181
    9966:	ff 4f       	sbci	r31, 0xFF	; 255
    9968:	80 81       	ld	r24, Z
    996a:	91 81       	ldd	r25, Z+1	; 0x01
    996c:	01 97       	sbiw	r24, 0x01	; 1
    996e:	11 96       	adiw	r26, 0x01	; 1
    9970:	9c 93       	st	X, r25
    9972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9974:	fe 01       	movw	r30, r28
    9976:	e5 5b       	subi	r30, 0xB5	; 181
    9978:	ff 4f       	sbci	r31, 0xFF	; 255
    997a:	80 81       	ld	r24, Z
    997c:	91 81       	ldd	r25, Z+1	; 0x01
    997e:	00 97       	sbiw	r24, 0x00	; 0
    9980:	d1 f6       	brne	.-76     	; 0x9936 <main+0x3324>
    9982:	27 c0       	rjmp	.+78     	; 0x99d2 <main+0x33c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9984:	8e 01       	movw	r16, r28
    9986:	05 5b       	subi	r16, 0xB5	; 181
    9988:	1f 4f       	sbci	r17, 0xFF	; 255
    998a:	fe 01       	movw	r30, r28
    998c:	e3 5b       	subi	r30, 0xB3	; 179
    998e:	ff 4f       	sbci	r31, 0xFF	; 255
    9990:	60 81       	ld	r22, Z
    9992:	71 81       	ldd	r23, Z+1	; 0x01
    9994:	82 81       	ldd	r24, Z+2	; 0x02
    9996:	93 81       	ldd	r25, Z+3	; 0x03
    9998:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    999c:	dc 01       	movw	r26, r24
    999e:	cb 01       	movw	r24, r22
    99a0:	f8 01       	movw	r30, r16
    99a2:	91 83       	std	Z+1, r25	; 0x01
    99a4:	80 83       	st	Z, r24
    99a6:	de 01       	movw	r26, r28
    99a8:	a9 5b       	subi	r26, 0xB9	; 185
    99aa:	bf 4f       	sbci	r27, 0xFF	; 255
    99ac:	fe 01       	movw	r30, r28
    99ae:	e5 5b       	subi	r30, 0xB5	; 181
    99b0:	ff 4f       	sbci	r31, 0xFF	; 255
    99b2:	80 81       	ld	r24, Z
    99b4:	91 81       	ldd	r25, Z+1	; 0x01
    99b6:	8d 93       	st	X+, r24
    99b8:	9c 93       	st	X, r25
    99ba:	fe 01       	movw	r30, r28
    99bc:	e9 5b       	subi	r30, 0xB9	; 185
    99be:	ff 4f       	sbci	r31, 0xFF	; 255
    99c0:	80 81       	ld	r24, Z
    99c2:	91 81       	ldd	r25, Z+1	; 0x01
    99c4:	01 97       	sbiw	r24, 0x01	; 1
    99c6:	f1 f7       	brne	.-4      	; 0x99c4 <main+0x33b2>
    99c8:	fe 01       	movw	r30, r28
    99ca:	e9 5b       	subi	r30, 0xB9	; 185
    99cc:	ff 4f       	sbci	r31, 0xFF	; 255
    99ce:	91 83       	std	Z+1, r25	; 0x01
    99d0:	80 83       	st	Z, r24
				_delay_ms(20);
				/*print  "The temperature" in lcd */
				LCD_PrintString(tem);
    99d2:	ce 01       	movw	r24, r28
    99d4:	88 5b       	subi	r24, 0xB8	; 184
    99d6:	9d 4f       	sbci	r25, 0xFD	; 253
    99d8:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    99dc:	fe 01       	movw	r30, r28
    99de:	ed 5b       	subi	r30, 0xBD	; 189
    99e0:	ff 4f       	sbci	r31, 0xFF	; 255
    99e2:	80 e0       	ldi	r24, 0x00	; 0
    99e4:	90 e0       	ldi	r25, 0x00	; 0
    99e6:	a0 ea       	ldi	r26, 0xA0	; 160
    99e8:	b1 e4       	ldi	r27, 0x41	; 65
    99ea:	80 83       	st	Z, r24
    99ec:	91 83       	std	Z+1, r25	; 0x01
    99ee:	a2 83       	std	Z+2, r26	; 0x02
    99f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    99f2:	8e 01       	movw	r16, r28
    99f4:	01 5c       	subi	r16, 0xC1	; 193
    99f6:	1f 4f       	sbci	r17, 0xFF	; 255
    99f8:	fe 01       	movw	r30, r28
    99fa:	ed 5b       	subi	r30, 0xBD	; 189
    99fc:	ff 4f       	sbci	r31, 0xFF	; 255
    99fe:	60 81       	ld	r22, Z
    9a00:	71 81       	ldd	r23, Z+1	; 0x01
    9a02:	82 81       	ldd	r24, Z+2	; 0x02
    9a04:	93 81       	ldd	r25, Z+3	; 0x03
    9a06:	20 e0       	ldi	r18, 0x00	; 0
    9a08:	30 e0       	ldi	r19, 0x00	; 0
    9a0a:	4a e7       	ldi	r20, 0x7A	; 122
    9a0c:	55 e4       	ldi	r21, 0x45	; 69
    9a0e:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9a12:	dc 01       	movw	r26, r24
    9a14:	cb 01       	movw	r24, r22
    9a16:	f8 01       	movw	r30, r16
    9a18:	80 83       	st	Z, r24
    9a1a:	91 83       	std	Z+1, r25	; 0x01
    9a1c:	a2 83       	std	Z+2, r26	; 0x02
    9a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9a20:	fe 01       	movw	r30, r28
    9a22:	ff 96       	adiw	r30, 0x3f	; 63
    9a24:	60 81       	ld	r22, Z
    9a26:	71 81       	ldd	r23, Z+1	; 0x01
    9a28:	82 81       	ldd	r24, Z+2	; 0x02
    9a2a:	93 81       	ldd	r25, Z+3	; 0x03
    9a2c:	20 e0       	ldi	r18, 0x00	; 0
    9a2e:	30 e0       	ldi	r19, 0x00	; 0
    9a30:	40 e8       	ldi	r20, 0x80	; 128
    9a32:	5f e3       	ldi	r21, 0x3F	; 63
    9a34:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9a38:	88 23       	and	r24, r24
    9a3a:	2c f4       	brge	.+10     	; 0x9a46 <main+0x3434>
		__ticks = 1;
    9a3c:	81 e0       	ldi	r24, 0x01	; 1
    9a3e:	90 e0       	ldi	r25, 0x00	; 0
    9a40:	9e af       	std	Y+62, r25	; 0x3e
    9a42:	8d af       	std	Y+61, r24	; 0x3d
    9a44:	46 c0       	rjmp	.+140    	; 0x9ad2 <main+0x34c0>
	else if (__tmp > 65535)
    9a46:	fe 01       	movw	r30, r28
    9a48:	ff 96       	adiw	r30, 0x3f	; 63
    9a4a:	60 81       	ld	r22, Z
    9a4c:	71 81       	ldd	r23, Z+1	; 0x01
    9a4e:	82 81       	ldd	r24, Z+2	; 0x02
    9a50:	93 81       	ldd	r25, Z+3	; 0x03
    9a52:	20 e0       	ldi	r18, 0x00	; 0
    9a54:	3f ef       	ldi	r19, 0xFF	; 255
    9a56:	4f e7       	ldi	r20, 0x7F	; 127
    9a58:	57 e4       	ldi	r21, 0x47	; 71
    9a5a:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9a5e:	18 16       	cp	r1, r24
    9a60:	64 f5       	brge	.+88     	; 0x9aba <main+0x34a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9a62:	fe 01       	movw	r30, r28
    9a64:	ed 5b       	subi	r30, 0xBD	; 189
    9a66:	ff 4f       	sbci	r31, 0xFF	; 255
    9a68:	60 81       	ld	r22, Z
    9a6a:	71 81       	ldd	r23, Z+1	; 0x01
    9a6c:	82 81       	ldd	r24, Z+2	; 0x02
    9a6e:	93 81       	ldd	r25, Z+3	; 0x03
    9a70:	20 e0       	ldi	r18, 0x00	; 0
    9a72:	30 e0       	ldi	r19, 0x00	; 0
    9a74:	40 e2       	ldi	r20, 0x20	; 32
    9a76:	51 e4       	ldi	r21, 0x41	; 65
    9a78:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9a7c:	dc 01       	movw	r26, r24
    9a7e:	cb 01       	movw	r24, r22
    9a80:	bc 01       	movw	r22, r24
    9a82:	cd 01       	movw	r24, r26
    9a84:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9a88:	dc 01       	movw	r26, r24
    9a8a:	cb 01       	movw	r24, r22
    9a8c:	9e af       	std	Y+62, r25	; 0x3e
    9a8e:	8d af       	std	Y+61, r24	; 0x3d
    9a90:	0f c0       	rjmp	.+30     	; 0x9ab0 <main+0x349e>
    9a92:	80 e9       	ldi	r24, 0x90	; 144
    9a94:	91 e0       	ldi	r25, 0x01	; 1
    9a96:	9c af       	std	Y+60, r25	; 0x3c
    9a98:	8b af       	std	Y+59, r24	; 0x3b
    9a9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    9a9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    9a9e:	01 97       	sbiw	r24, 0x01	; 1
    9aa0:	f1 f7       	brne	.-4      	; 0x9a9e <main+0x348c>
    9aa2:	9c af       	std	Y+60, r25	; 0x3c
    9aa4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9aa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    9aa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    9aaa:	01 97       	sbiw	r24, 0x01	; 1
    9aac:	9e af       	std	Y+62, r25	; 0x3e
    9aae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9ab0:	8d ad       	ldd	r24, Y+61	; 0x3d
    9ab2:	9e ad       	ldd	r25, Y+62	; 0x3e
    9ab4:	00 97       	sbiw	r24, 0x00	; 0
    9ab6:	69 f7       	brne	.-38     	; 0x9a92 <main+0x3480>
    9ab8:	16 c0       	rjmp	.+44     	; 0x9ae6 <main+0x34d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9aba:	fe 01       	movw	r30, r28
    9abc:	ff 96       	adiw	r30, 0x3f	; 63
    9abe:	60 81       	ld	r22, Z
    9ac0:	71 81       	ldd	r23, Z+1	; 0x01
    9ac2:	82 81       	ldd	r24, Z+2	; 0x02
    9ac4:	93 81       	ldd	r25, Z+3	; 0x03
    9ac6:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9aca:	dc 01       	movw	r26, r24
    9acc:	cb 01       	movw	r24, r22
    9ace:	9e af       	std	Y+62, r25	; 0x3e
    9ad0:	8d af       	std	Y+61, r24	; 0x3d
    9ad2:	8d ad       	ldd	r24, Y+61	; 0x3d
    9ad4:	9e ad       	ldd	r25, Y+62	; 0x3e
    9ad6:	9a af       	std	Y+58, r25	; 0x3a
    9ad8:	89 af       	std	Y+57, r24	; 0x39
    9ada:	89 ad       	ldd	r24, Y+57	; 0x39
    9adc:	9a ad       	ldd	r25, Y+58	; 0x3a
    9ade:	01 97       	sbiw	r24, 0x01	; 1
    9ae0:	f1 f7       	brne	.-4      	; 0x9ade <main+0x34cc>
    9ae2:	9a af       	std	Y+58, r25	; 0x3a
    9ae4:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(20);
				/*go to the next line in lcd */
				LCD_SendCommand(NEXT_LINE);
    9ae6:	80 ec       	ldi	r24, 0xC0	; 192
    9ae8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_SendCommand>
    9aec:	80 e0       	ldi	r24, 0x00	; 0
    9aee:	90 e0       	ldi	r25, 0x00	; 0
    9af0:	a0 ea       	ldi	r26, 0xA0	; 160
    9af2:	b1 e4       	ldi	r27, 0x41	; 65
    9af4:	8d ab       	std	Y+53, r24	; 0x35
    9af6:	9e ab       	std	Y+54, r25	; 0x36
    9af8:	af ab       	std	Y+55, r26	; 0x37
    9afa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9afc:	6d a9       	ldd	r22, Y+53	; 0x35
    9afe:	7e a9       	ldd	r23, Y+54	; 0x36
    9b00:	8f a9       	ldd	r24, Y+55	; 0x37
    9b02:	98 ad       	ldd	r25, Y+56	; 0x38
    9b04:	20 e0       	ldi	r18, 0x00	; 0
    9b06:	30 e0       	ldi	r19, 0x00	; 0
    9b08:	4a e7       	ldi	r20, 0x7A	; 122
    9b0a:	55 e4       	ldi	r21, 0x45	; 69
    9b0c:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9b10:	dc 01       	movw	r26, r24
    9b12:	cb 01       	movw	r24, r22
    9b14:	89 ab       	std	Y+49, r24	; 0x31
    9b16:	9a ab       	std	Y+50, r25	; 0x32
    9b18:	ab ab       	std	Y+51, r26	; 0x33
    9b1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    9b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    9b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    9b20:	8b a9       	ldd	r24, Y+51	; 0x33
    9b22:	9c a9       	ldd	r25, Y+52	; 0x34
    9b24:	20 e0       	ldi	r18, 0x00	; 0
    9b26:	30 e0       	ldi	r19, 0x00	; 0
    9b28:	40 e8       	ldi	r20, 0x80	; 128
    9b2a:	5f e3       	ldi	r21, 0x3F	; 63
    9b2c:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9b30:	88 23       	and	r24, r24
    9b32:	2c f4       	brge	.+10     	; 0x9b3e <main+0x352c>
		__ticks = 1;
    9b34:	81 e0       	ldi	r24, 0x01	; 1
    9b36:	90 e0       	ldi	r25, 0x00	; 0
    9b38:	98 ab       	std	Y+48, r25	; 0x30
    9b3a:	8f a7       	std	Y+47, r24	; 0x2f
    9b3c:	3f c0       	rjmp	.+126    	; 0x9bbc <main+0x35aa>
	else if (__tmp > 65535)
    9b3e:	69 a9       	ldd	r22, Y+49	; 0x31
    9b40:	7a a9       	ldd	r23, Y+50	; 0x32
    9b42:	8b a9       	ldd	r24, Y+51	; 0x33
    9b44:	9c a9       	ldd	r25, Y+52	; 0x34
    9b46:	20 e0       	ldi	r18, 0x00	; 0
    9b48:	3f ef       	ldi	r19, 0xFF	; 255
    9b4a:	4f e7       	ldi	r20, 0x7F	; 127
    9b4c:	57 e4       	ldi	r21, 0x47	; 71
    9b4e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9b52:	18 16       	cp	r1, r24
    9b54:	4c f5       	brge	.+82     	; 0x9ba8 <main+0x3596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b56:	6d a9       	ldd	r22, Y+53	; 0x35
    9b58:	7e a9       	ldd	r23, Y+54	; 0x36
    9b5a:	8f a9       	ldd	r24, Y+55	; 0x37
    9b5c:	98 ad       	ldd	r25, Y+56	; 0x38
    9b5e:	20 e0       	ldi	r18, 0x00	; 0
    9b60:	30 e0       	ldi	r19, 0x00	; 0
    9b62:	40 e2       	ldi	r20, 0x20	; 32
    9b64:	51 e4       	ldi	r21, 0x41	; 65
    9b66:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9b6a:	dc 01       	movw	r26, r24
    9b6c:	cb 01       	movw	r24, r22
    9b6e:	bc 01       	movw	r22, r24
    9b70:	cd 01       	movw	r24, r26
    9b72:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9b76:	dc 01       	movw	r26, r24
    9b78:	cb 01       	movw	r24, r22
    9b7a:	98 ab       	std	Y+48, r25	; 0x30
    9b7c:	8f a7       	std	Y+47, r24	; 0x2f
    9b7e:	0f c0       	rjmp	.+30     	; 0x9b9e <main+0x358c>
    9b80:	80 e9       	ldi	r24, 0x90	; 144
    9b82:	91 e0       	ldi	r25, 0x01	; 1
    9b84:	9e a7       	std	Y+46, r25	; 0x2e
    9b86:	8d a7       	std	Y+45, r24	; 0x2d
    9b88:	8d a5       	ldd	r24, Y+45	; 0x2d
    9b8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    9b8c:	01 97       	sbiw	r24, 0x01	; 1
    9b8e:	f1 f7       	brne	.-4      	; 0x9b8c <main+0x357a>
    9b90:	9e a7       	std	Y+46, r25	; 0x2e
    9b92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    9b96:	98 a9       	ldd	r25, Y+48	; 0x30
    9b98:	01 97       	sbiw	r24, 0x01	; 1
    9b9a:	98 ab       	std	Y+48, r25	; 0x30
    9b9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    9ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    9ba2:	00 97       	sbiw	r24, 0x00	; 0
    9ba4:	69 f7       	brne	.-38     	; 0x9b80 <main+0x356e>
    9ba6:	14 c0       	rjmp	.+40     	; 0x9bd0 <main+0x35be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    9baa:	7a a9       	ldd	r23, Y+50	; 0x32
    9bac:	8b a9       	ldd	r24, Y+51	; 0x33
    9bae:	9c a9       	ldd	r25, Y+52	; 0x34
    9bb0:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9bb4:	dc 01       	movw	r26, r24
    9bb6:	cb 01       	movw	r24, r22
    9bb8:	98 ab       	std	Y+48, r25	; 0x30
    9bba:	8f a7       	std	Y+47, r24	; 0x2f
    9bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    9bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    9bc0:	9c a7       	std	Y+44, r25	; 0x2c
    9bc2:	8b a7       	std	Y+43, r24	; 0x2b
    9bc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    9bc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    9bc8:	01 97       	sbiw	r24, 0x01	; 1
    9bca:	f1 f7       	brne	.-4      	; 0x9bc8 <main+0x35b6>
    9bcc:	9c a7       	std	Y+44, r25	; 0x2c
    9bce:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				/* print "is" in lcd */
				LCD_PrintString(is);
    9bd0:	ce 01       	movw	r24, r28
    9bd2:	87 5d       	subi	r24, 0xD7	; 215
    9bd4:	9d 4f       	sbci	r25, 0xFD	; 253
    9bd6:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    9bda:	80 e0       	ldi	r24, 0x00	; 0
    9bdc:	90 e0       	ldi	r25, 0x00	; 0
    9bde:	a0 ea       	ldi	r26, 0xA0	; 160
    9be0:	b1 e4       	ldi	r27, 0x41	; 65
    9be2:	8f a3       	std	Y+39, r24	; 0x27
    9be4:	98 a7       	std	Y+40, r25	; 0x28
    9be6:	a9 a7       	std	Y+41, r26	; 0x29
    9be8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9bea:	6f a1       	ldd	r22, Y+39	; 0x27
    9bec:	78 a5       	ldd	r23, Y+40	; 0x28
    9bee:	89 a5       	ldd	r24, Y+41	; 0x29
    9bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    9bf2:	20 e0       	ldi	r18, 0x00	; 0
    9bf4:	30 e0       	ldi	r19, 0x00	; 0
    9bf6:	4a e7       	ldi	r20, 0x7A	; 122
    9bf8:	55 e4       	ldi	r21, 0x45	; 69
    9bfa:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9bfe:	dc 01       	movw	r26, r24
    9c00:	cb 01       	movw	r24, r22
    9c02:	8b a3       	std	Y+35, r24	; 0x23
    9c04:	9c a3       	std	Y+36, r25	; 0x24
    9c06:	ad a3       	std	Y+37, r26	; 0x25
    9c08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    9c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    9c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    9c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    9c10:	9e a1       	ldd	r25, Y+38	; 0x26
    9c12:	20 e0       	ldi	r18, 0x00	; 0
    9c14:	30 e0       	ldi	r19, 0x00	; 0
    9c16:	40 e8       	ldi	r20, 0x80	; 128
    9c18:	5f e3       	ldi	r21, 0x3F	; 63
    9c1a:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9c1e:	88 23       	and	r24, r24
    9c20:	2c f4       	brge	.+10     	; 0x9c2c <main+0x361a>
		__ticks = 1;
    9c22:	81 e0       	ldi	r24, 0x01	; 1
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	9a a3       	std	Y+34, r25	; 0x22
    9c28:	89 a3       	std	Y+33, r24	; 0x21
    9c2a:	3f c0       	rjmp	.+126    	; 0x9caa <main+0x3698>
	else if (__tmp > 65535)
    9c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    9c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    9c30:	8d a1       	ldd	r24, Y+37	; 0x25
    9c32:	9e a1       	ldd	r25, Y+38	; 0x26
    9c34:	20 e0       	ldi	r18, 0x00	; 0
    9c36:	3f ef       	ldi	r19, 0xFF	; 255
    9c38:	4f e7       	ldi	r20, 0x7F	; 127
    9c3a:	57 e4       	ldi	r21, 0x47	; 71
    9c3c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9c40:	18 16       	cp	r1, r24
    9c42:	4c f5       	brge	.+82     	; 0x9c96 <main+0x3684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9c44:	6f a1       	ldd	r22, Y+39	; 0x27
    9c46:	78 a5       	ldd	r23, Y+40	; 0x28
    9c48:	89 a5       	ldd	r24, Y+41	; 0x29
    9c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    9c4c:	20 e0       	ldi	r18, 0x00	; 0
    9c4e:	30 e0       	ldi	r19, 0x00	; 0
    9c50:	40 e2       	ldi	r20, 0x20	; 32
    9c52:	51 e4       	ldi	r21, 0x41	; 65
    9c54:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9c58:	dc 01       	movw	r26, r24
    9c5a:	cb 01       	movw	r24, r22
    9c5c:	bc 01       	movw	r22, r24
    9c5e:	cd 01       	movw	r24, r26
    9c60:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9c64:	dc 01       	movw	r26, r24
    9c66:	cb 01       	movw	r24, r22
    9c68:	9a a3       	std	Y+34, r25	; 0x22
    9c6a:	89 a3       	std	Y+33, r24	; 0x21
    9c6c:	0f c0       	rjmp	.+30     	; 0x9c8c <main+0x367a>
    9c6e:	80 e9       	ldi	r24, 0x90	; 144
    9c70:	91 e0       	ldi	r25, 0x01	; 1
    9c72:	98 a3       	std	Y+32, r25	; 0x20
    9c74:	8f 8f       	std	Y+31, r24	; 0x1f
    9c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9c78:	98 a1       	ldd	r25, Y+32	; 0x20
    9c7a:	01 97       	sbiw	r24, 0x01	; 1
    9c7c:	f1 f7       	brne	.-4      	; 0x9c7a <main+0x3668>
    9c7e:	98 a3       	std	Y+32, r25	; 0x20
    9c80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9c82:	89 a1       	ldd	r24, Y+33	; 0x21
    9c84:	9a a1       	ldd	r25, Y+34	; 0x22
    9c86:	01 97       	sbiw	r24, 0x01	; 1
    9c88:	9a a3       	std	Y+34, r25	; 0x22
    9c8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    9c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    9c90:	00 97       	sbiw	r24, 0x00	; 0
    9c92:	69 f7       	brne	.-38     	; 0x9c6e <main+0x365c>
    9c94:	14 c0       	rjmp	.+40     	; 0x9cbe <main+0x36ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9c96:	6b a1       	ldd	r22, Y+35	; 0x23
    9c98:	7c a1       	ldd	r23, Y+36	; 0x24
    9c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    9c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    9c9e:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9ca2:	dc 01       	movw	r26, r24
    9ca4:	cb 01       	movw	r24, r22
    9ca6:	9a a3       	std	Y+34, r25	; 0x22
    9ca8:	89 a3       	std	Y+33, r24	; 0x21
    9caa:	89 a1       	ldd	r24, Y+33	; 0x21
    9cac:	9a a1       	ldd	r25, Y+34	; 0x22
    9cae:	9e 8f       	std	Y+30, r25	; 0x1e
    9cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    9cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9cb6:	01 97       	sbiw	r24, 0x01	; 1
    9cb8:	f1 f7       	brne	.-4      	; 0x9cb6 <main+0x36a4>
    9cba:	9e 8f       	std	Y+30, r25	; 0x1e
    9cbc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);
				/*print temperature */
				LCD_intgerToString(temp);
    9cbe:	fe 01       	movw	r30, r28
    9cc0:	ee 53       	subi	r30, 0x3E	; 62
    9cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    9cc4:	80 81       	ld	r24, Z
    9cc6:	88 2f       	mov	r24, r24
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	0e 94 5d 27 	call	0x4eba	; 0x4eba <LCD_intgerToString>
    9cce:	80 e0       	ldi	r24, 0x00	; 0
    9cd0:	90 e0       	ldi	r25, 0x00	; 0
    9cd2:	a0 ea       	ldi	r26, 0xA0	; 160
    9cd4:	b1 e4       	ldi	r27, 0x41	; 65
    9cd6:	89 8f       	std	Y+25, r24	; 0x19
    9cd8:	9a 8f       	std	Y+26, r25	; 0x1a
    9cda:	ab 8f       	std	Y+27, r26	; 0x1b
    9cdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9cde:	69 8d       	ldd	r22, Y+25	; 0x19
    9ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9ce6:	20 e0       	ldi	r18, 0x00	; 0
    9ce8:	30 e0       	ldi	r19, 0x00	; 0
    9cea:	4a e7       	ldi	r20, 0x7A	; 122
    9cec:	55 e4       	ldi	r21, 0x45	; 69
    9cee:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9cf2:	dc 01       	movw	r26, r24
    9cf4:	cb 01       	movw	r24, r22
    9cf6:	8d 8b       	std	Y+21, r24	; 0x15
    9cf8:	9e 8b       	std	Y+22, r25	; 0x16
    9cfa:	af 8b       	std	Y+23, r26	; 0x17
    9cfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    9cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    9d00:	7e 89       	ldd	r23, Y+22	; 0x16
    9d02:	8f 89       	ldd	r24, Y+23	; 0x17
    9d04:	98 8d       	ldd	r25, Y+24	; 0x18
    9d06:	20 e0       	ldi	r18, 0x00	; 0
    9d08:	30 e0       	ldi	r19, 0x00	; 0
    9d0a:	40 e8       	ldi	r20, 0x80	; 128
    9d0c:	5f e3       	ldi	r21, 0x3F	; 63
    9d0e:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9d12:	88 23       	and	r24, r24
    9d14:	2c f4       	brge	.+10     	; 0x9d20 <main+0x370e>
		__ticks = 1;
    9d16:	81 e0       	ldi	r24, 0x01	; 1
    9d18:	90 e0       	ldi	r25, 0x00	; 0
    9d1a:	9c 8b       	std	Y+20, r25	; 0x14
    9d1c:	8b 8b       	std	Y+19, r24	; 0x13
    9d1e:	3f c0       	rjmp	.+126    	; 0x9d9e <main+0x378c>
	else if (__tmp > 65535)
    9d20:	6d 89       	ldd	r22, Y+21	; 0x15
    9d22:	7e 89       	ldd	r23, Y+22	; 0x16
    9d24:	8f 89       	ldd	r24, Y+23	; 0x17
    9d26:	98 8d       	ldd	r25, Y+24	; 0x18
    9d28:	20 e0       	ldi	r18, 0x00	; 0
    9d2a:	3f ef       	ldi	r19, 0xFF	; 255
    9d2c:	4f e7       	ldi	r20, 0x7F	; 127
    9d2e:	57 e4       	ldi	r21, 0x47	; 71
    9d30:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9d34:	18 16       	cp	r1, r24
    9d36:	4c f5       	brge	.+82     	; 0x9d8a <main+0x3778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9d38:	69 8d       	ldd	r22, Y+25	; 0x19
    9d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9d40:	20 e0       	ldi	r18, 0x00	; 0
    9d42:	30 e0       	ldi	r19, 0x00	; 0
    9d44:	40 e2       	ldi	r20, 0x20	; 32
    9d46:	51 e4       	ldi	r21, 0x41	; 65
    9d48:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9d4c:	dc 01       	movw	r26, r24
    9d4e:	cb 01       	movw	r24, r22
    9d50:	bc 01       	movw	r22, r24
    9d52:	cd 01       	movw	r24, r26
    9d54:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9d58:	dc 01       	movw	r26, r24
    9d5a:	cb 01       	movw	r24, r22
    9d5c:	9c 8b       	std	Y+20, r25	; 0x14
    9d5e:	8b 8b       	std	Y+19, r24	; 0x13
    9d60:	0f c0       	rjmp	.+30     	; 0x9d80 <main+0x376e>
    9d62:	80 e9       	ldi	r24, 0x90	; 144
    9d64:	91 e0       	ldi	r25, 0x01	; 1
    9d66:	9a 8b       	std	Y+18, r25	; 0x12
    9d68:	89 8b       	std	Y+17, r24	; 0x11
    9d6a:	89 89       	ldd	r24, Y+17	; 0x11
    9d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    9d6e:	01 97       	sbiw	r24, 0x01	; 1
    9d70:	f1 f7       	brne	.-4      	; 0x9d6e <main+0x375c>
    9d72:	9a 8b       	std	Y+18, r25	; 0x12
    9d74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d76:	8b 89       	ldd	r24, Y+19	; 0x13
    9d78:	9c 89       	ldd	r25, Y+20	; 0x14
    9d7a:	01 97       	sbiw	r24, 0x01	; 1
    9d7c:	9c 8b       	std	Y+20, r25	; 0x14
    9d7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d80:	8b 89       	ldd	r24, Y+19	; 0x13
    9d82:	9c 89       	ldd	r25, Y+20	; 0x14
    9d84:	00 97       	sbiw	r24, 0x00	; 0
    9d86:	69 f7       	brne	.-38     	; 0x9d62 <main+0x3750>
    9d88:	14 c0       	rjmp	.+40     	; 0x9db2 <main+0x37a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    9d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    9d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    9d90:	98 8d       	ldd	r25, Y+24	; 0x18
    9d92:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9d96:	dc 01       	movw	r26, r24
    9d98:	cb 01       	movw	r24, r22
    9d9a:	9c 8b       	std	Y+20, r25	; 0x14
    9d9c:	8b 8b       	std	Y+19, r24	; 0x13
    9d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    9da0:	9c 89       	ldd	r25, Y+20	; 0x14
    9da2:	98 8b       	std	Y+16, r25	; 0x10
    9da4:	8f 87       	std	Y+15, r24	; 0x0f
    9da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    9da8:	98 89       	ldd	r25, Y+16	; 0x10
    9daa:	01 97       	sbiw	r24, 0x01	; 1
    9dac:	f1 f7       	brne	.-4      	; 0x9daa <main+0x3798>
    9dae:	98 8b       	std	Y+16, r25	; 0x10
    9db0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				/*print "'C" in lcd */
				LCD_PrintString(Units);
    9db2:	ce 01       	movw	r24, r28
    9db4:	88 5a       	subi	r24, 0xA8	; 168
    9db6:	9d 4f       	sbci	r25, 0xFD	; 253
    9db8:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <LCD_PrintString>
    9dbc:	7b c0       	rjmp	.+246    	; 0x9eb4 <main+0x38a2>

				while(trick<5)
    9dbe:	80 e0       	ldi	r24, 0x00	; 0
    9dc0:	90 e0       	ldi	r25, 0x00	; 0
    9dc2:	aa e7       	ldi	r26, 0x7A	; 122
    9dc4:	b4 e4       	ldi	r27, 0x44	; 68
    9dc6:	8b 87       	std	Y+11, r24	; 0x0b
    9dc8:	9c 87       	std	Y+12, r25	; 0x0c
    9dca:	ad 87       	std	Y+13, r26	; 0x0d
    9dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    9dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    9dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    9dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    9dd6:	20 e0       	ldi	r18, 0x00	; 0
    9dd8:	30 e0       	ldi	r19, 0x00	; 0
    9dda:	4a e7       	ldi	r20, 0x7A	; 122
    9ddc:	55 e4       	ldi	r21, 0x45	; 69
    9dde:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9de2:	dc 01       	movw	r26, r24
    9de4:	cb 01       	movw	r24, r22
    9de6:	8f 83       	std	Y+7, r24	; 0x07
    9de8:	98 87       	std	Y+8, r25	; 0x08
    9dea:	a9 87       	std	Y+9, r26	; 0x09
    9dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9dee:	6f 81       	ldd	r22, Y+7	; 0x07
    9df0:	78 85       	ldd	r23, Y+8	; 0x08
    9df2:	89 85       	ldd	r24, Y+9	; 0x09
    9df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    9df6:	20 e0       	ldi	r18, 0x00	; 0
    9df8:	30 e0       	ldi	r19, 0x00	; 0
    9dfa:	40 e8       	ldi	r20, 0x80	; 128
    9dfc:	5f e3       	ldi	r21, 0x3F	; 63
    9dfe:	0e 94 95 0b 	call	0x172a	; 0x172a <__ltsf2>
    9e02:	88 23       	and	r24, r24
    9e04:	2c f4       	brge	.+10     	; 0x9e10 <main+0x37fe>
		__ticks = 1;
    9e06:	81 e0       	ldi	r24, 0x01	; 1
    9e08:	90 e0       	ldi	r25, 0x00	; 0
    9e0a:	9e 83       	std	Y+6, r25	; 0x06
    9e0c:	8d 83       	std	Y+5, r24	; 0x05
    9e0e:	3f c0       	rjmp	.+126    	; 0x9e8e <main+0x387c>
	else if (__tmp > 65535)
    9e10:	6f 81       	ldd	r22, Y+7	; 0x07
    9e12:	78 85       	ldd	r23, Y+8	; 0x08
    9e14:	89 85       	ldd	r24, Y+9	; 0x09
    9e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e18:	20 e0       	ldi	r18, 0x00	; 0
    9e1a:	3f ef       	ldi	r19, 0xFF	; 255
    9e1c:	4f e7       	ldi	r20, 0x7F	; 127
    9e1e:	57 e4       	ldi	r21, 0x47	; 71
    9e20:	0e 94 35 0b 	call	0x166a	; 0x166a <__gtsf2>
    9e24:	18 16       	cp	r1, r24
    9e26:	4c f5       	brge	.+82     	; 0x9e7a <main+0x3868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    9e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    9e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    9e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9e30:	20 e0       	ldi	r18, 0x00	; 0
    9e32:	30 e0       	ldi	r19, 0x00	; 0
    9e34:	40 e2       	ldi	r20, 0x20	; 32
    9e36:	51 e4       	ldi	r21, 0x41	; 65
    9e38:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsf3>
    9e3c:	dc 01       	movw	r26, r24
    9e3e:	cb 01       	movw	r24, r22
    9e40:	bc 01       	movw	r22, r24
    9e42:	cd 01       	movw	r24, r26
    9e44:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9e48:	dc 01       	movw	r26, r24
    9e4a:	cb 01       	movw	r24, r22
    9e4c:	9e 83       	std	Y+6, r25	; 0x06
    9e4e:	8d 83       	std	Y+5, r24	; 0x05
    9e50:	0f c0       	rjmp	.+30     	; 0x9e70 <main+0x385e>
    9e52:	80 e9       	ldi	r24, 0x90	; 144
    9e54:	91 e0       	ldi	r25, 0x01	; 1
    9e56:	9c 83       	std	Y+4, r25	; 0x04
    9e58:	8b 83       	std	Y+3, r24	; 0x03
    9e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    9e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    9e5e:	01 97       	sbiw	r24, 0x01	; 1
    9e60:	f1 f7       	brne	.-4      	; 0x9e5e <main+0x384c>
    9e62:	9c 83       	std	Y+4, r25	; 0x04
    9e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9e66:	8d 81       	ldd	r24, Y+5	; 0x05
    9e68:	9e 81       	ldd	r25, Y+6	; 0x06
    9e6a:	01 97       	sbiw	r24, 0x01	; 1
    9e6c:	9e 83       	std	Y+6, r25	; 0x06
    9e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9e70:	8d 81       	ldd	r24, Y+5	; 0x05
    9e72:	9e 81       	ldd	r25, Y+6	; 0x06
    9e74:	00 97       	sbiw	r24, 0x00	; 0
    9e76:	69 f7       	brne	.-38     	; 0x9e52 <main+0x3840>
    9e78:	14 c0       	rjmp	.+40     	; 0x9ea2 <main+0x3890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    9e7c:	78 85       	ldd	r23, Y+8	; 0x08
    9e7e:	89 85       	ldd	r24, Y+9	; 0x09
    9e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e82:	0e 94 44 01 	call	0x288	; 0x288 <__fixunssfsi>
    9e86:	dc 01       	movw	r26, r24
    9e88:	cb 01       	movw	r24, r22
    9e8a:	9e 83       	std	Y+6, r25	; 0x06
    9e8c:	8d 83       	std	Y+5, r24	; 0x05
    9e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    9e90:	9e 81       	ldd	r25, Y+6	; 0x06
    9e92:	9a 83       	std	Y+2, r25	; 0x02
    9e94:	89 83       	std	Y+1, r24	; 0x01
    9e96:	89 81       	ldd	r24, Y+1	; 0x01
    9e98:	9a 81       	ldd	r25, Y+2	; 0x02
    9e9a:	01 97       	sbiw	r24, 0x01	; 1
    9e9c:	f1 f7       	brne	.-4      	; 0x9e9a <main+0x3888>
    9e9e:	9a 83       	std	Y+2, r25	; 0x02
    9ea0:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(1000);
					trick++;
    9ea2:	de 01       	movw	r26, r28
    9ea4:	ad 53       	subi	r26, 0x3D	; 61
    9ea6:	be 4f       	sbci	r27, 0xFE	; 254
    9ea8:	fe 01       	movw	r30, r28
    9eaa:	ed 53       	subi	r30, 0x3D	; 61
    9eac:	fe 4f       	sbci	r31, 0xFE	; 254
    9eae:	80 81       	ld	r24, Z
    9eb0:	8f 5f       	subi	r24, 0xFF	; 255
    9eb2:	8c 93       	st	X, r24
				LCD_intgerToString(temp);
				_delay_ms(20);
				/*print "'C" in lcd */
				LCD_PrintString(Units);

				while(trick<5)
    9eb4:	fe 01       	movw	r30, r28
    9eb6:	ed 53       	subi	r30, 0x3D	; 61
    9eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    9eba:	80 81       	ld	r24, Z
    9ebc:	85 30       	cpi	r24, 0x05	; 5
    9ebe:	08 f4       	brcc	.+2      	; 0x9ec2 <main+0x38b0>
    9ec0:	7e cf       	rjmp	.-260    	; 0x9dbe <main+0x37ac>
				{
					_delay_ms(1000);
					trick++;
				}
				trick = 0;
    9ec2:	fe 01       	movw	r30, r28
    9ec4:	ed 53       	subi	r30, 0x3D	; 61
    9ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    9ec8:	10 82       	st	Z, r1
    9eca:	0c 94 1a 44 	jmp	0x8834	; 0x8834 <main+0x2222>

00009ece <__mulsi3>:
    9ece:	62 9f       	mul	r22, r18
    9ed0:	d0 01       	movw	r26, r0
    9ed2:	73 9f       	mul	r23, r19
    9ed4:	f0 01       	movw	r30, r0
    9ed6:	82 9f       	mul	r24, r18
    9ed8:	e0 0d       	add	r30, r0
    9eda:	f1 1d       	adc	r31, r1
    9edc:	64 9f       	mul	r22, r20
    9ede:	e0 0d       	add	r30, r0
    9ee0:	f1 1d       	adc	r31, r1
    9ee2:	92 9f       	mul	r25, r18
    9ee4:	f0 0d       	add	r31, r0
    9ee6:	83 9f       	mul	r24, r19
    9ee8:	f0 0d       	add	r31, r0
    9eea:	74 9f       	mul	r23, r20
    9eec:	f0 0d       	add	r31, r0
    9eee:	65 9f       	mul	r22, r21
    9ef0:	f0 0d       	add	r31, r0
    9ef2:	99 27       	eor	r25, r25
    9ef4:	72 9f       	mul	r23, r18
    9ef6:	b0 0d       	add	r27, r0
    9ef8:	e1 1d       	adc	r30, r1
    9efa:	f9 1f       	adc	r31, r25
    9efc:	63 9f       	mul	r22, r19
    9efe:	b0 0d       	add	r27, r0
    9f00:	e1 1d       	adc	r30, r1
    9f02:	f9 1f       	adc	r31, r25
    9f04:	bd 01       	movw	r22, r26
    9f06:	cf 01       	movw	r24, r30
    9f08:	11 24       	eor	r1, r1
    9f0a:	08 95       	ret

00009f0c <__udivmodsi4>:
    9f0c:	a1 e2       	ldi	r26, 0x21	; 33
    9f0e:	1a 2e       	mov	r1, r26
    9f10:	aa 1b       	sub	r26, r26
    9f12:	bb 1b       	sub	r27, r27
    9f14:	fd 01       	movw	r30, r26
    9f16:	0d c0       	rjmp	.+26     	; 0x9f32 <__udivmodsi4_ep>

00009f18 <__udivmodsi4_loop>:
    9f18:	aa 1f       	adc	r26, r26
    9f1a:	bb 1f       	adc	r27, r27
    9f1c:	ee 1f       	adc	r30, r30
    9f1e:	ff 1f       	adc	r31, r31
    9f20:	a2 17       	cp	r26, r18
    9f22:	b3 07       	cpc	r27, r19
    9f24:	e4 07       	cpc	r30, r20
    9f26:	f5 07       	cpc	r31, r21
    9f28:	20 f0       	brcs	.+8      	; 0x9f32 <__udivmodsi4_ep>
    9f2a:	a2 1b       	sub	r26, r18
    9f2c:	b3 0b       	sbc	r27, r19
    9f2e:	e4 0b       	sbc	r30, r20
    9f30:	f5 0b       	sbc	r31, r21

00009f32 <__udivmodsi4_ep>:
    9f32:	66 1f       	adc	r22, r22
    9f34:	77 1f       	adc	r23, r23
    9f36:	88 1f       	adc	r24, r24
    9f38:	99 1f       	adc	r25, r25
    9f3a:	1a 94       	dec	r1
    9f3c:	69 f7       	brne	.-38     	; 0x9f18 <__udivmodsi4_loop>
    9f3e:	60 95       	com	r22
    9f40:	70 95       	com	r23
    9f42:	80 95       	com	r24
    9f44:	90 95       	com	r25
    9f46:	9b 01       	movw	r18, r22
    9f48:	ac 01       	movw	r20, r24
    9f4a:	bd 01       	movw	r22, r26
    9f4c:	cf 01       	movw	r24, r30
    9f4e:	08 95       	ret

00009f50 <__prologue_saves__>:
    9f50:	2f 92       	push	r2
    9f52:	3f 92       	push	r3
    9f54:	4f 92       	push	r4
    9f56:	5f 92       	push	r5
    9f58:	6f 92       	push	r6
    9f5a:	7f 92       	push	r7
    9f5c:	8f 92       	push	r8
    9f5e:	9f 92       	push	r9
    9f60:	af 92       	push	r10
    9f62:	bf 92       	push	r11
    9f64:	cf 92       	push	r12
    9f66:	df 92       	push	r13
    9f68:	ef 92       	push	r14
    9f6a:	ff 92       	push	r15
    9f6c:	0f 93       	push	r16
    9f6e:	1f 93       	push	r17
    9f70:	cf 93       	push	r28
    9f72:	df 93       	push	r29
    9f74:	cd b7       	in	r28, 0x3d	; 61
    9f76:	de b7       	in	r29, 0x3e	; 62
    9f78:	ca 1b       	sub	r28, r26
    9f7a:	db 0b       	sbc	r29, r27
    9f7c:	0f b6       	in	r0, 0x3f	; 63
    9f7e:	f8 94       	cli
    9f80:	de bf       	out	0x3e, r29	; 62
    9f82:	0f be       	out	0x3f, r0	; 63
    9f84:	cd bf       	out	0x3d, r28	; 61
    9f86:	09 94       	ijmp

00009f88 <__epilogue_restores__>:
    9f88:	2a 88       	ldd	r2, Y+18	; 0x12
    9f8a:	39 88       	ldd	r3, Y+17	; 0x11
    9f8c:	48 88       	ldd	r4, Y+16	; 0x10
    9f8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    9f90:	6e 84       	ldd	r6, Y+14	; 0x0e
    9f92:	7d 84       	ldd	r7, Y+13	; 0x0d
    9f94:	8c 84       	ldd	r8, Y+12	; 0x0c
    9f96:	9b 84       	ldd	r9, Y+11	; 0x0b
    9f98:	aa 84       	ldd	r10, Y+10	; 0x0a
    9f9a:	b9 84       	ldd	r11, Y+9	; 0x09
    9f9c:	c8 84       	ldd	r12, Y+8	; 0x08
    9f9e:	df 80       	ldd	r13, Y+7	; 0x07
    9fa0:	ee 80       	ldd	r14, Y+6	; 0x06
    9fa2:	fd 80       	ldd	r15, Y+5	; 0x05
    9fa4:	0c 81       	ldd	r16, Y+4	; 0x04
    9fa6:	1b 81       	ldd	r17, Y+3	; 0x03
    9fa8:	aa 81       	ldd	r26, Y+2	; 0x02
    9faa:	b9 81       	ldd	r27, Y+1	; 0x01
    9fac:	ce 0f       	add	r28, r30
    9fae:	d1 1d       	adc	r29, r1
    9fb0:	0f b6       	in	r0, 0x3f	; 63
    9fb2:	f8 94       	cli
    9fb4:	de bf       	out	0x3e, r29	; 62
    9fb6:	0f be       	out	0x3f, r0	; 63
    9fb8:	cd bf       	out	0x3d, r28	; 61
    9fba:	ed 01       	movw	r28, r26
    9fbc:	08 95       	ret

00009fbe <itoa>:
    9fbe:	fb 01       	movw	r30, r22
    9fc0:	9f 01       	movw	r18, r30
    9fc2:	e8 94       	clt
    9fc4:	42 30       	cpi	r20, 0x02	; 2
    9fc6:	c4 f0       	brlt	.+48     	; 0x9ff8 <itoa+0x3a>
    9fc8:	45 32       	cpi	r20, 0x25	; 37
    9fca:	b4 f4       	brge	.+44     	; 0x9ff8 <itoa+0x3a>
    9fcc:	4a 30       	cpi	r20, 0x0A	; 10
    9fce:	29 f4       	brne	.+10     	; 0x9fda <itoa+0x1c>
    9fd0:	97 fb       	bst	r25, 7
    9fd2:	1e f4       	brtc	.+6      	; 0x9fda <itoa+0x1c>
    9fd4:	90 95       	com	r25
    9fd6:	81 95       	neg	r24
    9fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    9fda:	64 2f       	mov	r22, r20
    9fdc:	77 27       	eor	r23, r23
    9fde:	0e 94 10 50 	call	0xa020	; 0xa020 <__udivmodhi4>
    9fe2:	80 5d       	subi	r24, 0xD0	; 208
    9fe4:	8a 33       	cpi	r24, 0x3A	; 58
    9fe6:	0c f0       	brlt	.+2      	; 0x9fea <itoa+0x2c>
    9fe8:	89 5d       	subi	r24, 0xD9	; 217
    9fea:	81 93       	st	Z+, r24
    9fec:	cb 01       	movw	r24, r22
    9fee:	00 97       	sbiw	r24, 0x00	; 0
    9ff0:	a1 f7       	brne	.-24     	; 0x9fda <itoa+0x1c>
    9ff2:	16 f4       	brtc	.+4      	; 0x9ff8 <itoa+0x3a>
    9ff4:	5d e2       	ldi	r21, 0x2D	; 45
    9ff6:	51 93       	st	Z+, r21
    9ff8:	10 82       	st	Z, r1
    9ffa:	c9 01       	movw	r24, r18
    9ffc:	0c 94 00 50 	jmp	0xa000	; 0xa000 <strrev>

0000a000 <strrev>:
    a000:	dc 01       	movw	r26, r24
    a002:	fc 01       	movw	r30, r24
    a004:	67 2f       	mov	r22, r23
    a006:	71 91       	ld	r23, Z+
    a008:	77 23       	and	r23, r23
    a00a:	e1 f7       	brne	.-8      	; 0xa004 <strrev+0x4>
    a00c:	32 97       	sbiw	r30, 0x02	; 2
    a00e:	04 c0       	rjmp	.+8      	; 0xa018 <strrev+0x18>
    a010:	7c 91       	ld	r23, X
    a012:	6d 93       	st	X+, r22
    a014:	70 83       	st	Z, r23
    a016:	62 91       	ld	r22, -Z
    a018:	ae 17       	cp	r26, r30
    a01a:	bf 07       	cpc	r27, r31
    a01c:	c8 f3       	brcs	.-14     	; 0xa010 <strrev+0x10>
    a01e:	08 95       	ret

0000a020 <__udivmodhi4>:
    a020:	aa 1b       	sub	r26, r26
    a022:	bb 1b       	sub	r27, r27
    a024:	51 e1       	ldi	r21, 0x11	; 17
    a026:	07 c0       	rjmp	.+14     	; 0xa036 <__udivmodhi4_ep>

0000a028 <__udivmodhi4_loop>:
    a028:	aa 1f       	adc	r26, r26
    a02a:	bb 1f       	adc	r27, r27
    a02c:	a6 17       	cp	r26, r22
    a02e:	b7 07       	cpc	r27, r23
    a030:	10 f0       	brcs	.+4      	; 0xa036 <__udivmodhi4_ep>
    a032:	a6 1b       	sub	r26, r22
    a034:	b7 0b       	sbc	r27, r23

0000a036 <__udivmodhi4_ep>:
    a036:	88 1f       	adc	r24, r24
    a038:	99 1f       	adc	r25, r25
    a03a:	5a 95       	dec	r21
    a03c:	a9 f7       	brne	.-22     	; 0xa028 <__udivmodhi4_loop>
    a03e:	80 95       	com	r24
    a040:	90 95       	com	r25
    a042:	bc 01       	movw	r22, r24
    a044:	cd 01       	movw	r24, r26
    a046:	08 95       	ret

0000a048 <_exit>:
    a048:	f8 94       	cli

0000a04a <__stop_program>:
    a04a:	ff cf       	rjmp	.-2      	; 0xa04a <__stop_program>
